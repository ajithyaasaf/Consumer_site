
    	
    (function($){  
	$.fn.ticker = function(options) { 
		// Extend our default options with those provided.
		// Note that the first arg to extend is an empty object -d
		// this is to keep from overriding our "defaults" object.
		var opts = $.extend({}, $.fn.ticker.defaults, options); 

		// check that the passed element is actually in the DOM
		if ($(this).length == 0) {
			if (window.console && window.console.log) {
				window.console.log('Element does not exist in DOM!');
			}
			else {
				alert('Element does not exist in DOM!');		
			}
			return false;
		}
		
		/* Get the id of the UL to get our news content from */
		var newsID = '#' + $(this).attr('id');

		/* Get the tag type - we will check this later to makde sure it is a UL tag */
		var tagType = $(this).get(0).tagName; 	

		return this.each(function() { 
			// get a unique id for this ticker
			var uniqID = getUniqID();
			
			/* Internal vars */
			var settings = {				
				position: 0,
				time: 0,
				distance: 0,
				newsArr: {},
				play: true,
				paused: false,
				contentLoaded: false,
				dom: {
					contentID: '#ticker-content-' + uniqID,
					titleID: '#ticker-title-' + uniqID,
					titleElem: '#ticker-title-' + uniqID + ' SPAN',
					tickerID : '#ticker-' + uniqID,
					wrapperID: '#ticker-wrapper-' + uniqID,
					revealID: '#ticker-swipe-' + uniqID,
					revealElem: '#ticker-swipe-' + uniqID + ' SPAN',
					controlsID: '#ticker-controls-' + uniqID,
					prevID: '#prev-' + uniqID,
					nextID: '#next-' + uniqID,
					playPauseID: '#play-pause-' + uniqID
				}
			};

			// if we are not using a UL, display an error message and stop any further execution
			if (tagType != 'UL' && tagType != 'OL' && opts.htmlFeed === true) {
				debugError('Cannot use <' + tagType.toLowerCase() + '> type of element for this plugin - must of type <ul> or <ol>');
				return false;
			}

			// set the ticker direction
			opts.direction == 'rtl' ? opts.direction = 'right' : opts.direction = 'left';
			
			// lets go...
			initialisePage();
			/* Function to get the size of an Object*/
			function countSize(obj) {
			    var size = 0, key;
			    for (key in obj) {
			        if (obj.hasOwnProperty(key)) size++;
			    }
			    return size;
			};

			function getUniqID() {
				var newDate = new Date;
				return newDate.getTime();			
			}
			
			/* Function for handling debug and error messages */ 
			function debugError(obj) {
				if (opts.debugMode) {
					if (window.console && window.console.log) {
						window.console.log(obj);
					}
					else {
						alert(obj);			
					}
				}
			}

			/* Function to setup the page */
			function initialisePage() {
				// process the content for this ticker
				processContent();
				
				// add our HTML structure for the ticker to the DOM
				$(newsID).wrap('<div id="' + settings.dom.wrapperID.replace('#', '') + '"></div>');
				
				// remove any current content inside this ticker
				$(settings.dom.wrapperID).children().remove();
				
				$(settings.dom.wrapperID).append('<div id="' + settings.dom.tickerID.replace('#', '') + '" class="ticker"><div id="' + settings.dom.titleID.replace('#', '') + '" class="ticker-title"><span><!-- --></span></div><p class="ticker-content"> <span id="' + settings.dom.contentID.replace('#', '') + '" ></span></p><div id="' + settings.dom.revealID.replace('#', '') + '" class="ticker-swipe"><span><!-- --></span></div></div>');
				$(settings.dom.wrapperID).removeClass('no-js').addClass('ticker-wrapper has-js ' + opts.direction);
				// hide the ticker
				$(settings.dom.tickerElem + ',' + settings.dom.contentID).hide();
				// add the controls to the DOM if required
				if (opts.controls) {
					// add related events - set functions to run on given event
					$(settings.dom.controlsID).live('click mouseover mousedown mouseout mouseup', function (e) {
						var button = e.target.id;
						
						if(!button){
						    button = $(e.target).closest('[id]').attr('id');
						}
						
						if (e.type == 'click') {	
							switch (button) {
								case settings.dom.prevID.replace('#', ''):
									// show previous item
									settings.paused = true;
									$(settings.dom.playPauseID).addClass('paused');
									manualChangeContent('prev');
									break;
								case settings.dom.nextID.replace('#', ''):
									// show next item
									settings.paused = true;
									$(settings.dom.playPauseID).addClass('paused');
									manualChangeContent('next');
									break;
								case settings.dom.playPauseID.replace('#', ''):
									// play or pause the ticker
									if (settings.play == true) {
										settings.paused = true;
										$(settings.dom.playPauseID).addClass('paused');
										pauseTicker();
									}
									else {
										settings.paused = false;
										$(settings.dom.playPauseID).removeClass('paused');
										restartTicker();
									}
									break;
							}	
						}
						else if (e.type == 'mouseover' && $('#' + button).hasClass('controls')) {
							$('#' + button).addClass('over');
						}
						else if (e.type == 'mousedown' && $('#' + button).hasClass('controls')) {
							$('#' + button).addClass('down');
						}
						else if (e.type == 'mouseup' && $('#' + button).hasClass('controls')) {
							$('#' + button).removeClass('down');
						}
						else if (e.type == 'mouseout' && $('#' + button).hasClass('controls')) {
							$('#' + button).removeClass('over');
						}
					});
					// add controls HTML to DOM
					$(settings.dom.wrapperID).append('<ul id="' + settings.dom.controlsID.replace('#', '') + '" class="ticker-controls"><li id="' + settings.dom.prevID.replace('#', '') + '" class="jnt-prev controls"><a href="javascript:void(0)"><!-- --></a></li><li id="' + settings.dom.playPauseID.replace('#', '') + '" class="jnt-play-pause controls"><a href="javascript:void(0)"><!-- --></a></li><li id="' + settings.dom.nextID.replace('#', '') + '" class="jnt-next controls"><a href="javascript:void(0)"><!-- --></a></li></ul><a class="mailer_icon" title="Subscribe to Newsletter" href=/newsletterhome.cms?utm_source=' + window.location.href + '&utm_medium=referral&utm_campaign=breakingnewsletter ></a>');
				}
				if (opts.displayType != 'fade') {
				    //Anurag - Commented mouse over and mouse out events on displayType:Reveal
                	// add mouse over on the content
               	/*	$(settings.dom.contentID).mouseover(function () {
               			if (settings.paused == false) {
               			   pauseTicker();
               			}
               		}).mouseout(function () {
               			if (settings.paused == false) {
               				restartTicker();
               			}
               		}); */
				}
				// we may have to wait for the ajax call to finish here
				if (!opts.ajaxFeed) {
				     //settings.nextnewslock = 0;
					setupContentAndTriggerDisplay();
				
				}
			}

			/* Start to process the content for this ticker */
			function processContent() {
				// check to see if we need to load content
				if (settings.contentLoaded == false) {
					// construct content
					if (opts.ajaxFeed) {
						if (opts.feedType == 'xml') {							
							$.ajax({
								url: opts.feedUrl,
								cache: false,
								dataType: opts.feedType,
								async: true,
								success: function(data){
									count = 0;	
									// get the 'root' node
									for (var a = 0; a < data.childNodes.length; a++) {
										if (data.childNodes[a].nodeName == 'rss') {
											xmlContent = data.childNodes[a];
										}
									}
									// find the channel node
									for (var i = 0; i < xmlContent.childNodes.length; i++) {
										if (xmlContent.childNodes[i].nodeName == 'channel') {
											xmlChannel = xmlContent.childNodes[i];
										}		
									}
									// for each item create a link and add the article title as the link text
									for (var x = 0; x < xmlChannel.childNodes.length; x++) {
										if (xmlChannel.childNodes[x].nodeName == 'item') {
											xmlItems = xmlChannel.childNodes[x];
											var title, link = false;
											for (var y = 0; y < xmlItems.childNodes.length; y++) {
												if (xmlItems.childNodes[y].nodeName == 'title') {      												    
													title = xmlItems.childNodes[y].lastChild.nodeValue;
												}
												else if (xmlItems.childNodes[y].nodeName == 'link') {												    
													link = xmlItems.childNodes[y].lastChild.nodeValue; 
												}
												if ((title !== false && title != '') && link !== false) {
												    settings.newsArr['item-' + count] = { type: opts.titleText, content: '<a href="' + link + '">' + title + '</a>' };												    count++;												    title = false;												    link = false;
												}
											}	
										}		
									}			
									// quick check here to see if we actually have any content - log error if not
									if (countSize(settings.newsArr < 1)) {
										debugError('Couldn\'t find any content from the XML feed for the ticker to use!');
										return false;
									}
									settings.contentLoaded = true;
									setupContentAndTriggerDisplay();
								}
							});							
						}
						else {
							debugError('Code Me!');	
						}						
					}
					else if (opts.htmlFeed) { 
						if($(newsID + ' LI').length > 0) {
							$(newsID + ' LI').each(function (i) {
								// maybe this could be one whole object and not an array of objects?
								settings.newsArr['item-' + i] = { type: opts.titleText, content: $(this).html()};
							});		
						}	
						else {
							debugError('Couldn\'t find HTML any content for the ticker to use!');
							return false;
						}
					}
					else {
						debugError('The ticker is set to not use any types of content! Check the settings for the ticker.');
						return false;
					}					
				}			
			}
			function setupContentAndTriggerDisplay() {
               	settings.contentLoaded = true;
                settings.nextnewslock = 0;//anurag - my default variable to stop animation
                //settings.noAniforFirst = 0;
				// update the ticker content with the correct item
				// insert news content into DOM
				
    				$(settings.dom.titleElem).html(settings.newsArr['item-' + settings.position].type);
    				$(settings.dom.contentID).html(settings.newsArr['item-' + settings.position].content);
    				var dataLen = $(settings.dom.contentID).text();
    				$('.ticker-content').css('margin-left','0px');
    					$('.ticker-content span').css('margin-left','0px');
    					var desk_data_len = 90;
    				//	 var iOS = ( navigator.userAgent.match(/(iPad)/g) ? true : false );
    				         //   if(iOS){$('.ticker-content span').css('font-size','55%');
    				          //  $('.ticker-title span').css('font-size','80%');
    				          //  $('.ticker-title').css('width','180px');
    				               //desk_data_len = 45;
    				          //  }
    				        var win_outer_wid= window.innerWidth;
    				       
                            if(win_outer_wid >= 768 && win_outer_wid <= 999) {
                               desk_data_len = 40;
                    //           $('.ticker-content span').css('font-size','75%');
    				            // $('.ticker-title span').css('font-size','80%');
    				            // $('.ticker-title').css('width','180px');
                            } 
    				           
    				//	console.log(dataLen.length);
    				var abc =1;
    				if((dataLen.length > desk_data_len) && abc==1){
    				    //console.log('News');
    				    settings.nextnewslock = 1;
    				    var iOS = ( navigator.userAgent.match(/(iPad)/g) ? true : false );
    				            if(iOS){timer = 3000;}
    				            else{timer = 6500;}
    				    //timer = 6500;//(90/13)*1000;
    				    shift=0;
    				    setTimeout(function(){
    				        mycount = function(len,shift) {
    				            //var iOS = ( navigator.userAgent.match(/(iPad)/g) ? true : false );
    				            //if(iOS){shift+=12.5;}
    				            //else{shift+=9.5;}
    				            //console.log(iOS);
    				            var win_outer_wid= window.innerWidth;
                                    if(win_outer_wid >= 768 && win_outer_wid <= 999) {
                                       shift+=8.5;
                                    }else{ 
    				                    shift+=11.5;
                                    }
    				            len++;
    				          //  console.log(shift +" :"+ len);
    						   // $('.ticker-content span').css('margin-left','-'+shift+'px');
    				            if((dataLen.length- desk_data_len) >= len ){
    				                shift = mycount(len++,shift);
    				            }
    							return shift;
    				        };
    				        var shift_main = mycount(1,0);
    				      
    				        if(settings.nextnewslock == 1 )
    				        {
    				            //console.log(settings.noAniforFirst);
    				       // if(settings.noAniforFirst == 0){
    						$(".ticker-content span").css('margin-left', '').delay(1).animate( {marginLeft:'-'+shift_main+'px'}, ((dataLen.length-desk_data_len)*310),'linear',function(){try{if(homeObj.breakingNewsPause == 1){$('.ticker-content span').css('margin-left','0px');}}catch(e){console.log(e);}});
    				       // }
    				        }
    				       // settings.noAniforFirst++;
    						//	$(".ticker-content span").animate( {marginLeft:'-'+shift_main+'px'}, 6000,'linear',function(){try{if(homeObj.breakingNewsPause == 1){$('.ticker-content span').css('margin-left','0px');}}catch(e){console.log(e);}});
    						//	$(".ticker-content span").animate( {marginLeft:'-'+shift_main+'px'}, 5000,'linear',function(){});
    				    }, timer);
    				}
    				
    
    				// set the next content item to be used - loop round if we are at the end of the content
    				if (settings.position == (countSize(settings.newsArr) -1)) {
    					settings.position = 0;
    				}
    				else {		
    					settings.position++;
    				}			
    
    				// get the values of content and set the time of the reveal (so all reveals have the same speed regardless of content size)
    				distance = $(settings.dom.contentID).width();
    				time = distance / opts.speed;
    
    				// start the ticker animation						
    				revealContent();
    				

			}

			// slide back cover or fade in content
			function revealContent() {
			    //console.log('reveal content');
				$(settings.dom.contentID).css('opacity', '1');
				if(settings.play) {	
					// get the width of the title element to offset the content and reveal	
					var offset = $(settings.dom.titleID).width() + 45;
	
					$(settings.dom.revealID).css(opts.direction, offset + 'px');
					// show the reveal element and start the animation
					if (opts.displayType == 'fade') {
					    //console.log('reveal content if');
						// fade in effect ticker
						$(settings.dom.revealID).hide(0, function () {
							$(settings.dom.contentID).css(opts.direction, offset + 'px').fadeIn(opts.fadeInSpeed, postReveal);
						});						
					}
					else if (opts.displayType == 'scroll') {
						// to code
					}
					else {
					    //console.log('reveal content else');
						// default bbc scroll effect
						$(settings.dom.revealElem).show(0, function () {
							$(settings.dom.contentID).css(opts.direction, offset + 'px').show();
							// set our animation direction
							animationAction = opts.direction == 'right' ? { marginRight: distance + 'px'} : { marginLeft: distance + 'px' };
							$(settings.dom.revealID).css('margin-' + opts.direction, '0px').delay(20).animate(animationAction, time, 'linear', postReveal);
						});		
					}
				}
				else {
					return false;					
				}
			};

			// here we hide the current content and reset the ticker elements to a default state ready for the next ticker item
			function postReveal() {				
				if(settings.play) {		
					// we have to separately fade the content out here to get around an IE bug - needs further investigation
					//console.log('a:'+opts.pauseOnItems);
					$(settings.dom.contentID).delay(2500).fadeOut(opts.fadeOutSpeed);
					//	$(settings.dom.contentID).fadeOut(opts.fadeOutSpeed);//anurag-removing delay
					// deal with the rest of the content, prepare the DOM and trigger the next ticker
					if (opts.displayType == 'fade') {
						$(settings.dom.contentID).fadeOut(opts.fadeOutSpeed, function () {
							$(settings.dom.wrapperID)
								.find(settings.dom.revealElem + ',' + settings.dom.contentID)
									.hide()
								.end().find(settings.dom.tickerID + ',' + settings.dom.revealID)
									.show()
								.end().find(settings.dom.tickerID + ',' + settings.dom.revealID)
									.removeAttr('style');
							setupContentAndTriggerDisplay();						
						});
					}
					else {
						$(settings.dom.revealID).hide(0, function () {
							$(settings.dom.contentID).fadeOut(opts.fadeOutSpeed, function () {
								$(settings.dom.wrapperID)
									.find(settings.dom.revealElem + ',' + settings.dom.contentID)
										.hide()
									.end().find(settings.dom.tickerID + ',' + settings.dom.revealID)
										.show()
									.end().find(settings.dom.tickerID + ',' + settings.dom.revealID)
										.removeAttr('style');
											//console.log('2');
								setupContentAndTriggerDisplay();			
							
							});
						});	
					}
				}
				else {
					$(settings.dom.revealElem).hide();
				}
			}

			// pause ticker
			function pauseTicker() {
			     //console.log("Breaking News:Pause the Breaking News Ticker");
			    //Pause the Breaking News AJAX Call and Refresh
				homeObj.breakingNewsPause = 1;
			    
				settings.play = false;
				// stop animation and show content - must pass "true, true" to the stop function, or we can get some funky behaviour
				$(settings.dom.tickerID + ',' + settings.dom.revealID + ',' + settings.dom.titleID + ',' + settings.dom.titleElem + ',' + settings.dom.revealElem + ',' + settings.dom.contentID).stop(true, true);
				$(settings.dom.revealID + ',' + settings.dom.revealElem).hide();
				$(settings.dom.wrapperID)
					.find(settings.dom.titleID + ',' + settings.dom.titleElem).show()
						.end().find(settings.dom.contentID).show();
			}

			// play ticker
			function restartTicker() {
			     settings.nextnewslock = 0;
			    //$( ".ticker-content span" ).stop();
			    //console.log("Breaking News:Play the Breaking News Ticker");
				settings.play = true;
				settings.paused = false;
				//Play the Breaking News AJAX Call and Refresh
				homeObj.breakingNewsPause = 0;
				// start the ticker again
				postReveal();	
			}

			// change the content on user input
			function manualChangeContent(direction) {
				pauseTicker();
				//Pause the Breaking News AJAX Call and Refresh
				homeObj.breakingNewsPause = 1;
				//Set margin to zero when next/previous is clicked while news is scrolling
				$('.ticker-content span').css('margin-left','0px');
				
				switch (direction) {
					case 'prev':
						if (settings.position == 0) {
							settings.position = countSize(settings.newsArr) -2;
						}
						else if (settings.position == 1) {
							settings.position = countSize(settings.newsArr) -1;
						}
						else {
							settings.position = settings.position - 2;
						}
						$(settings.dom.titleElem).html(settings.newsArr['item-' + settings.position].type);
						$(settings.dom.contentID).html(settings.newsArr['item-' + settings.position].content);						
						break;
					case 'next':
						$(settings.dom.titleElem).html(settings.newsArr['item-' + settings.position].type);
						$(settings.dom.contentID).html(settings.newsArr['item-' + settings.position].content);
						break;
				}
				// set the next content item to be used - loop round if we are at the end of the content
				if (settings.position == (countSize(settings.newsArr) -1)) {
					settings.position = 0;
				}
				else {		
					settings.position++;
				}	
			}
		});  
	};  

	// plugin defaults - added as a property on our plugin function
	$.fn.ticker.defaults = {
		speed: 0.10,			
		ajaxFeed: false,
		feedUrl: '',
		feedType: 'xml',
		displayType: 'reveal',
		htmlFeed: true,
		debugMode: true,
		controls: true,
		titleText: 'Breaking News',	
		direction: 'ltr',	
		pauseOnItems: 3000,
		fadeInSpeed: 600,
		fadeOutSpeed: 300
	};	
})(jQuery);

	
    
        var TimesApps = window.TimesApps || {};
        TimesApps.isIncognito = false;
        
        (function(){
            function retry(isDone, next) {
                var current_trial = 0, max_retry = 50, interval = 10, is_timeout = false;
                var id = window.setInterval(
                    function() {
                        if (isDone()) {
                            window.clearInterval(id);
                            next(is_timeout);
                        }
                        if (current_trial++ > max_retry) {
                            window.clearInterval(id);
                            is_timeout = true;
                            next(is_timeout);
                        }
                    },
                    10
                );
            }
            
            function isIE10OrLater(user_agent) {
                var ua = user_agent.toLowerCase();
                if (ua.indexOf('msie') === 0 && ua.indexOf('trident') === 0) {
                    return false;
                }
                var match = /(?:msie|rv:)\s?([\d\.]+)/.exec(ua);
                if (match && parseInt(match[1], 10) >= 10) {
                    return true;
                }
                return false;
            }
            
            function detectPrivateMode(callback) {
                var is_private;
            
                if (window.webkitRequestFileSystem) {
                    window.webkitRequestFileSystem(
                        window.TEMPORARY, 1,
                        function() {
                            is_private = false;
                        },
                        function(e) {
                           // console.log(e);
                            is_private = true;
                        }
                    );
                } else if (window.indexedDB && /Firefox/.test(window.navigator.userAgent)) {
                    var db;
                    try {
                        db = window.indexedDB.open('test');
                    } catch(e) {
                        is_private = true;
                    }
            
                    if (typeof is_private === 'undefined') {
                        retry(
                            function isDone() {
                                return db.readyState === 'done' ? true : false;
                            },
                            function next(is_timeout) {
                                if (!is_timeout) {
                                    is_private = db.result ? false : true;
                                }
                            }
                        );
                    }
                } else if (isIE10OrLater(window.navigator.userAgent)) {
                    is_private = false;
                    try {
                        if (!window.indexedDB) {
                            is_private = true;
                        }                 
                    } catch (e) {
                        is_private = true;
                    }
                } else if (window.localStorage && /Safari/.test(window.navigator.userAgent)) {
                    try {
                        window.localStorage.setItem('test', 1);
                    } catch(e) {
                        is_private = true;
                    }
            
                    if (typeof is_private === 'undefined') {
                        is_private = false;
                        window.localStorage.removeItem('test');
                    }
                }
            
                retry(
                    function isDone() {
                        return typeof is_private !== 'undefined' ? true : false;
                    },
                    function next(is_timeout) {
                        callback(is_private);
                    }
                );
            }
            
            detectPrivateMode(
                function(is_private) {
                    TimesApps.isIncognito  = typeof is_private === 'undefined' ? false : is_private ? true : false;
                    if(TimesApps.isIncognito && typeof ga!="undefined"){
                          ga('send', 'event', 'Incognito_WEB', window.navigator.userAgent, window.location.href); // Remove redundant GA events
                
                    }
                }
            );
        })();
    
    
	    
/*mousewheel*/
(function(a){function d(b){var c=b||window.event,d=[].slice.call(arguments,1),e=0,f=!0,g=0,h=0;return b=a.event.fix(c),b.type="mousewheel",c.wheelDelta&&(e=c.wheelDelta/120),c.detail&&(e=-c.detail/3),h=e,c.axis!==undefined&&c.axis===c.HORIZONTAL_AXIS&&(h=0,g=-1*e),c.wheelDeltaY!==undefined&&(h=c.wheelDeltaY/120),c.wheelDeltaX!==undefined&&(g=-1*c.wheelDeltaX/120),d.unshift(b,e,g,h),(a.event.dispatch||a.event.handle).apply(this,d)}var b=["DOMMouseScroll","mousewheel"];if(a.event.fixHooks)for(var c=b.length;c;)a.event.fixHooks[b[--c]]=a.event.mouseHooks;a.event.special.mousewheel={setup:function(){if(this.addEventListener)for(var a=b.length;a;)this.addEventListener(b[--a],d,!1);else this.onmousewheel=d},teardown:function(){if(this.removeEventListener)for(var a=b.length;a;)this.removeEventListener(b[--a],d,!1);else this.onmousewheel=null}},a.fn.extend({mousewheel:function(a){return a?this.bind("mousewheel",a):this.trigger("mousewheel")},unmousewheel:function(a){return this.unbind("mousewheel",a)}})})(jQuery);
/*custom scrollbar*/
(function(c){var b={init:function(e){var f={set_width:false,set_height:false,horizontalScroll:false,scrollInertia:950,mouseWheel:true,mouseWheelPixels:"auto",autoDraggerLength:true,autoHideScrollbar:false,alwaysShowScrollbar:false,snapAmount:null,snapOffset:0,scrollButtons:{enable:false,scrollType:"continuous",scrollSpeed:"auto",scrollAmount:40},advanced:{updateOnBrowserResize:true,updateOnContentResize:false,autoExpandHorizontalScroll:false,autoScrollOnFocus:true,normalizeMouseWheelDelta:false},contentTouchScroll:true,callbacks:{onScrollStart:function(){},onScroll:function(){},onTotalScroll:function(){},onTotalScrollBack:function(){},onTotalScrollOffset:0,onTotalScrollBackOffset:0,whileScrolling:function(){}},theme:"light"},e=c.extend(true,f,e);return this.each(function(){var m=c(this);if(e.set_width){m.css("width",e.set_width)}if(e.set_height){m.css("height",e.set_height)}if(!c(document).data("mCustomScrollbar-index")){c(document).data("mCustomScrollbar-index","1")}else{var t=parseInt(c(document).data("mCustomScrollbar-index"));c(document).data("mCustomScrollbar-index",t+1)}m.wrapInner("<div class='mCustomScrollBox mCS-"+e.theme+"' id='mCSB_"+c(document).data("mCustomScrollbar-index")+"' style='position:relative; height:100%; overflow:hidden; max-width:100%;' />").addClass("mCustomScrollbar _mCS_"+c(document).data("mCustomScrollbar-index"));var g=m.children(".mCustomScrollBox");if(e.horizontalScroll){g.addClass("mCSB_horizontal").wrapInner("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />");var k=g.children(".mCSB_h_wrapper");k.wrapInner("<div class='mCSB_container' style='position:absolute; left:0;' />").children(".mCSB_container").css({width:k.children().outerWidth(),position:"relative"}).unwrap()}else{g.wrapInner("<div class='mCSB_container' style='position:relative; top:0;' />")}var o=g.children(".mCSB_container");if(c.support.touch){o.addClass("mCS_touch")}o.after("<div class='mCSB_scrollTools' style='position:absolute;'><div class='mCSB_draggerContainer'><div class='mCSB_dragger' style='position:absolute;' oncontextmenu='return false;'><div class='mCSB_dragger_bar' style='position:relative;'></div></div><div class='mCSB_draggerRail'></div></div></div>");var l=g.children(".mCSB_scrollTools"),h=l.children(".mCSB_draggerContainer"),q=h.children(".mCSB_dragger");if(e.horizontalScroll){q.data("minDraggerWidth",q.width())}else{q.data("minDraggerHeight",q.height())}if(e.scrollButtons.enable){if(e.horizontalScroll){l.prepend("<a class='mCSB_buttonLeft' oncontextmenu='return false;'></a>").append("<a class='mCSB_buttonRight' oncontextmenu='return false;'></a>")}else{l.prepend("<a class='mCSB_buttonUp' oncontextmenu='return false;'></a>").append("<a class='mCSB_buttonDown' oncontextmenu='return false;'></a>")}}g.bind("scroll",function(){if(!m.is(".mCS_disabled")){g.scrollTop(0).scrollLeft(0)}});m.data({mCS_Init:true,mCustomScrollbarIndex:c(document).data("mCustomScrollbar-index"),horizontalScroll:e.horizontalScroll,scrollInertia:e.scrollInertia,scrollEasing:"mcsEaseOut",mouseWheel:e.mouseWheel,mouseWheelPixels:e.mouseWheelPixels,autoDraggerLength:e.autoDraggerLength,autoHideScrollbar:e.autoHideScrollbar,alwaysShowScrollbar:e.alwaysShowScrollbar,snapAmount:e.snapAmount,snapOffset:e.snapOffset,scrollButtons_enable:e.scrollButtons.enable,scrollButtons_scrollType:e.scrollButtons.scrollType,scrollButtons_scrollSpeed:e.scrollButtons.scrollSpeed,scrollButtons_scrollAmount:e.scrollButtons.scrollAmount,autoExpandHorizontalScroll:e.advanced.autoExpandHorizontalScroll,autoScrollOnFocus:e.advanced.autoScrollOnFocus,normalizeMouseWheelDelta:e.advanced.normalizeMouseWheelDelta,contentTouchScroll:e.contentTouchScroll,onScrollStart_Callback:e.callbacks.onScrollStart,onScroll_Callback:e.callbacks.onScroll,onTotalScroll_Callback:e.callbacks.onTotalScroll,onTotalScrollBack_Callback:e.callbacks.onTotalScrollBack,onTotalScroll_Offset:e.callbacks.onTotalScrollOffset,onTotalScrollBack_Offset:e.callbacks.onTotalScrollBackOffset,whileScrolling_Callback:e.callbacks.whileScrolling,bindEvent_scrollbar_drag:false,bindEvent_content_touch:false,bindEvent_scrollbar_click:false,bindEvent_mousewheel:false,bindEvent_buttonsContinuous_y:false,bindEvent_buttonsContinuous_x:false,bindEvent_buttonsPixels_y:false,bindEvent_buttonsPixels_x:false,bindEvent_focusin:false,bindEvent_autoHideScrollbar:false,mCSB_buttonScrollRight:false,mCSB_buttonScrollLeft:false,mCSB_buttonScrollDown:false,mCSB_buttonScrollUp:false});if(e.horizontalScroll){if(m.css("max-width")!=="none"){if(!e.advanced.updateOnContentResize){e.advanced.updateOnContentResize=true}}}else{if(m.css("max-height")!=="none"){var s=false,r=parseInt(m.css("max-height"));if(m.css("max-height").indexOf("%")>=0){s=r,r=m.parent().height()*s/100}m.css("overflow","hidden");g.css("max-height",r)}}m.mCustomScrollbar("update");if(e.advanced.updateOnBrowserResize){var i,j=c(window).width(),u=c(window).height();c(window).bind("resize."+m.data("mCustomScrollbarIndex"),function(){if(i){clearTimeout(i)}i=setTimeout(function(){if(!m.is(".mCS_disabled")&&!m.is(".mCS_destroyed")){var w=c(window).width(),v=c(window).height();if(j!==w||u!==v){if(m.css("max-height")!=="none"&&s){g.css("max-height",m.parent().height()*s/100)}m.mCustomScrollbar("update");j=w;u=v}}},150)})}if(e.advanced.updateOnContentResize){var p;if(e.horizontalScroll){var n=o.outerWidth()}else{var n=o.outerHeight()}p=setInterval(function(){if(e.horizontalScroll){if(e.advanced.autoExpandHorizontalScroll){o.css({position:"absolute",width:"auto"}).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({width:o.outerWidth(),position:"relative"}).unwrap()}var v=o.outerWidth()}else{var v=o.outerHeight()}if(v!=n){m.mCustomScrollbar("update");n=v}},300)}})},update:function(){var n=c(this),k=n.children(".mCustomScrollBox"),q=k.children(".mCSB_container");q.removeClass("mCS_no_scrollbar");n.removeClass("mCS_disabled mCS_destroyed");k.scrollTop(0).scrollLeft(0);var y=k.children(".mCSB_scrollTools"),o=y.children(".mCSB_draggerContainer"),m=o.children(".mCSB_dragger");if(n.data("horizontalScroll")){var A=y.children(".mCSB_buttonLeft"),t=y.children(".mCSB_buttonRight"),f=k.width();if(n.data("autoExpandHorizontalScroll")){q.css({position:"absolute",width:"auto"}).wrap("<div class='mCSB_h_wrapper' style='position:relative; left:0; width:999999px;' />").css({width:q.outerWidth(),position:"relative"}).unwrap()}var z=q.outerWidth()}else{var w=y.children(".mCSB_buttonUp"),g=y.children(".mCSB_buttonDown"),r=k.height(),i=q.outerHeight()}if(i>r&&!n.data("horizontalScroll")){y.css("display","block");var s=o.height();if(n.data("autoDraggerLength")){var u=Math.round(r/i*s),l=m.data("minDraggerHeight");if(u<=l){m.css({height:l})}else{if(u>=s-10){var p=s-10;m.css({height:p})}else{m.css({height:u})}}m.children(".mCSB_dragger_bar").css({"line-height":m.height()+"px"})}var B=m.height(),x=(i-r)/(s-B);n.data("scrollAmount",x).mCustomScrollbar("scrolling",k,q,o,m,w,g,A,t);var D=Math.abs(q.position().top);n.mCustomScrollbar("scrollTo",D,{scrollInertia:0,trigger:"internal"})}else{if(z>f&&n.data("horizontalScroll")){y.css("display","block");var h=o.width();if(n.data("autoDraggerLength")){var j=Math.round(f/z*h),C=m.data("minDraggerWidth");if(j<=C){m.css({width:C})}else{if(j>=h-10){var e=h-10;m.css({width:e})}else{m.css({width:j})}}}var v=m.width(),x=(z-f)/(h-v);n.data("scrollAmount",x).mCustomScrollbar("scrolling",k,q,o,m,w,g,A,t);var D=Math.abs(q.position().left);n.mCustomScrollbar("scrollTo",D,{scrollInertia:0,trigger:"internal"})}else{k.unbind("mousewheel focusin");if(n.data("horizontalScroll")){m.add(q).css("left",0)}else{m.add(q).css("top",0)}if(n.data("alwaysShowScrollbar")){if(!n.data("horizontalScroll")){m.css({height:o.height()})}else{if(n.data("horizontalScroll")){m.css({width:o.width()})}}}else{y.css("display","none");q.addClass("mCS_no_scrollbar")}n.data({bindEvent_mousewheel:false,bindEvent_focusin:false})}}},scrolling:function(i,q,n,k,A,f,D,w){var l=c(this);if(!l.data("bindEvent_scrollbar_drag")){var o,p,C,z,e;if(c.support.pointer){C="pointerdown";z="pointermove";e="pointerup"}else{if(c.support.msPointer){C="MSPointerDown";z="MSPointerMove";e="MSPointerUp"}}if(c.support.pointer||c.support.msPointer){k.bind(C,function(K){K.preventDefault();l.data({on_drag:true});k.addClass("mCSB_dragger_onDrag");var J=c(this),M=J.offset(),I=K.originalEvent.pageX-M.left,L=K.originalEvent.pageY-M.top;if(I<J.width()&&I>0&&L<J.height()&&L>0){o=L;p=I}});c(document).bind(z+"."+l.data("mCustomScrollbarIndex"),function(K){K.preventDefault();if(l.data("on_drag")){var J=k,M=J.offset(),I=K.originalEvent.pageX-M.left,L=K.originalEvent.pageY-M.top;G(o,p,L,I)}}).bind(e+"."+l.data("mCustomScrollbarIndex"),function(x){l.data({on_drag:false});k.removeClass("mCSB_dragger_onDrag")})}else{k.bind("mousedown touchstart",function(K){K.preventDefault();K.stopImmediatePropagation();var J=c(this),N=J.offset(),I,M;if(K.type==="touchstart"){var L=K.originalEvent.touches[0]||K.originalEvent.changedTouches[0];I=L.pageX-N.left;M=L.pageY-N.top}else{l.data({on_drag:true});k.addClass("mCSB_dragger_onDrag");I=K.pageX-N.left;M=K.pageY-N.top}if(I<J.width()&&I>0&&M<J.height()&&M>0){o=M;p=I}}).bind("touchmove",function(K){K.preventDefault();K.stopImmediatePropagation();var N=K.originalEvent.touches[0]||K.originalEvent.changedTouches[0],J=c(this),M=J.offset(),I=N.pageX-M.left,L=N.pageY-M.top;G(o,p,L,I)});c(document).bind("mousemove."+l.data("mCustomScrollbarIndex"),function(K){if(l.data("on_drag")){var J=k,M=J.offset(),I=K.pageX-M.left,L=K.pageY-M.top;G(o,p,L,I)}}).bind("mouseup."+l.data("mCustomScrollbarIndex"),function(x){l.data({on_drag:false});k.removeClass("mCSB_dragger_onDrag")})}l.data({bindEvent_scrollbar_drag:true})}function G(J,K,L,I){if(l.data("horizontalScroll")){l.mCustomScrollbar("scrollTo",(k.position().left-(K))+I,{moveDragger:true,trigger:"internal"})}else{l.mCustomScrollbar("scrollTo",(k.position().top-(J))+L,{moveDragger:true,trigger:"internal"})}}if(c.support.touch&&l.data("contentTouchScroll")){if(!l.data("bindEvent_content_touch")){var m,E,s,t,v,F,H;q.bind("touchstart",function(x){x.stopImmediatePropagation();m=x.originalEvent.touches[0]||x.originalEvent.changedTouches[0];E=c(this);s=E.offset();v=m.pageX-s.left;t=m.pageY-s.top;F=t;H=v});q.bind("touchmove",function(x){x.preventDefault();x.stopImmediatePropagation();m=x.originalEvent.touches[0]||x.originalEvent.changedTouches[0];E=c(this).parent();s=E.offset();v=m.pageX-s.left;t=m.pageY-s.top;if(l.data("horizontalScroll")){l.mCustomScrollbar("scrollTo",H-v,{trigger:"internal"})}else{l.mCustomScrollbar("scrollTo",F-t,{trigger:"internal"})}})}}if(!l.data("bindEvent_scrollbar_click")){n.bind("click",function(I){var x=(I.pageY-n.offset().top)*l.data("scrollAmount"),y=c(I.target);if(l.data("horizontalScroll")){x=(I.pageX-n.offset().left)*l.data("scrollAmount")}if(y.hasClass("mCSB_draggerContainer")||y.hasClass("mCSB_draggerRail")){l.mCustomScrollbar("scrollTo",x,{trigger:"internal",scrollEasing:"draggerRailEase"})}});l.data({bindEvent_scrollbar_click:true})}if(l.data("mouseWheel")){if(!l.data("bindEvent_mousewheel")){i.bind("mousewheel",function(K,M){var J,I=l.data("mouseWheelPixels"),x=Math.abs(q.position().top),L=k.position().top,y=n.height()-k.height();if(l.data("normalizeMouseWheelDelta")){if(M<0){M=-1}else{M=1}}if(I==="auto"){I=100+Math.round(l.data("scrollAmount")/2)}if(l.data("horizontalScroll")){L=k.position().left;y=n.width()-k.width();x=Math.abs(q.position().left)}if((M>0&&L!==0)||(M<0&&L!==y)){K.preventDefault();K.stopImmediatePropagation()}J=x-(M*I);l.mCustomScrollbar("scrollTo",J,{trigger:"internal"})});l.data({bindEvent_mousewheel:true})}}if(l.data("scrollButtons_enable")){if(l.data("scrollButtons_scrollType")==="pixels"){if(l.data("horizontalScroll")){w.add(D).unbind("mousedown touchstart MSPointerDown pointerdown mouseup MSPointerUp pointerup mouseout MSPointerOut pointerout touchend",j,h);l.data({bindEvent_buttonsContinuous_x:false});if(!l.data("bindEvent_buttonsPixels_x")){w.bind("click",function(x){x.preventDefault();r(Math.abs(q.position().left)+l.data("scrollButtons_scrollAmount"))});D.bind("click",function(x){x.preventDefault();r(Math.abs(q.position().left)-l.data("scrollButtons_scrollAmount"))});l.data({bindEvent_buttonsPixels_x:true})}}else{f.add(A).unbind("mousedown touchstart MSPointerDown pointerdown mouseup MSPointerUp pointerup mouseout MSPointerOut pointerout touchend",j,h);l.data({bindEvent_buttonsContinuous_y:false});if(!l.data("bindEvent_buttonsPixels_y")){f.bind("click",function(x){x.preventDefault();r(Math.abs(q.position().top)+l.data("scrollButtons_scrollAmount"))});A.bind("click",function(x){x.preventDefault();r(Math.abs(q.position().top)-l.data("scrollButtons_scrollAmount"))});l.data({bindEvent_buttonsPixels_y:true})}}function r(x){if(!k.data("preventAction")){k.data("preventAction",true);l.mCustomScrollbar("scrollTo",x,{trigger:"internal"})}}}else{if(l.data("horizontalScroll")){w.add(D).unbind("click");l.data({bindEvent_buttonsPixels_x:false});if(!l.data("bindEvent_buttonsContinuous_x")){w.bind("mousedown touchstart MSPointerDown pointerdown",function(y){y.preventDefault();var x=B();l.data({mCSB_buttonScrollRight:setInterval(function(){l.mCustomScrollbar("scrollTo",Math.abs(q.position().left)+x,{trigger:"internal",scrollEasing:"easeOutCirc"})},17)})});var j=function(x){x.preventDefault();clearInterval(l.data("mCSB_buttonScrollRight"))};w.bind("mouseup touchend MSPointerUp pointerup mouseout MSPointerOut pointerout",j);D.bind("mousedown touchstart MSPointerDown pointerdown",function(y){y.preventDefault();var x=B();l.data({mCSB_buttonScrollLeft:setInterval(function(){l.mCustomScrollbar("scrollTo",Math.abs(q.position().left)-x,{trigger:"internal",scrollEasing:"easeOutCirc"})},17)})});var h=function(x){x.preventDefault();clearInterval(l.data("mCSB_buttonScrollLeft"))};D.bind("mouseup touchend MSPointerUp pointerup mouseout MSPointerOut pointerout",h);l.data({bindEvent_buttonsContinuous_x:true})}}else{f.add(A).unbind("click");l.data({bindEvent_buttonsPixels_y:false});if(!l.data("bindEvent_buttonsContinuous_y")){f.bind("mousedown touchstart MSPointerDown pointerdown",function(y){y.preventDefault();var x=B();l.data({mCSB_buttonScrollDown:setInterval(function(){l.mCustomScrollbar("scrollTo",Math.abs(q.position().top)+x,{trigger:"internal",scrollEasing:"easeOutCirc"})},17)})});var u=function(x){x.preventDefault();clearInterval(l.data("mCSB_buttonScrollDown"))};f.bind("mouseup touchend MSPointerUp pointerup mouseout MSPointerOut pointerout",u);A.bind("mousedown touchstart MSPointerDown pointerdown",function(y){y.preventDefault();var x=B();l.data({mCSB_buttonScrollUp:setInterval(function(){l.mCustomScrollbar("scrollTo",Math.abs(q.position().top)-x,{trigger:"internal",scrollEasing:"easeOutCirc"})},17)})});var g=function(x){x.preventDefault();clearInterval(l.data("mCSB_buttonScrollUp"))};A.bind("mouseup touchend MSPointerUp pointerup mouseout MSPointerOut pointerout",g);l.data({bindEvent_buttonsContinuous_y:true})}}function B(){var x=l.data("scrollButtons_scrollSpeed");if(l.data("scrollButtons_scrollSpeed")==="auto"){x=Math.round((l.data("scrollInertia")+100)/40)}return x}}}if(l.data("autoScrollOnFocus")){if(!l.data("bindEvent_focusin")){i.bind("focusin",function(){i.scrollTop(0).scrollLeft(0);var x=c(document.activeElement);if(x.is("input,textarea,select,button,a[tabindex],area,object")){var J=q.position().top,y=x.position().top,I=i.height()-x.outerHeight();if(l.data("horizontalScroll")){J=q.position().left;y=x.position().left;I=i.width()-x.outerWidth()}if(J+y<0||J+y>I){l.mCustomScrollbar("scrollTo",y,{trigger:"internal"})}}});l.data({bindEvent_focusin:true})}}if(l.data("autoHideScrollbar")&&!l.data("alwaysShowScrollbar")){if(!l.data("bindEvent_autoHideScrollbar")){i.bind("mouseenter",function(x){i.addClass("mCS-mouse-over");d.showScrollbar.call(i.children(".mCSB_scrollTools"))}).bind("mouseleave touchend",function(x){i.removeClass("mCS-mouse-over");if(x.type==="mouseleave"){d.hideScrollbar.call(i.children(".mCSB_scrollTools"))}});l.data({bindEvent_autoHideScrollbar:true})}}},scrollTo:function(e,f){var i=c(this),o={moveDragger:false,trigger:"external",callbacks:true,scrollInertia:i.data("scrollInertia"),scrollEasing:i.data("scrollEasing")},f=c.extend(o,f),p,g=i.children(".mCustomScrollBox"),k=g.children(".mCSB_container"),r=g.children(".mCSB_scrollTools"),j=r.children(".mCSB_draggerContainer"),h=j.children(".mCSB_dragger"),t=draggerSpeed=f.scrollInertia,q,s,m,l;if(!k.hasClass("mCS_no_scrollbar")){i.data({mCS_trigger:f.trigger});if(i.data("mCS_Init")){f.callbacks=false}if(e||e===0){if(typeof(e)==="number"){if(f.moveDragger){p=e;if(i.data("horizontalScroll")){e=h.position().left*i.data("scrollAmount")}else{e=h.position().top*i.data("scrollAmount")}draggerSpeed=0}else{p=e/i.data("scrollAmount")}}else{if(typeof(e)==="string"){var v;if(e==="top"){v=0}else{if(e==="bottom"&&!i.data("horizontalScroll")){v=k.outerHeight()-g.height()}else{if(e==="left"){v=0}else{if(e==="right"&&i.data("horizontalScroll")){v=k.outerWidth()-g.width()}else{if(e==="first"){v=i.find(".mCSB_container").find(":first")}else{if(e==="last"){v=i.find(".mCSB_container").find(":last")}else{v=i.find(e)}}}}}}if(v.length===1){if(i.data("horizontalScroll")){e=v.position().left}else{e=v.position().top}p=e/i.data("scrollAmount")}else{p=e=v}}}if(i.data("horizontalScroll")){if(i.data("onTotalScrollBack_Offset")){s=-i.data("onTotalScrollBack_Offset")}if(i.data("onTotalScroll_Offset")){l=g.width()-k.outerWidth()+i.data("onTotalScroll_Offset")}if(p<0){p=e=0;clearInterval(i.data("mCSB_buttonScrollLeft"));if(!s){q=true}}else{if(p>=j.width()-h.width()){p=j.width()-h.width();e=g.width()-k.outerWidth();clearInterval(i.data("mCSB_buttonScrollRight"));if(!l){m=true}}else{e=-e}}var n=i.data("snapAmount");if(n){e=Math.round(e/n)*n-i.data("snapOffset")}d.mTweenAxis.call(this,h[0],"left",Math.round(p),draggerSpeed,f.scrollEasing);d.mTweenAxis.call(this,k[0],"left",Math.round(e),t,f.scrollEasing,{onStart:function(){if(f.callbacks&&!i.data("mCS_tweenRunning")){u("onScrollStart")}if(i.data("autoHideScrollbar")&&!i.data("alwaysShowScrollbar")){d.showScrollbar.call(r)}},onUpdate:function(){if(f.callbacks){u("whileScrolling")}},onComplete:function(){if(f.callbacks){u("onScroll");if(q||(s&&k.position().left>=s)){u("onTotalScrollBack")}if(m||(l&&k.position().left<=l)){u("onTotalScroll")}}h.data("preventAction",false);i.data("mCS_tweenRunning",false);if(i.data("autoHideScrollbar")&&!i.data("alwaysShowScrollbar")){if(!g.hasClass("mCS-mouse-over")){d.hideScrollbar.call(r)}}}})}else{if(i.data("onTotalScrollBack_Offset")){s=-i.data("onTotalScrollBack_Offset")}if(i.data("onTotalScroll_Offset")){l=g.height()-k.outerHeight()+i.data("onTotalScroll_Offset")}if(p<0){p=e=0;clearInterval(i.data("mCSB_buttonScrollUp"));if(!s){q=true}}else{if(p>=j.height()-h.height()){p=j.height()-h.height();e=g.height()-k.outerHeight();clearInterval(i.data("mCSB_buttonScrollDown"));if(!l){m=true}}else{e=-e}}var n=i.data("snapAmount");if(n){e=Math.round(e/n)*n-i.data("snapOffset")}d.mTweenAxis.call(this,h[0],"top",Math.round(p),draggerSpeed,f.scrollEasing);d.mTweenAxis.call(this,k[0],"top",Math.round(e),t,f.scrollEasing,{onStart:function(){if(f.callbacks&&!i.data("mCS_tweenRunning")){u("onScrollStart")}if(i.data("autoHideScrollbar")&&!i.data("alwaysShowScrollbar")){d.showScrollbar.call(r)}},onUpdate:function(){if(f.callbacks){u("whileScrolling")}},onComplete:function(){if(f.callbacks){u("onScroll");if(q||(s&&k.position().top>=s)){u("onTotalScrollBack")}if(m||(l&&k.position().top<=l)){u("onTotalScroll")}}h.data("preventAction",false);i.data("mCS_tweenRunning",false);if(i.data("autoHideScrollbar")&&!i.data("alwaysShowScrollbar")){if(!g.hasClass("mCS-mouse-over")){d.hideScrollbar.call(r)}}}})}if(i.data("mCS_Init")){i.data({mCS_Init:false})}}}function u(w){if(i.data("mCustomScrollbarIndex")){this.mcs={top:k.position().top,left:k.position().left,draggerTop:h.position().top,draggerLeft:h.position().left,topPct:Math.round((100*Math.abs(k.position().top))/Math.abs(k.outerHeight()-g.height())),leftPct:Math.round((100*Math.abs(k.position().left))/Math.abs(k.outerWidth()-g.width()))};switch(w){case"onScrollStart":i.data("mCS_tweenRunning",true).data("onScrollStart_Callback").call(i,this.mcs);break;case"whileScrolling":i.data("whileScrolling_Callback").call(i,this.mcs);break;case"onScroll":i.data("onScroll_Callback").call(i,this.mcs);break;case"onTotalScrollBack":i.data("onTotalScrollBack_Callback").call(i,this.mcs);break;case"onTotalScroll":i.data("onTotalScroll_Callback").call(i,this.mcs);break}}}},stop:function(){var g=c(this),e=g.children().children(".mCSB_container"),f=g.children().children().children().children(".mCSB_dragger");d.mTweenAxisStop.call(this,e[0]);d.mTweenAxisStop.call(this,f[0])},disable:function(e){var j=c(this),f=j.children(".mCustomScrollBox"),h=f.children(".mCSB_container"),g=f.children(".mCSB_scrollTools"),i=g.children().children(".mCSB_dragger");f.unbind("mousewheel focusin mouseenter mouseleave touchend");h.unbind("touchstart touchmove");if(e){if(j.data("horizontalScroll")){i.add(h).css("left",0)}else{i.add(h).css("top",0)}}g.css("display","none");h.addClass("mCS_no_scrollbar");j.data({bindEvent_mousewheel:false,bindEvent_focusin:false,bindEvent_content_touch:false,bindEvent_autoHideScrollbar:false}).addClass("mCS_disabled")},destroy:function(){var e=c(this);e.removeClass("mCustomScrollbar _mCS_"+e.data("mCustomScrollbarIndex")).addClass("mCS_destroyed").children().children(".mCSB_container").unwrap().children().unwrap().siblings(".mCSB_scrollTools").remove();c(document).unbind("mousemove."+e.data("mCustomScrollbarIndex")+" mouseup."+e.data("mCustomScrollbarIndex")+" MSPointerMove."+e.data("mCustomScrollbarIndex")+" MSPointerUp."+e.data("mCustomScrollbarIndex"));c(window).unbind("resize."+e.data("mCustomScrollbarIndex"))}},d={showScrollbar:function(){this.stop().animate({opacity:1},"fast")},hideScrollbar:function(){this.stop().animate({opacity:0},"fast")},mTweenAxis:function(g,i,h,f,o,y){var y=y||{},v=y.onStart||function(){},p=y.onUpdate||function(){},w=y.onComplete||function(){};var n=t(),l,j=0,r=g.offsetTop,s=g.style;if(i==="left"){r=g.offsetLeft}var m=h-r;q();e();function t(){if(window.performance&&window.performance.now){return window.performance.now()}else{if(window.performance&&window.performance.webkitNow){return window.performance.webkitNow()}else{if(Date.now){return Date.now()}else{return new Date().getTime()}}}}function x(){if(!j){v.call()}j=t()-n;u();if(j>=g._time){g._time=(j>g._time)?j+l-(j-g._time):j+l-1;if(g._time<j+1){g._time=j+1}}if(g._time<f){g._id=_request(x)}else{w.call()}}function u(){if(f>0){g.currVal=k(g._time,r,m,f,o);s[i]=Math.round(g.currVal)+"px"}else{s[i]=h+"px"}p.call()}function e(){l=1000/60;g._time=j+l;_request=(!window.requestAnimationFrame)?function(z){u();return setTimeout(z,0.01)}:window.requestAnimationFrame;g._id=_request(x)}function q(){if(g._id==null){return}if(!window.requestAnimationFrame){clearTimeout(g._id)}else{window.cancelAnimationFrame(g._id)}g._id=null}function k(B,A,F,E,C){switch(C){case"linear":return F*B/E+A;break;case"easeOutQuad":B/=E;return -F*B*(B-2)+A;break;case"easeInOutQuad":B/=E/2;if(B<1){return F/2*B*B+A}B--;return -F/2*(B*(B-2)-1)+A;break;case"easeOutCubic":B/=E;B--;return F*(B*B*B+1)+A;break;case"easeOutQuart":B/=E;B--;return -F*(B*B*B*B-1)+A;break;case"easeOutQuint":B/=E;B--;return F*(B*B*B*B*B+1)+A;break;case"easeOutCirc":B/=E;B--;return F*Math.sqrt(1-B*B)+A;break;case"easeOutSine":return F*Math.sin(B/E*(Math.PI/2))+A;break;case"easeOutExpo":return F*(-Math.pow(2,-10*B/E)+1)+A;break;case"mcsEaseOut":var D=(B/=E)*B,z=D*B;return A+F*(0.499999999999997*z*D+-2.5*D*D+5.5*z+-6.5*D+4*B);break;case"draggerRailEase":B/=E/2;if(B<1){return F/2*B*B*B+A}B-=2;return F/2*(B*B*B+2)+A;break}}},mTweenAxisStop:function(e){if(e._id==null){return}if(!window.requestAnimationFrame){clearTimeout(e._id)}else{window.cancelAnimationFrame(e._id)}e._id=null},rafPolyfill:function(){var f=["ms","moz","webkit","o"],e=f.length;while(--e>-1&&!window.requestAnimationFrame){window.requestAnimationFrame=window[f[e]+"RequestAnimationFrame"];window.cancelAnimationFrame=window[f[e]+"CancelAnimationFrame"]||window[f[e]+"CancelRequestAnimationFrame"]}}};d.rafPolyfill.call();c.support.touch=!!("ontouchstart" in window);c.support.pointer=window.navigator.pointerEnabled;c.support.msPointer=window.navigator.msPointerEnabled;var a=("https:"==document.location.protocol)?"https:":"http:";c.event.special.mousewheel||document.write('<script src="'+a+'//cdnjs.cloudflare.com/ajax/libs/jquery-mousewheel/3.0.6/jquery.mousewheel.min.js"><\/script>');c.fn.mCustomScrollbar=function(e){if(b[e]){return b[e].apply(this,Array.prototype.slice.call(arguments,1))}else{if(typeof e==="object"||!e){return b.init.apply(this,arguments)}else{c.error("Method "+e+" does not exist")}}}})(jQuery);

	
		
		    var videos_section_slider = (function() {
            var _slideShowElementSelector = '[data-plugin="videos_section_slider"]';
        
            function rightEndReached($slider, $outerWidthEl, totalInnerWidth) {
                if ((Math.abs(parseFloat($slider.css("margin-left"))) + $outerWidthEl.outerWidth(true)) < totalInnerWidth) {
                    return false;
                }
                return true;
            }
        
            function leftEndReached($slider) {
                if (Math.abs(parseInt($slider.css("margin-left"))) === 0) {
                    return true;
                }
                return false;
            }
            
            function getPartialSlideWidth($slider, $outerWidthEl, totalInnerWidth, imageWidth){
                var remainingSlidesWidth = totalInnerWidth - (Math.abs(parseFloat($slider.css("margin-left"))) + $outerWidthEl.outerWidth(true));
                
                return remainingSlidesWidth < imageWidth ? remainingSlidesWidth : 0;
            }
            
            function loadNextData($slider, url, success, failure){
                $.ajax({
                    "url": url,
                    "success": function(response){
                        var $html = $('<div>');
                            
                        $html.html(response);
                        
                        $slider.append($html.find('li'));
                        if(typeof success == 'function'){
                            success();
                        }
                    },
                    "error": function(){
                        if(typeof failure == 'function'){
                            failure();
                        }
                    }
                });
            }
        
            return {
                init: function($slideShowEl, nextButton, prevButton) {
                        var currentSlide = 0,
                            sliding = false,
                            //$slideShowEl = $(this),
                            $prevButton = prevButton ? prevButton: $('<span class="common-btn btn prev disabled"><i></i></span>'),
                            $nextButton = nextButton ? nextButton : $('<span class="common-btn btn next disabled"><i></i></span>'),
                            $slider = $slideShowEl.find("ul").first(),
                            $slides = $slider.children("li"),
                            $outerWidthEl = $slider.closest('.slideshowbox'),
                            totalImages = $slides.length,
                            imageWidth = $slides.eq(0).outerWidth(true) * Math.floor(($slideShowEl.outerWidth(true) / $slides.eq(0).outerWidth(true))),
                            totalInnerWidth = 0,
                            updatedTotalInnerWidth = 0,
                            partialSlidedValue = 0,
                            slideShowActive = false,
                            nextDataLoaded = false,
                            nextDataLoading = false;
                            
                            
                            
                        function handleResize(e, source){
                            $slides = $slider.children("li");
                            //$slider.width('');
                            if(source === 'charts'){
                                return;
                            }
                            //console.log("resize :: sliding :: " + sliding);
                            if(sliding){
                                return;
                            }
                            totalInnerWidth = 0;
                            $slides.each(function() {
                                totalInnerWidth += $(this).outerWidth(true);
                                //rounding to 1 decimal place
                                totalInnerWidth = (totalInnerWidth * 10) / 10;
                            });
                            //console.log("resize :: slideShowActive :: " + slideShowActive);
                            if(slideShowActive){
                                sliding = true;
                                $prevButton.addClass("disabled");
                                $slider.animate({
                                    "margin-left": "0px"
                                }, 500, function() {
                                    totalInnerWidth = 0;
                                    $slides.each(function() {
                                        totalInnerWidth += $(this).outerWidth(true);
                                        //rounding to 1 decimal place
                                        totalInnerWidth = (totalInnerWidth * 10) / 10;
                                    });
                                    if (totalInnerWidth > $slider.outerWidth(true)) {
                                        if( !prevButton ){
                                            $slideShowEl.append($prevButton);
                                            prevButton = $prevButton;
                                        }
                                        if( !nextButton ){
                                            $slideShowEl.append($nextButton);
                                            nextButton = $nextButton;
                                        }
                                        slideShowActive = true;
                                    }
                                    sliding = false;
                                    currentSlide = 0;
                                    partialSlidedValue = 0;
                                    if ($slider.outerWidth(true) >= totalInnerWidth) {
                                        //console.log("resize :: after :: slideShowActive :: " + false);
                                        $nextButton.addClass('disabled');
                                        $prevButton.addClass('disabled');
                                        slideShowActive = false;
                                    } else {
                                        slideShowActive = true;
                                        //$slider.width(totalInnerWidth);
                                        $nextButton.removeClass('disabled');
                                        $prevButton.addClass('disabled');
                                    }
                                });
                            }
                            else{
                                if ($slider.outerWidth(true) >= totalInnerWidth) {
                                    //console.log("resize :: else :: after :: slideShowActive :: " + false);
                                    $nextButton.addClass('disabled');
                                    slideShowActive = false;
                                } else {
                                    slideShowActive = true;
                                    //$slider.width(totalInnerWidth);
                                    $nextButton.removeClass('disabled');
                                }
                            }
                            if( $slideShowEl.outerWidth(true) > 0 
                                && $slides.eq(0).outerWidth(true) > 0
                            ){
                                imageWidth = $slides.eq(0).outerWidth(true) * Math.floor(($slideShowEl.outerWidth(true) / $slides.eq(0).outerWidth(true)));
                            }
                            
                        }
                        
                        //slideshow was initialized already , if  totalinnnerwidth is changed, handle like resize, else do nothing  
                        if($slideShowEl.find('.npbtn.next').length){
                            updatedTotalInnerWidth = 0;
                            $slides.each(function() {
                                updatedTotalInnerWidth += $(this).outerWidth(true);
                            });
                            //rounding to 1 decimal place
                            updatedTotalInnerWidth = (updatedTotalInnerWidth * 10) / 10;
                            if(updatedTotalInnerWidth === totalInnerWidth){
                                return;
                            }
                            else{
                                handleResize();
                                return;
                            }
                        }
                        
                        
                    
                        
                        //on load checks and settings
                        totalInnerWidth = 0;
                        $slides.each(function() {
                            totalInnerWidth += $(this).outerWidth(true);
                            //rounding to 1 decimal place
                            totalInnerWidth = (totalInnerWidth * 10) / 10;
                        });
                        //console.log("slide width on load :: "+ $slider.outerWidth(true));
                        //console.log("totalInnerWidth on load :: "+ totalInnerWidth);
                        if (totalInnerWidth > $slider.outerWidth(true)) {
                            if( !prevButton ){
                                $slideShowEl.append($prevButton);
                            }
                            if( !nextButton ){
                                $slideShowEl.append($nextButton);
                            }
                            slideShowActive = true;
                            $nextButton.removeClass('disabled');
                        }
                        
                        //$(window).on('resize', handleResize);
                        window.resizeSlider = window.resizeSlider || [];
                        window.resizeSlider.push(handleResize);
                        require(["tiljs/event"], function(eventBus){
                            eventBus.subscribe("window.resize", handleResize);
                        })
        
                        $nextButton.on('click', function() {
                            var partialSlideWidth = getPartialSlideWidth($slider, $outerWidthEl, totalInnerWidth, imageWidth),
                                slideWidth = imageWidth;
                            //console.log("next :: sliding :: " + sliding + " :: rightEndReached ::  " + rightEndReached($slider, $outerWidthEl, totalInnerWidth));
                            if (nextDataLoading || sliding || rightEndReached($slider, $outerWidthEl, totalInnerWidth)) {
                                return;
                            }
        
                            if ($prevButton.hasClass("disabled")) {
                                $prevButton.removeClass("disabled");
                            }
                            //console.log("next :: partialSlideWidth :: " + partialSlideWidth);
                            if(partialSlideWidth > 0){
                                slideWidth = partialSlideWidth;
                                partialSlidedValue = partialSlideWidth;
                            }
                            //console.log("next :: slideWidth :: " + slideWidth);
                            //load next data, if required
                            if(!nextDataLoaded && $slideShowEl.data('next-url')){
                                nextDataLoading = true;
                                $nextButton.addClass('loader');
                                loadNextData($slider, $slideShowEl.data('next-url'), function(){
                                    totalInnerWidth = 0;
                                    $slides = $slider.children('li');
                                    $slides.each(function() {
                                        totalInnerWidth += $(this).outerWidth(true);
                                    });
                                    //rounding to 1 decimal place
                                    totalInnerWidth = (totalInnerWidth * 10) / 10;
                                    nextDataLoaded = true;
                                    nextDataLoading = false;
                                    $nextButton.removeClass('loader disabled');
                                    require( ['tiljs/plugin/lazy', 'toicommonjs/rodate'], function(lazy, rodate){
                                        lazy.load();
                                        rodate.uptime();
                                        //WatchLaterManger is initialized on window load
                                        if(TimesApps.WatchLaterManager.getInitStatus()){
                                            TimesApps.WatchLaterManager.updateStatus($slideShowEl);
                                        }
                                        else{
                                            $(window).load(function(){
                                        	    TimesApps.WatchLaterManager.updateStatus($slideShowEl);
                                            });
                                        }
                                    });
                                    
                                }, function(){
                                    nextDataLoading = false;
                                });
                            }
                            
                            sliding = true;
                            var extraMargin = $slider.data('slider-margin') || 0;
                            $slider.animate({
                                "margin-left": parseFloat($slider.css("margin-left")) - (slideWidth + extraMargin) + "px"
                            }, 500).promise().then(function() {
                                sliding = false;
                                currentSlide += 1;
                                //console.log("next :: after :: rightEndReached :: " + rightEndReached($slider, $outerWidthEl, totalInnerWidth));
                                if (rightEndReached($slider, $outerWidthEl, totalInnerWidth)) {
                                    $nextButton.addClass("disabled");
                                }
                            });;
                        });
        
                        $prevButton.on('click', function() {
                            var slideWidth = imageWidth,
                                finalMargin;
                            //console.log("prev :: sliding :: " + sliding + " :: leftEndReached ::  " + leftEndReached($slider));
                            if (nextDataLoading || sliding || leftEndReached($slider)) {
                                //console.log('prev returned');
                                return;
                            }
                            //console.log('prev continued');
                            if ($nextButton.hasClass("disabled")) {
                                $nextButton.removeClass("disabled");
                            }
                            
                            sliding = true;
                            //console.log("prev :: partialSlidedValue :: " + partialSlidedValue);
                            if(partialSlidedValue > 0){
                                slideWidth = partialSlidedValue;
                            }
                            //console.log("prev :: slideWidth :: " + slideWidth);
                            finalMargin = parseFloat($slider.css("margin-left")) + (slideWidth);
                            
                            // finalMargin > 0 -- do not go further than the left limit
                            // Math.abs(finalMargin) < 1 -- set as 0 for 0.x values
                            if(finalMargin > 0 || Math.abs(finalMargin) < 1){
                                finalMargin = 0;
                            }
                            var extraMargin = $slider.data('slider-margin') || 0;
                            $slider.animate({
                                "margin-left": (finalMargin + extraMargin) + "px"
                            }, 500).promise().then(function(){
                                sliding = false;
                                currentSlide -= 1;
                                if(partialSlidedValue > 0){
                                    partialSlidedValue = 0;
                                }
                                if (leftEndReached($slider)) {
                                    $prevButton.addClass("disabled");
                                }
                            });
                        });
                }
            }
        })();
	    
	    $(function() {
            $('[data-plugin="videos_section_slider"]').each(function() {
                var ipadDisable = $(this).data('showonipad');
                var is_iPad = navigator.userAgent.match(/iPad/i) != null;
                // disable it for ipad if data attribute is there.
                if (!(is_iPad && ipadDisable && ipadDisable == 'no')){
                    videos_section_slider.init($(this));    
                }
            });
        });
		
	

/**
 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
// Experiment Values
// 1: Prime login
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice,
        jsSuffixRegExp = /\.js$/;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name) {
            name = name.split('/');
            lastIndex = name.length - 1;

            // If wanting node ID compatibility, strip .js from end
            // of IDs. Have to do this here, and not in nameToUrl
            // because node allows either .js or non .js to map
            // to same file.
            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
            }

            // Starts with a '.' so need the baseName
            if (name[0].charAt(0) === '.' && baseParts) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that 'directory' and not name of the baseName's
                //module. For instance, baseName of 'one/two/three', maps to
                //'one/two/three.js', but we want the directory, 'one/two' for
                //this normalization.
                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
                name = normalizedBaseParts.concat(name);
            }

            //start trimDots
            for (i = 0; i < name.length; i++) {
                part = name[i];
                if (part === '.') {
                    name.splice(i, 1);
                    i -= 1;
                } else if (part === '..') {
                    // If at the start, or previous value is still ..,
                    // keep them so that when converted to a path it may
                    // still work when converted to a path, even though
                    // as an ID it is less than ideal. In larger point
                    // releases, may be better to just kick out an error.
                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
                        continue;
                    } else if (i > 0) {
                        name.splice(i - 1, 2);
                        i -= 2;
                    }
                }
            }
            //end trimDots

            name = name.join('/');
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            var args = aps.call(arguments, 0);

            //If first arg is not require('string'), and there is only
            //one arg, it is the array form without a callback. Insert
            //a null so that the following concat is correct.
            if (typeof args[0] !== 'string' && args.length === 1) {
                args.push(null);
            }
            return req.apply(undef, args.concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    //Creates a parts array for a relName where first part is plugin ID,
    //second part is resource ID. Assumes relName has already been normalized.
    function makeRelParts(relName) {
        return relName ? splitPrefix(relName) : [];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relParts) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0],
            relResourceName = relParts[1];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relResourceName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relResourceName));
            } else {
                name = normalize(name, relResourceName);
            }
        } else {
            name = normalize(name, relResourceName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i, relParts,
            args = [],
            callbackType = typeof callback,
            usingExports;

        //Use name if no relName
        relName = relName || name;
        relParts = makeRelParts(relName);

        //Call the callback to define the module, if necessary.
        if (callbackType === 'undefined' || callbackType === 'function') {
            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relParts);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback ? callback.apply(defined[name], args) : undefined;

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, makeRelParts(callback)).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (config.deps) {
                req(config.deps, config.callback);
            }
            if (!callback) {
                return;
            }

            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        return req(cfg);
    };

    /**
     * Expose module registry for debugging and tooling
     */
    requirejs._defined = defined;

    define = function (name, deps, callback) {
        if (typeof name !== 'string') {
            throw new Error('See almond README: incorrect module build, no module name');
        }

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

( function () {
	var shim = {};
	var paths = {};
	var deps = [];
	var min = ".min";
	//    var min = "";
	var preload = [
		{
			module: "json",
			variable: "JSON",
			js: "//cdnjs.cloudflare.com/ajax/libs/json2/20121008/json2" + min
		}
		,
		{
			module: "jquery",
			variable: "jQuery",
			js: [ "//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery" + min
				, "//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.2/jquery" + min ]
		}
	];
	for( var i = 0; i < preload.length; i++ ) {
		var pre = preload[ i ];
		if( !window[ pre.variable ] ) {
			paths[ pre.module ] = pre.js;
			shim[ pre.module ] = {
				"exports": pre.variable
			};
			deps.push( pre.module );
		} else {
			define( pre.module, ( function ( pre, min ) {
				return function () {
					return window[ pre.variable ]
				};
			}( pre, min ) ) );
		}
	}
	require( {
		deps: deps,
		shim: shim,
		paths: paths
	} );
}() );
define( 'config',[], function () {return {};});
require.config({
    shim: {
        //        "jquery": {"exports":"jQuery"},
        //        "json": {"exports":"JSON"} ,
        // "jsrender": {
        //     "exports": "jQuery.fn.render",
        //     deps: ['jquery']
        // }
    },
    paths: {
        //        times: 'apps/times',  //used so that app module name looks nice
        //        toi: 'apps/toi',  //used so that app module name looks nice
        //        jquery: [
        //                     "//timesofindia.indiatimes.com/jquery_toi.cms?minify=1",
        //                     "//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js",
        //                     "//cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min"
        //                ],
        //        json: "//cdnjs.cloudflare.com/ajax/libs/json2/20121008/json2",
        // jsrender: "/jsrender.cms?"
    },
    config: {
        "tiljs/page": {
            channel: "TOI",
            siteId: "541cc79a8638cfd34bdc56d1a27c8cd7",
            domain: "indiatimes.com"
        },
        "tiljs/plugin/lazy": {
            skew: 0,
            error_image: $('[data-default-image-msid]').length ? ("/photo/" + $('[data-default-image-msid]').attr('data-default-image-msid') + ".cms") : "/photo/34824568.cms"
        },
        "tiljs/social/facebook": {
            xfbml: true,
            parse: false,
            appid: 898459706886386,
            load_js: false,
            init: false
        },
        "tiljs/social/twitter": {
            parse: false,
            load_js: false,
            init: false
        },
        "tiljs/analytics/mytimes": {
            "appKey": "TOI"
        },
        "tiljs/apps/times/comments": {
            loadCommentFromMytimes: true,
            commentType: "comments_agree"
        },
        "tiljs/apps/times/api": {
            post_comment: {
                url: "/toiignorevp/postro2.cms",
                params: {
                    medium: 'WEB'
                }
            },
            comments: {
                url: "/commentsdata.cms",
                //                    url:"http://192.168.27.159/mytimes/getFeed/Activity",
                type: "json",
                params: {
                    appkey: "TOI",
                    msid: window.msid,
                    sortcriteria: "CreationDate",
                    order: "asc",
                    size: 25,
                    lastdeenid: 123,
                    after: true,
                    withReward: true

                }
            },
            comments_oldest: {
                url: "/commentsdata.cms",
                type: "json",
                params: {
                    appkey: "TOI",
                    msid: window.msid,
                    sortcriteria: "CreationDate",
                    order: "desc",
                    size: 25,
                    lastdeenid: 123,
                    after: true,
                    withReward: true
                }
            },
            comments_agree: {
                url: "/commentsdata.cms",
                type: "json",
                params: {
                    appkey: "TOI",
                    msid: window.msid,
                    sortcriteria: "AgreeCount",
                    order: "desc",
                    size: 25,
                    lastdeenid: 123,
                    after: true,
                    withReward: true,
                    medium: 'WEB'
                }
            },
            comments_disagree: {
                url: "/commentsdata.cms",
                type: "json",
                params: {
                    appkey: "TOI",
                    msid: window.msid,
                    sortcriteria: "DisagreeCount",
                    order: "desc",
                    size: 25,
                    lastdeenid: 123,
                    after: true,
                    withReward: true
                }
            },
            comments_discussed: {
                url: "/commentsdata.cms",
                type: "json",
                params: {
                    appkey: "TOI",
                    msid: window.msid,
                    sortcriteria: "discussed",
                    order: "desc",
                    size: 25,
                    lastdeenid: 123,
                    after: true,
                    withReward: true
                }
            }
        }
    }
});
define('jquery',[],function(){
    return jQuery;
});
define('tiljs/compatibility',["jquery"], function ($) {
    var mod_compatibility = {};
    //This function is not available in IE8 so implementing it.
    if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = mod_compatibility.Array_indexOf = function (searchElement, fromIndex) {
            if (this === undefined || this === null) {
                throw new TypeError('"this" is null or not defined');
            }
            var length = this.length >>> 0; // Hack to convert object.length to a UInt32
            fromIndex = +fromIndex || 0;
            if (Math.abs(fromIndex) === Infinity) {
                fromIndex = 0;
            }
            if (fromIndex < 0) {
                fromIndex += length;
                if (fromIndex < 0) {
                    fromIndex = 0;
                }
            }
            for (; fromIndex < length; fromIndex++) {
                if (this[fromIndex] === searchElement) {
                    return fromIndex;
                }
            }
            return -1;
        };
    }
    //This function is not available in IE8 so implementing it.
    if (!String.prototype.trim) {
        String.prototype.trim = function () {
            return this.replace(/^\s+|\s+$/gm, '');
        };
    }
    //Utility function
    if (!String.prototype.splice) {
        String.prototype.splice = function (idx, rem, s) {
            return ( this.slice(0, idx) + s + this.slice(idx + Math.abs(rem)) );
        };
    }
    //Placeholders do not work in old browsers specially IE
    $(function () {
        //start added by Amit
        $('body').on('focus', '[placeholder]', function () {
            var input = $(this);
            if (input.val() === input.attr('placeholder')) {
                input.val('');
                input.removeClass('placeholder');
            }
        });
        $('body').on('blur', '[placeholder]', function () {
            var input = $(this);
            if (input.val() === '' || input.val() === input.attr('placeholder')) {
                input.addClass('placeholder');
                input.val(input.attr('placeholder'));
            }
        });
//		$( '[placeholder]' ).focus();
        $('[placeholder]').blur();
        //        $('[placeholder]').parents('form').submit(function() {
        //            $(this).find('[placeholder]').each(function() {
        //                var input = $(this);
        //                if (input.val() == input.attr('placeholder')) {
        //                    input.val('');
        //                }
        //            })
        //        });
        //todo move to comments
        //        $('body').on('mouseenter','.comment-box', function() {
        //            var obj = $(this).find("[data-plugin='comment-user-follow_wrapper']");
        //            if(!obj.hasClass('dont_show')){
        //                obj.show();
        //            }
        //        });
        //        $('body').on('mouseleave','.comment-box', function() {
        //            var obj = $(this);
        //            obj.find("[data-plugin='comment-user-follow_wrapper']").hide();
        //        });
        //end added by Amit
    });
    return mod_compatibility;
});

define( 'tiljs/cookie',[], function () {
    var mod_cookie = {};
    //    var default_config = {
    //          localstorage : false //use localstorage if available or else cookie
    //    };
    //
    //    var config = $.extend({}, default_config, module.config());

    /**
     * Get value of a cookie
     *
     * @memberOf module:cookie#
     * @function get
     *
     * @param name {String} name of the cookie for which value is required,
     *                        if name is not provided an object with all cookies is returned
     * @returns value {String | Array} value of the requested cookie / Array of all cookies
     *
     * @example
     *
     *  require(['cookie'],function(cookie){
	 *     var abc_cookie = cookie.get("abc");
	 *  });
     */
    mod_cookie.get = function ( name ) {
        var result = name ? undefined : {};
        var cookies = document.cookie ? document.cookie.split( '; ' ) : [];
        for( var i = 0, l = cookies.length; i < l; i++ ) {
            var parts = cookies[ i ].split( '=' );
            var nameK = decodeURIComponent( parts.shift() );
            var cookie = parts.join( '=' );
            cookie = mod_cookie._parseCookieValue( cookie );
            if( name && name === nameK ) {
                result = cookie;
                break;
            }
            if( !name && cookie !== undefined ) {
                result[ nameK ] = cookie;
            }
        }
        return result;
    };

    /**
     * Cookie Set,Get,Delete
     */
    mod_cookie.getAll = function () {
        return mod_cookie.get();
    };
    /**
     * Remove a cookie
     *
     * @memberOf module:cookie#
     * @function remove
     *
     * @param {String} name name of the cookie to be removed
     * @param {String} [path] path of the cookie
     * @param {String} [domain] domain of the cookie
     *
     * @example
     *
     *  require(['cookie'],function(cookie){
	 *     cookie.remove("abc");
	 *  });
     */
    mod_cookie.remove = function ( name, path, domain ) {
        if( name ) {
            domain = ( domain || document.location.host ).split( ":" )[ 0 ];
            path = path || document.location.pathname;
            mod_cookie.set( name, null, -1, path, domain );
        }
    };
    /**
     * Set a cookie
     *
     * @param {String} name name of the cookie to be set
     * @param {String} value value of the cookie to be set
     * @param {Number} days number of days for which the cookie is to be set
     * @param {String} path path of the cookie to be set
     * @param {String} domain domain of the cookie to be set
     * @param {Boolean} secure true if the cookie is to be set on https only
     */
    mod_cookie.set = function ( name, value, days, path, domain, secure ) {
        var expires = '';
        days = ( days !== undefined ) ? days : 30;
        var date = new Date();
        date.setTime( date.getTime() + ( days * 24 * 60 * 60 * 1000 ) );
        expires = '; expires=' + date.toGMTString();
        domain = ( domain || document.location.host ).split( ":" )[ 0 ]; //removing port
        path = path || document.location.pathname;
        //Removing file name, fix for IE11
        if( /\/.*\..*/.test( path ) ) { //if path contains file name
            path = path.split( "/" );
            path.pop();
            path = path.join( "/" );
        }
        document.cookie = name + '=' +
            value + expires +
            ( ( path ) ? ';path=' + path : '' ) +
            ( ( domain && domain !='localhost' ) ? ';domain=' + domain : '' ) +
            ( ( secure ) ? ';secure' : '' );
    };
    mod_cookie._parseCookieValue = function ( s ) {
        if( s.indexOf( '"' ) === 0 ) {
            // This is a quoted cookie as according to RFC2068, unescape...
            s = s.slice( 1, -1 ).replace( /\\"/g, '"' ).replace( /\\\\/g, '\\' );
        }
        try {
            // If we can't decode the cookie, ignore it, it's unusable.
            // Replace server-side written pluses with spaces.
            return decodeURIComponent( s.replace( /\+/g, ' ' ) );
        } catch( e ) {}
    };
    return mod_cookie;
} );
/**
 * 'event' module.
 *
 * @module event
 */
define('tiljs/event',[], function () {
    var mod_event = {},
        pubsub = {},
        onsubscribe_prefix = "__on_",
        generateUid = (function () {
            var id = 0;
            return function () {
                return id++;
            };
        })();
    /**
     * Publish subscribed events
     *
     * @param name Method name for the event to be published
     * @param data data to be passed to the subscribed event
     * @returns null
     */
    mod_event.publish = function (name, data) {
        if (!name) {
            return null;
        }
        if (pubsub[name]) {
            for (var e in pubsub[name]) {
                if (pubsub[name].hasOwnProperty(e)) {
                    var eventCallback = pubsub[name][e];
                    try { //try catch done to keep publisher running in case of error in event callback
                        eventCallback(data);
                    } catch (err) {
                        mod_event.publish("logger.error", err.stack);
                    }
                }
            }
        }
    };
    mod_event.subscribeAll = function (name, eventCallback, options) {
        if (name instanceof Array) {
            var eventIds = [];
            var responses = [];
            for (var i = 0; i < name.length; i++) {
                eventIds.push(mod_event.subscribe(name[i], function (response) {
                    responses.push(response);
                    if (eventIds.length === responses.length) { // todo fix, call even when first event is called twice
                        if (eventCallback) {
                            eventCallback(responses);
                        }
                        responses = [];
                    }
                }, options));
            }
            return eventIds;
        }
        return mod_event.subscribe(name, eventCallback, options);
    };
    /**
     * Subscribe custom events
     *
     * @param name Method name for the event to be subscribed
     * @param eventCallback(data) Function to be called when the event is published with the data
     * @options options
     * @returns eventId unique id generated for every subscription
     */
    mod_event.subscribe = function (name, eventCallback, options) {
        if (name instanceof Array) {
            var eventIds = [];
            for (var i = 0; i < name.length; i++) {
                eventIds.push(mod_event.subscribe(name[i], eventCallback, options));
            }
            return eventIds;
        }
        if (!name || !eventCallback) {
            return null;
        }
        if (!pubsub[name]) {
            pubsub[name] = {};
        }
        var eventId = name + ":" + generateUid();
        pubsub[name][eventId] = eventCallback;
        //TODO find better way
        //Setting callback in options so that it can be used in onsubscribe event.
        if (options) {
            options.__callback = eventCallback;
        }
        //Calling onsubscribe events
        mod_event.publish(onsubscribe_prefix + name, options);
        return eventId;
    };
    /**
     * Unsubscribe an event
     *
     * @param eventId id of the event to be unsubscribed
     * @returns boolean true if event is successfully unsubscribed,else false
     */
    mod_event.unsubscribe = function (eventId) {
        if (!eventId) {
            return null;
        }
        var eventArr = eventId.split(":");
        if (eventArr.length === 2) {
            var eventName = eventArr[0];
            //            var eventNum = eventArr[1];
            if (pubsub[eventName][eventId]) {
                delete pubsub[eventName][eventId];
                return true;
            }
        }
        return false;
    };
    /**
     * Get all the subscribed events in an object
     *
     *
     * @param name Event name for which all events are required
     * @returns Event object for the provided event name
     */
    mod_event.getSubscriptions = function (name) {
        if (!name) {
            return pubsub; //todo return cloned object istead of original
        }
        return pubsub[name];
    };
    /**
     * Used to subscribe to subscribe events, onsubscribe('method1') is called when subscribe('method1') is called
     * This can be used to setup data / setup publish events
     *
     * @param name
     * @param eventCallback
     * @returns {string}
     */
    mod_event.onsubscribe = function (name, eventCallback) {
        if (!name || !eventCallback) {
            return null;
        }
        name = onsubscribe_prefix + name;
        if (!pubsub[name]) {
            pubsub[name] = {};
        }
        var eventId = name + ":" + generateUid();
        pubsub[name][eventId] = eventCallback;
        return eventId;
    };
    return mod_event;
});

/**
 * 'logger' module.
 *
 * @module logger
 * @requires event
 * @requires logger
 */
define('tiljs/logger',["./cookie", "module", "./event", "jquery"], function (cookie, module, event, $) {
    var mod_logger = {}, logCache = [];
    var types = ["log", "debug", "info", "warn", "error"];

    var default_config = {
        cookieName: "d",
        hashString: "#debugdsfgw456g", //change to url param  / use cookie
        prefix: "[times_log] ",
        //linenum: false,
        time: false, //todo to be implemented
        handleWindowError: true,
        handleJqueryError: true,
        logModuleLoad: true,
        log: false //can be overridden by cookie or hash when it is false
    };
    var config = $.extend({}, default_config, module.config()); //todo remove jquery dependency
    /**
     * Returns the stack details for method that calls log
     * @param stack
     * @returns {string}
     * @private
     */
    function getStackDetails(stack) {
        var regex = new RegExp("\/(.*):([0-9]*)\:([0-9]*)", "g");
        //done thrice to get the main calling method and line number
        var res = regex.exec(stack);
        res = regex.exec(stack);
        res = regex.exec(stack);
        if (res) {
            res.shift();
        }
        return res ? res.join(":").replace(config.hashString, "") : null;
    }

    /**
     * times.debug
     *
     * times.log/info/error
     */
    mod_logger = {};
    mod_logger.disable = function () {
        config.log = false;
        cookie.remove(config.cookieName, "/");

        var i, type;
        for (i in types) {
            if (types.hasOwnProperty(i)) {
                type = types[i];

                mod_logger[type] = (function (type) {
                    return function () {
                        logCache.push.apply(logCache, arguments);
                    };
                })(type);
            }
        }

        return "Logging Disabled";
    };
    mod_logger.enable = function () {
        config.log = true;
        cookie.set(config.cookieName, config.hashString, 30, "/");


        var i, type;
        for (i in types) {
            if (types.hasOwnProperty(i)) {
                type = types[i];

                function fun() {
                    console.log.apply(this, arguments);
                }

                mod_logger[type] = (function (type) {
                    var noop = function () {
                    };
                    var log;
                    var context = config.prefix;
                    if (console.log.bind === 'undefined') { // IE < 10
                        log = Function.prototype.bind.call(console[type], console, context);
                    }
                    else {
                        log = console[type].bind(console, context);
                    }

                    //log = console[type].bind(console);
                    //log = fun.bind(console);

                    //log = (window.console === undefined) ? noop
                    //	: (Function.prototype.bind !== undefined) ? Function.prototype.bind.call(console[type], console)
                    //	: function() {Function.prototype.apply.call(console[type], console, arguments);};

                    return log;

                })(type);

                (function (type) {
                    event.subscribe("logger." + type, function (data) {
                        Function.prototype.apply.call(mod_logger[type], console, arguments);
                    });
                }(type));
            }
        }


        return "Logging Enabled";
    };
    mod_logger.isEnabled = function () {
        return config.log || ( window.location.hash.length > 0 && window.location.hash === ( config.hashString ) ) || ( cookie.get(config.cookieName) === config.hashString );
    };
    mod_logger.handleWindowError = function () {
        window.onerror = function (msg, url, linenumber, colno, error) {
            mod_logger.error.apply(this,
                ['Error message: ' + msg +
                '\n\tURL: ' + url + ( linenumber ? ":" + linenumber + ":" + colno : "" ) +
                '\n\tLine Number: ' + linenumber + ":" + colno +
                '\n\tError: ' + error]);
            return true;
        };
    };
    mod_logger.handleJqueryError = function () {
        $(document).ajaxError(function (event, jqxhr, settings, exception) {
            if (exception === "timeout") {
                mod_logger.error.apply(this, [exception + ": " + settings.url]);
            } else {
                mod_logger.error.apply(this, [exception]);
            }
        });
        $(document).error(function (event) {
            mod_logger.error.apply(this, event);
        });
    };
    /**
     window.require.onResourceLoad = function (context, map, depArray) {
            console.log(map.name);
        };

     */
    function init_log() {

        config.log = mod_logger.isEnabled();
        if (config.log) {
            mod_logger.enable();
        } else {
            mod_logger.disable();
        }

        if (config.handleWindowError === true) {
            mod_logger.handleWindowError();
            //Doing it again on window load
            event.subscribe("window.load", function () {
                mod_logger.handleWindowError();
            });
        }
        if (config.handleJqueryError === true) {
            mod_logger.handleJqueryError();
        }
    }

    /**
     * As of date we are saving only logs which are not being cached.
     *
     * //TODO save all logs to cache
     */
    mod_logger.getLogs = function () {
        return logCache.slice(0);//slice to create a new reference
    };
    mod_logger.getLogsStr = function () {
        return mod_logger.getLogs().join("\n");
    };


    init_log();
    return mod_logger;
});
/** 'is' module.
 * @module is
 * @exports is
 */
define('tiljs/is',[], function () {
    var mod_is = {};
    /**
     * Checks if the param is a number.
     *
     * @memberOf module:is#
     * @function number
     * @param ele {object} Any element which is to be checked
     * @returns {boolean}
     * @example
     *
     * require(['is'],function(is){
	 *     is.number(1);        //returns true
	 *     is.number('abc');    //returns false
	 * });
     */
    mod_is.number = function (ele) {
        return typeof ele === "number";
    };
    /**
     * Checks if the param is a string.
     *
     * @memberOf module:is#
     * @function string
     * @param ele {object} Any element which is to be checked
     * @returns {boolean}
     * @example
     *
     * require(['is'],function(is){
	 *     is.number(1);        //returns false
	 *     is.number('abc');    //returns true
	 * });
     */
    mod_is.string = function (ele) {
        return typeof ele === "string";
    };
    mod_is.funct = mod_is.method = function (ele) {
        return typeof ele === "function";
    };
    mod_is.object = function (ele) {
        return ele !== null && typeof ele === "object"; //&& !(ele instanceof Array);
    };
    mod_is.array = Array && Array.isArray ? Array.isArray : function (ele) {
        return ele instanceof Array;
    };
    mod_is.undefined = function (ele) {
        return typeof ele === "undefined";
    };
    mod_is.defined = function (ele) {
        return typeof ele !== "undefined";
    };
    mod_is.exists = function (ele) {
        return mod_is.defined(ele) || ele === "";
    };
    mod_is.empty = function (ele) {
        if (!mod_is.defined(ele)) {
            return true;
        } else if (mod_is.string(ele) || mod_is.array(ele)) {
            return ele.length === 0;
        } else if (mod_is.object(ele)) {
            var i = 0,
                e;
            for (e in ele) {
                if (ele.hasOwnProperty(e)) {
                    i++;
                }
            }
            return i === 0;
        } else if (mod_is.number(ele)) {
            return false;
        } else {
            return true;
        }
    };
    mod_is.alphaOnly = function (str) {
        return /^[A-z\s]+$/.test(str);
    };
    mod_is.numberOnly = function (str) {
        return /^[0-9]+$/.test(str);
    };
    mod_is.mobile = function () {
        return (function (a) {
            return /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
        })(navigator.userAgent || navigator.vendor || window.opera);
    };
    mod_is.tablet = function () {
        return (function (a) {
            return /(?:ipad|tab)/i.test(a);
        })(navigator.userAgent || navigator.vendor || window.opera);
    };
    mod_is.desktop = function () {
        return !mod_is.mobile() && !mod_is.tablet();
    };
    mod_is.touch = function () {
        return (('ontouchstart' in window) || ('DocumentTouch' in window));
    };
    mod_is.IE = function () {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf("MSIE ");
        if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) { // If Internet Explorer, return version number
            return true;
        } else { // If another browser, return 0
            return false;
        }
    };
    mod_is.IE11 = function () {
        return ( !!navigator.userAgent.match(/Trident\/7\./) );
    };
    mod_is.visible = function (ele) {
        return ele && ele.is(":visible");
    };
    mod_is.iframe = function (ele) {
        return ele.tagName === "IFRAME";
    };
    mod_is.dateStr = function (str) {
        try {
            new Date(str);
            return true;
        } catch (e) {
            return false;
        }
    };
    mod_is.email = function (email) {
        var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(email);
    };
    mod_is.url = function (str) {
        var url_pattern = /((([A-Za-z]{3,9}:(?:\/\/)?)(?:[\-;:&=\+\$,\w]+@)?[A-Za-z0-9\.\-]+|(?:www\.|[\-;:&=\+\$,\w]+@)[A-Za-z0-9\.\-]+)((?:\/[\+~%\/\.\w\-]*)?\??(?:[\-\+=&;%@\.\w]*)#?(?:[\.\!\/\\\w]*))?)/g;
        return url_pattern.test(str);
    };
    return mod_is;
});

/**
 * 'string' module.
 *
 * @module string
 */
define('tiljs/string',[], function () {
    var mod_string = {};
    mod_string.camelCase = function (str) {
        return str.replace(/(?:^|\s)\w/g, function (match) {
            return match.toUpperCase();
        }).replace(/(\s|-|_)/g, "");
    };
    mod_string.splice = function (str, idx, rem, s) {
        return ( str.slice(0, idx) + s + str.slice(idx + Math.abs(rem)) );
    };
    mod_string.startsWith = function (haystack, needle) {
        return haystack.indexOf(needle) === 0;
    };
    return mod_string;
});

define('json',[],function(){
    return JSON;
});
/**
 * 'util' module.
 *
 * @module util
 * @requires logger
 * @requires jquery
 * @requires is
 * @requires string
 * @requires json
 */
define('tiljs/util',["./logger", "jquery", "./is", "./string", "json"], function (logger, $, is, string, json) {
    logger.log("util loaded");
    var mod_util = {};
    mod_util.extend = $.extend;
    /*

     function () {
     var arg = [true];
     for(var i=0;arguments[i];i++){
     arg.push(arguments[i]);
     }

     return mod_util.deepextend.apply(this,arg);
     };*/
    mod_util.deepextend = function () {
        //todo remove jquery dependency
        return $.extend.apply(this, arguments);
        //        for (var i = 1; i < arguments.length; i++)
        //            for (var key in arguments[i]){
        //                if (arguments[i].hasOwnProperty(key)){
        //                    if(arguments[i][key] instanceof Array || arguments[i][key] instanceof Object){
        ////                        console.log(arguments[i][key]);
        //                        mod_util.extend(arguments[0][key],arguments[i][key]);
        //                    }else{
        //                        console.log(arguments[i][key]);
        //
        //                        arguments[0][key] = arguments[i][key];
        //                    }
        //                }
        //            }
        //        return arguments[0];
    };
    /**
     * Get values in obj2 which are not there in obj1
     *
     * INPUT
     * obj1 = {a:1,b:2,c:3}
     * obj2 = {a:1,c:3,d:4}
     *
     * OUTPUT
     * obj = {d:4}
     *
     * @param obj1
     * @param obj2
     * @returns {{}}
     */
    mod_util.xor = function (obj1, obj2) {
        var obj = {}, o;
        for (o in obj2) {
            if (!obj1.hasOwnProperty(o)) {
                obj[o] = obj2[o];
            }
        }
        return obj;
    };
    mod_util.convertObj = function (obj, callback) {
        var objResult = {};
        util.each(obj, function (k, v) {
            objResult[k] = callback(k, v);
        });
        return objResult;
    };
    mod_util.each = function (obj, callback) {
        var i, o;
        if (!callback) {
            return null;
        }
        if (obj instanceof Array) {
            for (i = 0; i < obj.length; i++) {
                if (callback(i, obj[i]) === false) {
                    break;
                }
            }
        } else if (obj instanceof Object) {
            for (o in obj) {
                if (obj.hasOwnProperty(o)) {
                    if (callback(o, obj[o]) === false) {
                        break;
                    }
                }
            }
        } else {
            //callback(0, obj);
        }
    };
    mod_util.wrapCallback = function (callback, arga) {
        try {
            if (callback) {
                callback.apply(this, args);
            }
        } catch (e) {
            logger.error(e);
        }
    };
    //    mod_util.update = function (obj) {
    //        config = mod_util.extend(true, config, obj);
    //    };
    mod_util.formatNumber = function (num) {
        if (num >= 1000000000) {
            return ( num / 1000000000 ).toFixed(1) + 'G';
        }
        if (num >= 1000000) {
            return ( num / 1000000 ).toFixed(1) + 'M';
        }
        if (num >= 1000) {
            return ( num / 1000 ).toFixed(1) + 'K';
        }
        return num;
    };
    mod_util.getJsonFromString = function (str, entitySeparator, keyValueSeparator) {
        entitySeparator = entitySeparator || "&";
        keyValueSeparator = keyValueSeparator || "=";
        var json = {};
        var entities = str.split(entitySeparator);
        mod_util.each(entities, function (i, entity) {
            var keyValue = entity.split(keyValueSeparator);
            json[keyValue[0]] = keyValue[1];
        });
        return json;
    };
    mod_util.val = function (val, options) {
        if (is.funct(val)) {
            return val(options);
        }
        return val;
    };
    /**
     * Throttles the number of times a function is called, ignores rest of calls
     * <br/>
     * function called normally        ##############################<br/>
     * function called with throttle   #     #     #     #     #    #<br/>
     * <br/>
     * Assuming one space as one milisecond & delay=5<br/>
     * <br/>
     * Usage : 'scroll'/'move' functions where events are fired on every scroll/move, calling of event can be throttled
     *
     * @function throttle
     * @memberOf module:util#
     * @param delay time after which that method is to be called
     * @param callback method to be called after specified delay
     * @returns {function} throttled instance of function which can be called on throttle
     * @example
     *
     * function run(i){
	 *     console.log("run called : "+i);
	 * }
     *
     * //Normal Call
     * for(var i=0;i<500;i++){
	 *     run(i);  //called 500 times
	 * }
     *
     * //Throttled call
     * require(['util'],function(util){
	 *   var th = util.throttle(5,run);
	 *   for(var i=0;i<500;i++){
	 *     th(i);  //called (500/time taken by function) times
	 *   }
	 * });
     *
     */
    mod_util.throttle = function (delay, callback) {
        var _timeout;
        var _exec = 0;
        return function callable() {
            var elapsed = +new Date() - _exec;
            //                console.log("callable:elapsed:"+_exec);
            var tthis = this;
            var args = arguments;

            function run() {
                _exec = +new Date();
                //                    console.log("run_exec:"+_exec);
                callback.apply(tthis, args);
            }

            _timeout && clearTimeout(_timeout);
            //                console.log("elapsed>run : "+(elapsed+">"+delay));
            if (elapsed > delay) run();
            else _timeout = setTimeout(run, delay - elapsed);
        };
    };
    mod_util.getDate = function (str) {
        try {
            if (is.number(str)) {
                return new Date(str);
            } else {
                str = str.replace(/(\d)(A|P)M/, "$1 $2M"); //Changes "22 Nov 2013, 10:19AM" -> "22 Nov 2013, 10:19 AM"
            }
            return new Date(str);
        } catch (e) {
            logger.error(e);
            return null;
        }
    };
    var __uuidCnt = 0;
    /**
     * Generates uuid.
     * @returns {number} unique id for a system
     */
    mod_util.uuid = function () {
        var d = new Date().getTime();
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = ( d + Math.random() * 16 ) % 16 | 0;
            d = Math.floor(d / 16);
            return ( c == 'x' ? r : ( r & 0x7 | 0x8 ) ).toString(16);
        });
        return uuid;
    };
    /**
     * Make getter setters for heirerchy less object supplied as parameter
     * @param objName
     * @param json
     * @param setter
     */
    //    mod_util.jsonToObj = function(objName,json,setter){
    //        this[objName] = function(attr){
    //            var tthis = this;
    //            mod_util.each(attr,function(k,v){
    //                tthis[k] = v;
    //            });
    //        };
    //        var obj = new this[objName](json);
    ////        if(!is.object(obj)){
    ////            throw new Error("Paramater is not an 'Object'. Cannot apply Getter-Setter");
    ////        }
    //
    //        mod_util.each(json,function(k,v){
    //            var kCamelCase = string.camelCase(k);
    //            if(setter === true){
    //                obj['set'+kCamelCase] = function(kk){return this[k] = kk;};
    //            }
    //            obj['get'+kCamelCase] = function(){return this[k]};
    //        });
    //        return obj;
    //    };
    /**
     * Changes the key for an object using the maping.
     *
     * Eg :
     *    obj = {id:123, name:"Joe"};
     *    mapping = {idd:id}
     *
     *    result = {idd:123}
     *
     *
     * @param mapping
     * @param obj
     * @returns {{}}
     */
    mod_util.mapObj = function (mapping, obj) {
        if (!is.object(mapping) && !is.object(obj)) {
            throw new Error('Invalid Parameters'); //todo give proper message
        }
        var newObj = {};
        mod_util.each(mapping, function (k, v) {
            if (is.funct(v)) {
                newObj[k] = v(obj);
            } else {
                newObj[k] = obj[v];
            }
        });
        return newObj;
    };
    mod_util.getDomainOnly = function (url) {
        //        var separate = window.location.host.split('.');
        //        separate.shift();
        //        return "." + separate.join('.');
        return "." + ( url || document.location.host ).split(":")[0].split(".").reverse().slice(0, 2).reverse().join(".");
    };
    mod_util.format = function (text, data) { //todo move to format.js
        var formattedText = text;
        mod_util.each(data, function (i, v) {
            formattedText = formattedText.replace("{{:" + i + "}}", data[i]); //todo use better way
        });
        //Removing text which could not be formatted, todo log it
        formattedText = formattedText.replace(/{{:[a-zA_Z0-9]+}}/, "");
        return formattedText;
    };
    mod_util.stringify = JSON ? JSON.stringify : null;
    mod_util.checkNoScript = function (url) {
        //        $("noscript")
    };
    mod_util.getClick = function () {
        return is.touch() ? "touchstart" : "click";
    };
    mod_util.getParam = function (key) {
        var sanitizedParams = window.location.search.replace("?", "");
        if (is.defined(key)) {
            return mod_util.deparam(sanitizedParams)[key];
        } else {
            return mod_util.deparam(sanitizedParams);
        }
    };
    mod_util.deparam = function (text) {
        var data = {}; //todo mot handled 'a[]' or 'a[b][c]'
        mod_util.each(text.replace(/\+/g, ' ').split("&"), function (i, pair) {
            var kv = pair.split("=");
            data[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1] || ""); //todo all values are string
        });
        return data
    };
    //todo implement setting and getting each attr
    mod_util.data = function (element) {
        var data = {};
        var attrMap = $(element)[0].attributes;
        $.each(attrMap, function (i, e) {
            var prefix = e.nodeName.substr(0, 5);
            if (prefix === "data-") { //It is a data attribute
                data[e.nodeName.replace(prefix, "")] = e.nodeValue; //TODO nodeValue depricated use node
            }
        });
        return data;
    };
    var ManagedError = function (message) {
        Error.prototype.constructor.apply(this, arguments);
        this.message = message;
    };
    ManagedError.prototype = new Error();
    mod_util.wrapCallback = function (fn) {
        return function () {
            try {
                return fn.apply(this, arguments);
            } catch (e) {
                if (e instanceof ManagedError) {
                    // re-throw immediately
                    throw e;
                }
                logger.error(e);
                // re-throw to halt execution
                throw e;
            }
        };
    };
    /**
     * MD5 (Message-Digest Algorithm) by WebToolkit
     * @param s
     * @returns {string}
     */
    mod_util.md5 = function (s) {
        function L(k, d) {
            return ( k << d ) | ( k >>> ( 32 - d ) )
        }

        function K(G, k) {
            var I, d, F, H, x;
            F = ( G & 2147483648 );
            H = ( k & 2147483648 );
            I = ( G & 1073741824 );
            d = ( k & 1073741824 );
            x = ( G & 1073741823 ) + ( k & 1073741823 );
            if (I & d) {
                return ( x ^ 2147483648 ^ F ^ H )
            }
            if (I | d) {
                if (x & 1073741824) {
                    return ( x ^ 3221225472 ^ F ^ H )
                } else {
                    return ( x ^ 1073741824 ^ F ^ H )
                }
            } else {
                return ( x ^ F ^ H )
            }
        }

        function r(d, F, k) {
            return ( d & F ) | ( ( ~d ) & k )
        }

        function q(d, F, k) {
            return ( d & k ) | ( F & ( ~k ) )
        }

        function p(d, F, k) {
            return ( d ^ F ^ k )
        }

        function n(d, F, k) {
            return ( F ^ ( d | ( ~k ) ) )
        }

        function u(G, F, aa, Z, k, H, I) {
            G = K(G, K(K(r(F, aa, Z), k), I));
            return K(L(G, H), F)
        }

        function f(G, F, aa, Z, k, H, I) {
            G = K(G, K(K(q(F, aa, Z), k), I));
            return K(L(G, H), F)
        }

        function D(G, F, aa, Z, k, H, I) {
            G = K(G, K(K(p(F, aa, Z), k), I));
            return K(L(G, H), F)
        }

        function t(G, F, aa, Z, k, H, I) {
            G = K(G, K(K(n(F, aa, Z), k), I));
            return K(L(G, H), F)
        }

        function e(G) {
            var Z;
            var F = G.length;
            var x = F + 8;
            var k = ( x - ( x % 64 ) ) / 64;
            var I = ( k + 1 ) * 16;
            var aa = Array(I - 1);
            var d = 0;
            var H = 0;
            while (H < F) {
                Z = ( H - ( H % 4 ) ) / 4;
                d = ( H % 4 ) * 8;
                aa[Z] = ( aa[Z] | ( G.charCodeAt(H) << d ) );
                H++
            }
            Z = ( H - ( H % 4 ) ) / 4;
            d = ( H % 4 ) * 8;
            aa[Z] = aa[Z] | ( 128 << d );
            aa[I - 2] = F << 3;
            aa[I - 1] = F >>> 29;
            return aa
        }

        function B(x) {
            var k = "",
                F = "",
                G, d;
            for (d = 0; d <= 3; d++) {
                G = ( x >>> ( d * 8 ) ) & 255;
                F = "0" + G.toString(16);
                k = k + F.substr(F.length - 2, 2)
            }
            return k
        }

        function J(k) {
            k = k.replace(/rn/g, "n");
            var d = "";
            for (var F = 0; F < k.length; F++) {
                var x = k.charCodeAt(F);
                if (x < 128) {
                    d += String.fromCharCode(x)
                } else {
                    if (( x > 127 ) && ( x < 2048 )) {
                        d += String.fromCharCode(( x >> 6 ) | 192);
                        d += String.fromCharCode(( x & 63 ) | 128)
                    } else {
                        d += String.fromCharCode(( x >> 12 ) | 224);
                        d += String.fromCharCode(( ( x >> 6 ) & 63 ) | 128);
                        d += String.fromCharCode(( x & 63 ) | 128)
                    }
                }
            }
            return d
        }

        var C = Array();
        var P, h, E, v, g, Y, X, W, V;
        var S = 7,
            Q = 12,
            N = 17,
            M = 22;
        var A = 5,
            z = 9,
            y = 14,
            w = 20;
        var o = 4,
            m = 11,
            l = 16,
            j = 23;
        var U = 6,
            T = 10,
            R = 15,
            O = 21;
        s = J(s);
        C = e(s);
        Y = 1732584193;
        X = 4023233417;
        W = 2562383102;
        V = 271733878;
        for (P = 0; P < C.length; P += 16) {
            h = Y;
            E = X;
            v = W;
            g = V;
            Y = u(Y, X, W, V, C[P + 0], S, 3614090360);
            V = u(V, Y, X, W, C[P + 1], Q, 3905402710);
            W = u(W, V, Y, X, C[P + 2], N, 606105819);
            X = u(X, W, V, Y, C[P + 3], M, 3250441966);
            Y = u(Y, X, W, V, C[P + 4], S, 4118548399);
            V = u(V, Y, X, W, C[P + 5], Q, 1200080426);
            W = u(W, V, Y, X, C[P + 6], N, 2821735955);
            X = u(X, W, V, Y, C[P + 7], M, 4249261313);
            Y = u(Y, X, W, V, C[P + 8], S, 1770035416);
            V = u(V, Y, X, W, C[P + 9], Q, 2336552879);
            W = u(W, V, Y, X, C[P + 10], N, 4294925233);
            X = u(X, W, V, Y, C[P + 11], M, 2304563134);
            Y = u(Y, X, W, V, C[P + 12], S, 1804603682);
            V = u(V, Y, X, W, C[P + 13], Q, 4254626195);
            W = u(W, V, Y, X, C[P + 14], N, 2792965006);
            X = u(X, W, V, Y, C[P + 15], M, 1236535329);
            Y = f(Y, X, W, V, C[P + 1], A, 4129170786);
            V = f(V, Y, X, W, C[P + 6], z, 3225465664);
            W = f(W, V, Y, X, C[P + 11], y, 643717713);
            X = f(X, W, V, Y, C[P + 0], w, 3921069994);
            Y = f(Y, X, W, V, C[P + 5], A, 3593408605);
            V = f(V, Y, X, W, C[P + 10], z, 38016083);
            W = f(W, V, Y, X, C[P + 15], y, 3634488961);
            X = f(X, W, V, Y, C[P + 4], w, 3889429448);
            Y = f(Y, X, W, V, C[P + 9], A, 568446438);
            V = f(V, Y, X, W, C[P + 14], z, 3275163606);
            W = f(W, V, Y, X, C[P + 3], y, 4107603335);
            X = f(X, W, V, Y, C[P + 8], w, 1163531501);
            Y = f(Y, X, W, V, C[P + 13], A, 2850285829);
            V = f(V, Y, X, W, C[P + 2], z, 4243563512);
            W = f(W, V, Y, X, C[P + 7], y, 1735328473);
            X = f(X, W, V, Y, C[P + 12], w, 2368359562);
            Y = D(Y, X, W, V, C[P + 5], o, 4294588738);
            V = D(V, Y, X, W, C[P + 8], m, 2272392833);
            W = D(W, V, Y, X, C[P + 11], l, 1839030562);
            X = D(X, W, V, Y, C[P + 14], j, 4259657740);
            Y = D(Y, X, W, V, C[P + 1], o, 2763975236);
            V = D(V, Y, X, W, C[P + 4], m, 1272893353);
            W = D(W, V, Y, X, C[P + 7], l, 4139469664);
            X = D(X, W, V, Y, C[P + 10], j, 3200236656);
            Y = D(Y, X, W, V, C[P + 13], o, 681279174);
            V = D(V, Y, X, W, C[P + 0], m, 3936430074);
            W = D(W, V, Y, X, C[P + 3], l, 3572445317);
            X = D(X, W, V, Y, C[P + 6], j, 76029189);
            Y = D(Y, X, W, V, C[P + 9], o, 3654602809);
            V = D(V, Y, X, W, C[P + 12], m, 3873151461);
            W = D(W, V, Y, X, C[P + 15], l, 530742520);
            X = D(X, W, V, Y, C[P + 2], j, 3299628645);
            Y = t(Y, X, W, V, C[P + 0], U, 4096336452);
            V = t(V, Y, X, W, C[P + 7], T, 1126891415);
            W = t(W, V, Y, X, C[P + 14], R, 2878612391);
            X = t(X, W, V, Y, C[P + 5], O, 4237533241);
            Y = t(Y, X, W, V, C[P + 12], U, 1700485571);
            V = t(V, Y, X, W, C[P + 3], T, 2399980690);
            W = t(W, V, Y, X, C[P + 10], R, 4293915773);
            X = t(X, W, V, Y, C[P + 1], O, 2240044497);
            Y = t(Y, X, W, V, C[P + 8], U, 1873313359);
            V = t(V, Y, X, W, C[P + 15], T, 4264355552);
            W = t(W, V, Y, X, C[P + 6], R, 2734768916);
            X = t(X, W, V, Y, C[P + 13], O, 1309151649);
            Y = t(Y, X, W, V, C[P + 4], U, 4149444226);
            V = t(V, Y, X, W, C[P + 11], T, 3174756917);
            W = t(W, V, Y, X, C[P + 2], R, 718787259);
            X = t(X, W, V, Y, C[P + 9], O, 3951481745);
            Y = K(Y, h);
            X = K(X, E);
            W = K(W, v);
            V = K(V, g)
        }
        var i = B(Y) + B(X) + B(W) + B(V);
        return i.toLowerCase()
    };
    /**
     * Decode '<' to '&lt;'
     * @param decodedText
     * @returns {String}
     */
    mod_util.encodeHTML = function (text) {
        return $("<div/>").text(text).html();
    }
    /**
     * Decode '&lt;' to '<'
     * @param decodedText
     * @returns {String}
     */
    mod_util.decodeHTML = function (text) {
        return $("<div/>").html(text).text();
    }
    /**
     * reload iframe
     * @param: iframe selector
     * @usage: Used to reload iframe by passing
     *         any selector
     * @example: util.reloadIframe("#id");
     *         util.reloadIframe(".class");
     */
    mod_util.reloadIframe = function (iframe) {
        if ($(iframe).length > 0) {
            $(iframe).attr("src", $(iframe).attr("src"));
            return true;
        }
        return false;
    }
    /**
     *trim text
     *@param: cmt:text, charlen: character length
     *@usage: Used to cut the string to desired length
     *@example:util.trimText("text string",5)
     */
    mod_util.trimText = function (cmt, charlen) {
        var trimmedString = cmt.substr(0, charlen);
        if (cmt.length > charlen) {
            trimmedString = cmt.replace(new RegExp("^(.{" + charlen + "}[^\\s]*).*"), "$1");
        }
        return trimmedString;
    }
    
    mod_util.getMonthStringFromNumber = function(monthNumber){
        if( typeof monthNumber == 'undefined' ){
            return;
        }
        var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
        return monthNames[monthNumber] ? monthNames[monthNumber] : '';
    }
    return mod_util;
});

/**
 * 'timer' module.
 *
 * @module timer
 * @requires util
 * @requires is
 */
define('tiljs/timer',["./util", "./is"], function (util, is) {
    var mod_timer = {};
    mod_timer.every = function (time, callback) {
        return setInterval(callback, time);
    };
    mod_timer.after = mod_timer.delay = function (time, callback) {
        return setTimeout(callback, time);
    };
    mod_timer.available = function (varname, callback, time, trytimes) {
        if (trytimes == 0) {
            callback(null);
        }
        if (window[varname]) {
            if (callback) {
                callback(window[varname]);
            }
        } else {
            time = time || 2000;
            setTimeout(function () {
                mod_timer.available(varname, callback, time, --trytimes);
            }, time);
        }
    };
    mod_timer.cancel = function (id) { //todo handle gracefully
        try {
            clearTimeout(id);
        } catch (e) {
        }
        try {
            clearInterval(id);
        } catch (e) {
        }
    };
    mod_timer.elapsedTime = function (ctime, labels_config, last_only) {
        if (!is.number(ctime)) {
            //            if(is.dateStr(ctime)){
            //                return mod_timer.elapsedTime(new Date(ctime).getTime(),labels_config, last_only);
            //            }
            try {
                ctime = parseInt(ctime, 10);
                return mod_timer.elapsedTime(ctime, labels_config, last_only);
            } catch (e) {
                return "";
            }
        }
        var labels_default = {
            year: "year",
            //            month:"month",  //todo implement months
            day: "day",
            hour: "hour",
            minute: "minute",
            second: "second",
            ago: "ago"
        };
        var labels = util.extend(true, {}, labels_default, labels_config);
        var timeparts = [
            {
                name: labels.year,
                div: 31536000000,
                mod: 10000
            },
            //            {name: labels.month, div: 86400000, mod: 365},
            {
                name: labels.day,
                div: 86400000,
                mod: 365
            },
            {
                name: labels.hour,
                div: 3600000,
                mod: 24
            },
            {
                name: labels.minute,
                div: 60000,
                mod: 60
            },
            {
                name: labels.second,
                div: 1000,
                mod: 60
            }
        ];
        var
            i = 0,
            l = timeparts.length,
            calc,
            values = [],
            interval = new Date().getTime() - ctime; //todo use server time
        while (i < l) {
            calc = Math.floor(interval / timeparts[i].div) % timeparts[i].mod;
            if (calc && calc >= 0) {
                values.push(calc + ' ' + timeparts[i].name + ( calc > 1 ? 's' : '' ));
            }
            i += 1;
        }
        if (values.length === 0) {
            values.push('1 ' + labels.second);
        }
        if (last_only === true) {
            return values[0] + ' ' + labels.ago;
        } else {
            return values.join(', ') + ' ' + labels.ago;
        }
    };
    return mod_timer;
});

/**
 * 'ajax' module.
 *
 * @module ajax
 * @requires timer
 * @requires util
 * @requires jquery
 * @requires is
 */
define('tiljs/ajax',["./timer", "./util", "jquery", "./is", "module"], function (timer, util, $, is, module) {
    var default_config = {
            timeout: 60000 // 60 seconds
        },
        config = util.extend(true, {}, default_config, module.config()),
        mod_ajax = {};

    $.ajaxSetup({
        timeout: config.timeout
    });
    /**
     * Checks if the javascript or css is loaded
     *
     * This is to be deprecated, use 'queue' instead.
     *
     * @memberOf module:ajax#
     * @function getAll
     *
     * @param urlArr
     * @param dataArr
     * @param callback
     * @param type
     * @returns {boolean}
     * @example
     *
     *  require(['ajax'],function(ajax){
	 *     ajax.getAll(['a.json','b.json'],[{a_param:'a'},[]],function(a_resp,b_resp){
	 *          console.log(a_resp);
	 *          console.log(b_resp);
	 *     })
	 *  });
     */
    mod_ajax.getAll = function (urlArr, dataArr, callback, type) {
        var tthis = this,
            result = [],
            response = [],
            i, currDataArr;

        function process(data) {
            response.push(data);
            if (response.length === urlArr.length) {
                callback.apply(tthis, response);
            }
        }

        for (i = 0; i < urlArr.length; i++) {
            currDataArr = dataArr && dataArr.length > i ? dataArr[i] : {}; //todo use better method
            result.push($.get(urlArr[i], currDataArr, process, type));
        }
        return result;
    };
    /**
     * Creates a serialized representation of an array or object,
     * suitable for use in a URL query string or Ajax request.
     *
     * @memberOf module:ajax#
     * @function param
     *
     * @param {Array|Object} obj
     * @param {Boolean} [traditional]
     * @returns {String} Serialised array or object
     * @example
     *
     *  require(['ajax'],function(ajax){
	 *
	 *  var myObject = {
	 *    a: {
	 *      one: 1,
	 *      two: 2,
	 *      three: 3
	 *    },
	 *    b: [ 1, 2, 3 ]
	 *  };
	 *  ajax.param(myObject);
	 *  //output : a%5Bone%5D=1&a%5Btwo%5D=2&a%5Bthree%5D=3&b%5B%5D=1&b%5B%5D=2&b%5B%5D=3
	 *  });
     */
    mod_ajax.param = $.param; //todo override
    /**
     * Perform an asynchronous HTTP (Ajax) request<br/>
     * <br/>
     * See {@link http://api.jquery.com/jQuery.ajax/|jQuery.ajax}
     *
     * @memberOf module:ajax#
     * @function ajax
     *
     * @param {String} url A string containing the URL to which the request is sent.
     * @param {Object} [settings] A set of key/value pairs that configure the Ajax request. All settings are optional.
     *                            A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings )
     *                            below for a complete list of all settings.
     * @returns {object}
     * @example
     *
     *  require(['ajax'],function(ajax){
	 *     ajax.ajax('http://www.abc.com/ajax.json')
	 *  });
     */
    /**
     * Perform an asynchronous HTTP (Ajax) request<br/>
     * <br/>
     * See {@link http://api.jquery.com/jQuery.ajax/|jQuery.ajax}
     *
     * @memberOf module:ajax#
     * @function ajax
     *
     * @param {Object} [settings] A set of key/value pairs that configure the Ajax request. All settings are optional.
     *                            A default can be set for any option with $.ajaxSetup(). See jQuery.ajax( settings )
     *                            below for a complete list of all settings.
     * @returns {object}
     * @example
     *
     *  require(['ajax'],function(ajax){
	 *     ajax.ajax({
	 *       url: "http://www.abc.com/data.json",
	 *       beforeSend: function( xhr ) {
	 *         xhr.overrideMimeType( "text/plain; charset=x-user-defined" );
	 *       },
	 *       success:function(data){
	 *          console.log(data);   //data returned by ajax request
	 *       }
	 *     })
	 *  });
     */
    mod_ajax.ajax = $.ajax; //todo override
    /**
     * Load data from the server using a HTTP GET request.<br/>
     * <br/>
     * See {@link http://api.jquery.com/jQuery.get/|jQuery.get}
     *
     * This is a shorthand Ajax function, which is equivalent to:
     *
     * <pre><code>
     ajax.ajax({
              url: url,
              data: data,
              success: success,
              dataType: dataType
            });
     * </code></pre>
     *
     * @memberOf module:ajax#
     * @function get
     *
     * @example
     *
     *  require(['ajax'],function(ajax){
     *     ajax.get("http://www.abc.com/data.json",{},function(data){
     *         console.log(data);   //data returned by ajax request
     *     });
     *  });
     * @param {String|Function} url A string containing the URL to which the request is sent.
     * @param {Object|String} [data] A plain object or string that is sent to the server with the request.
     * @param {Function} [callback] A callback function that is executed if the request succeeds.
     * @param {String} [type] The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).
     * @returns {object}
     */
    mod_ajax.get = function (url, data, callback, type) {
        if (is.funct(url)) {
            return url(data, callback);
        } else {
            return $.get(url, data, callback, type);
        }
    };
    /**
     * Send/Load data to/from the server using a HTTP POST request.<br/>
     * <br/>
     * See {@link http://api.jquery.com/jQuery.get/|jQuery.get}
     *
     * This is a shorthand Ajax function, which is equivalent to:
     *
     * <pre><code>
     ajax.ajax({
              type: "POST",
              url: url,
              data: data,
              success: success,
              dataType: dataType
            });
     * </code></pre>
     *
     * @memberOf module:ajax#
     * @function post
     *
     * @example
     *
     *  require(['ajax'],function(ajax){
     *     ajax.post("http://www.abc.com/data.json",{},function(data){
     *         console.log(data);   //data returned by ajax request
     *     });
     *  });
     * @param {String} url A string containing the URL to which the request is sent.
     * @param {Object|String} [data] A plain object or string that is sent to the server with the request.
     * @param {Function} [callback] A callback function that is executed if the request succeeds.
     * @param {String} [type] The type of data expected from the server. Default: Intelligent Guess (xml, json, script, or html).
     * @returns {object}
     */
    mod_ajax.post = function (url, data, callback, type) {
        return $.post(url, data, callback, type);
    };
    mod_ajax.postCrossDomain = function (url, data) {
        var randomName = "postFrame" + new Date().getTime() + Math.floor(( Math.random() * 1000 )),
            iframe = $("<iframe></iframe>").attr("name", randomName),
            //Create the form in a jQuery object
            form = $("<form action='" + url + "' method='post' target='" + randomName + "'></form>");
        //Get the value from the asp textbox with the ID txtBox1 and POST it as b1
        util.each(data, function (k, v) {
            form.append($("<input type='hidden' name='" + k + "' />").attr('value', v));
        });
        //Add the iframe to the body
        iframe.appendTo('body');
        //Add the form to the body
        form.appendTo('body')
        //Submit the form which posts the variables into the iframe
            .submit()
            //Remove the form from the DOM (so subsequent requests won't keep expanding the DOM)
            .remove();
        timer.after(10000, function () {
            iframe.remove();
        });
        //        return $.post(url,data,callback,type);
    };
    mod_ajax.getJSONP = function (url, data, callback) {
        //        var req = mod_ajax.ajax({
        //            url : url,
        //            data : data,
        //            dataType : "jsonp",
        //            timeout : config.timeout
        //        });
        //
        //        req.success(callback);
        //        req.error(callback);
        return mod_ajax.get(url, data, callback, "jsonp");
    };
    mod_ajax.getJSON = function (url, data, callback) {
        return mod_ajax.get(url, data, callback, "json");
    };
    return mod_ajax;
});

var TimesApps = window.TimesApps || {};
TimesApps.checkGdprAndCall = function(callback, callbackForEu, checkForUserConsent){
    var geoContCookieName = 'geo_continent';
    
    if ( 
        window.TimesGDPR 
        && TimesGDPR.common.consentModule.gdprCallback
    ){
        TimesGDPR.common.consentModule.gdprCallback(function(data){
            if(data && data.isEUuser && typeof callbackForEu == "function" ){
                callbackForEu();
            }else if( !data.isEUuser && typeof callback == "function" ){
                callback();
            }
        });
    }else if( window.self != window.parent ){
        /*
        * current window is a TOI iframe
        * & doesn't has gdpr_js
        * checking cookie for EU
        */
        var continent = ( toiprops && toiprops.cookie && toiprops.cookie.get(geoContCookieName) ) || "";
        var isEUuser = continent.toUpperCase() === "EU";

        if(isEUuser && typeof callbackForEu == "function"){
            callbackForEu();
        }
    }else if(typeof callbackForEu == "function"){
        callbackForEu();
    }
}

TimesApps.isFullScreenAvailable = function(){
    var isFullScreenAvailable = false;
    var elem = $('body')[0];
    try {
        if (document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled) {
            if (elem.requestFullScreen) {
                isFullScreenAvailable = true;
            } else if (elem.webkitRequestFullscreen) {
                isFullScreenAvailable = true;
            } else if (elem.mozRequestFullScreen) {
                isFullScreenAvailable = true;
            } else if (elem.msRequestFullscreen) {
                isFullScreenAvailable = true;
            }
        }
    } catch (e) {}
    
    return isFullScreenAvailable;
}
TimesApps.hideFullScreenMode = function(){
    try {
        if (document.exitFullscreen) {
            document.exitFullscreen();   
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
    } catch (e) {}
}

define('tiljs/user',["./util", "./ajax", "./cookie", "./event", "jquery", "./is", "./logger", "./string"], function (util, ajax, cookie, event, $, is, logger, string) {
    var mod_user = {},
        /*__default_user = {
         uuid: util.uuid(),
         firstName: "",
         lastName: ""
         },*/
        User = function (attr, mapping) {
            var prvt = {},
                tthis = this;
            if (mapping && is.object(mapping)) {
                attr = util.mapObj(mapping, attr);
            }
            util.each(attr, function (k, v) {
                prvt[k] = v;
                var kCamelCase = string.camelCase(k);
                //            if(setter === true){
                //                tthis['set'+kCamelCase] = function(kk){return prvt[k] = kk;};
                //            }
                tthis['get' + kCamelCase] = function () {
                    return prvt[k];
                };
            });
            this.getMappedUser = function () {
                return prvt; //todo return clone.
            };
            this.getOriginalUser = function () {
                return attr; //todo return clone.
            };
            this.toString = this.toJson = function () {
                return util.stringify(prvt, true, "\t");
            };
        };
    mod_user.getNewUser = function (default_user, mapping) {
        if (default_user instanceof User) {
            return default_user;
        } else if (is.object(default_user)) {
            return new User(default_user, mapping);
        } else {
            return null;
        }
    };
    mod_user.isUser = function (obj) {
        return obj instanceof User;
    };
    return mod_user;
});

/**
 * 'page' module.
 * //todo find better name - it is not generic file
 * @module page
 * @requires util
 */
define('tiljs/page',["module", "./util", "jquery"], function (module, util, $) {
    var default_config = {
        msid: window.msid,
        channel: "",
        siteId: "",
        domain: ""
    };
    var config = util.extend(true, {}, default_config, module.config());
    var mod_page = {};
    mod_page.getMsid = function (url) {
        try {
            if (!url || url.length === 0 || url === "#") {
                url = location.href;
                //                return /\/(\d*)\.cms/.exec(url)[1];
                return /(\d*)\.cms/.exec(url)[1];
            } else {
                return config.msid;
            }
        } catch (e) {
            return config.msid;
        }
    }
    mod_page.getSiteId = function () {
        return config.siteId;
    }
    mod_page.getDomain = function () {
        return config.domain;
    }
    mod_page.getChannel = function () {
        return config.channel;
    }
    mod_page.getMeta = function (property) {
        if (property) {
            return $("meta[property='" + property + "']").attr("content");
        } else {
            var meta = {};
            $("meta[property]").each(function (k, v) {
                var metaElement = $(v);
                meta[metaElement.attr("property")] = metaElement.attr("content");
            });
            return meta;
        }
    }
    return mod_page;
});

define('tiljs/analytics/mytimes',["module", "../ajax", "../util"], function (module, ajax, util) {
    var mod_mytimes = {};
    var default_config = {
        url: "https://myt.indiatimes.com/mytimes/",
        //        js_url: "http://mytest.indiatimes.com/mytimes/" //test url
        appKey: ""
    };
    var config = util.extend(true, {}, default_config, module.config());
    mod_mytimes.log = function (url, params) {
        var req = new Image();
        req.src = url + "?" + ajax.param(params);
    };
    mod_mytimes.logActivity = function (args) {
        var _url = config.url + "addActivity";
        var params = util.extend(true, {
            //            appKey: config.appKey,
            //            uniqueAppID: 25416336,
            //            activityType: "Shared",
            //            baseEntityType: "ARTICLE",
            //            objectType: "B",
            //            url: url,
            //            via: "facebook"
        }, args);
        mod_mytimes.log(_url, params);
    };
    mod_mytimes.logCommentActivity = function (args) {
        var params = util.extend(true, {
            appKey: config.appKey,
            parentCommentId: 0,
            activityType: "", //Agreed, Disagreed, Reccomended
            baseEntityType: "ARTICLE",
            objectType: "A",
            url: document.location.href
        }, args);
        mod_mytimes.logActivity(params);
    };
    mod_mytimes.agreeComment = function (msid) {
        var params = {
            parentCommentId: msid,
            activityType: "Agreed"
        };
        mod_mytimes.logCommentActivity(params);
    };
    mod_mytimes.disagreeComment = function (msid) {
        var params = {
            parentCommentId: msid,
            activityType: "Disagreed"
        };
        mod_mytimes.logCommentActivity(params);
    };
    mod_mytimes.recommendComment = function (msid) {
        var params = {
            parentCommentId: msid,
            activityType: "Reccomended"
        };
        mod_mytimes.logCommentActivity(params);
    };
    mod_mytimes.logShareCount = function (entityId, via) {
        var url = config.url + "entityCount";
        var params = {
            appKey: config.appKey,
            via: via,
            entityId: entityId
        };
        mod_mytimes.log(url, params);
    };
    mod_mytimes.getShareCount = function (msids, callback) {
        var url = config.url + "sharedEntity";
        var params = {
            appKey: config.appKey,
            msids: msids
        };
        //        $.getJSON(url,params,callback);
        ajax.ajax({
            type: 'GET',
            url: url,
            jsonpCallback: 'getShareCount' + Math.random() * 1000000000000000000,
            dataType: 'jsonp',
            data: params,
            success: function (res) {
                var result = res && res.length > 0 ? res[0] : null;
                if (result && callback) {
                    if (callback) {
                        callback(result);
                    } else {
                        callback(null);
                    }
                }
            },
            error: callback
        });
    };
    mod_mytimes.getNotifications = function (callback) {
        var url = config.url + "notification";
        var params = {
            appKey: config.appKey,
            openNetworkId: "sso",
            size: 100,
            lastSeenId: 0,
            after: true
        };
        //        $.getJSON(url,params,callback);
        ajax.ajax({
            type: 'GET',
            url: url,
            jsonpCallback: 'getNotifications' + Math.random() * 1000000000000000000,
            dataType: 'jsonp',
            data: params,
            success: callback,
            error: callback
        });
    };
    mod_mytimes.followUser = function (userId, callback) {
        ajax.getJSONP(config.url + "followuser", {
            userId: userId,
            fromMyTimes: true
        }, callback);
    };
    mod_mytimes.unfollowUser = function (userId, callback) {
        ajax.getJSONP(config.url + "unfollowuser", {
            userId: userId,
            fromMyTimes: true
        }, callback);
    };
    mod_mytimes.getFollowers = function (callback) {
        ajax.getJSONP(config.url + "activity/myfriends", {
            openNetworkId: "sso",
            /*appKey: "", */ size: -1,
            lastSeenId: 0,
            after: true,
            type: "follower"
        }, callback);
    };
    mod_mytimes.getFollowee = function (callback) {
        ajax.getJSONP(config.url + "activity/myfriends", {
            openNetworkId: "sso",
            /*appKey: "",*/ size: -1,
            lastSeenId: 0,
            after: true,
            type: "followee"
        }, callback);
    };
    mod_mytimes.followUser = function (userId, callback) {
        ajax.getJSONP(config.url + "followuser", {
            userId: userId,
            fromMyTimes: true,
            medium: 'WEB'
        }, callback);
    };
    mod_mytimes.updateUserCity = function (userCity, callback) {
        ajax.getJSONP(config.url + "/profile/update?city=" + userCity, {
            openNetworkId: "sso",
            /*appKey: "",*/ size: -1,
            lastSeenId: 0,
            after: true
        }, callback);
    };
    
    mod_mytimes.updateGDPRConsent = function (userId, consentObj, callback) {
        if(typeof userId !== 'undefined' && typeof consentObj !== 'undefined'){
            var _gdprcookieconsent = consentObj.toi_gdprcookieconsent;
            var _gdprpersonalizedconsent = consentObj.toi_gdprpersonalizedconsent;
            /*if(typeof _gdprcookieconsent !== 'undefined' && typeof _gdprpersonalizedconsent !== 'undefined'){
                var propertyKeyValuePairsToBePaseed = { 
                    'toi_gdprcookieconsent' : _gdprcookieconsent,
                    'toi_gdprpersonalizedconsent' : _gdprpersonalizedconsent,
                }
                ajax.getJSONP(config.url + "profile/update", {
                    propertyKeyValuePairs: JSON.stringify(propertyKeyValuePairsToBePaseed),
                    uuId: userId,
                }, callback);  
            }
            else if(typeof _gdprpersonalizedconsent !== 'undefined'){
                ajax.getJSONP(config.url + "profile/update", {
                    propertyKeyValuePairs: JSON.stringify({ 'toi_gdprpersonalizedconsent' : _gdprpersonalizedconsent}),
                    uuId: userId,
                }, callback);  
            }*/
            if(Object.keys(consentObj).length > 0){
                ajax.getJSONP(config.url + "profile/update", {
                    propertyKeyValuePairs: JSON.stringify(consentObj),
                    uuId: userId,
                }, callback);      
            }
        }
    };
    return mod_mytimes;
});
define('tiljs/apps/times/api',[
    "module",
    "../../util",
    "../../ajax",
    "../../cookie",
    "../../event",
    "../../string",
    "../../page",
    "../../analytics/mytimes"
], function (module, util, ajax, cookie, event, string, page, mytimes) { //todo remove mytimes dependency
    var mod_api = {};
    var default_config = {
        ticket: {
            url: "https://jsso.indiatimes.com/sso/crossdomain/getTicket"
        },
        usersInfo: {
            //url: "http://myt.indiatimes.com/mytimes/profile/info",
            url: "https://myt.indiatimes.com/mytimes/profile/info/v1/",
            params: {
                ssoid: "" // comma separated ssoids(emailid)
            }
        },
        badges: {
            url: "https://rewards.indiatimes.com/bp/api/urs/mubhtry",
            params: {
                format: "json",
                pcode: page.getChannel(),
                uid: "" // comma separated ssoids(emailid)
            }
        },
        rewards: {
            url: "https://rewards.indiatimes.com/bp/api/urs/ups",
            params: {
                format: "json",
                pcode: page.getChannel(),
                uid: "" // comma separated ssoids(emailid)
            }
        },
        comments: {
            //todo remove
            url: document.location.host == "test.indiatimes.com" || document.location.host == "test.happytrips.com" ? "lib/getComments.php" : "/json/new_cmtofart2_nit_v1.cms",
            type: "json",
            //            url: function(params){return "data/"+params.msid+".comments.json"},
            //            url: function(params){return "/json/test_comments/"+params.msid+".cms"},
            params: {
                msid: "",
                curpg: 1,
                pcode: page.getChannel()
                //                commenttype: "mostrecommended",
                //                sorttype: "bycount",
                //                ordertype: "asc"
                /*
                 &ordertype=asc
                 &commenttype=mostrecommended&sorttype=bycount
                 &commenttype=mostdiscussed
                 &commenttype=agree&sorttype=bycount
                 &commenttype=disagree&sorttype=bycount
                 */
            }
        }
    };
    default_config.comments_newest = default_config.comments;
    default_config.comments_oldest = {
        url: default_config.comments.url,
        type: default_config.comments.type,
        params: {
            msid: "",
            curpg: 1,
            ordertype: "asc",
            pcode: page.getChannel()
        }
    };
    default_config.comments_recommended = {
        url: default_config.comments.url,
        type: default_config.comments.type,
        params: {
            msid: "",
            curpg: 1,
            commenttype: "mostrecommended"
            //            ,sorttype: "bycount"
            ,
            pcode: page.getChannel()
        }
    };
    default_config.comments_discussed = {
        url: default_config.comments.url,
        type: default_config.comments.type,
        params: {
            msid: "",
            curpg: 1,
            commenttype: "mostdiscussed"
            //            ,sorttype: "bycount"
            ,
            pcode: page.getChannel()
        }
    };
    default_config.comments_agree = {
        url: default_config.comments.url,
        type: default_config.comments.type,
        params: {
            msid: "",
            curpg: 1,
            commenttype: "agree"
            //            ,sorttype: "bycount"
            ,
            pcode: page.getChannel()
        }
    };
    default_config.comments_disagree = {
        url: default_config.comments.url,
        type: default_config.comments.type,
        params: {
            msid: "",
            curpg: 1,
            commenttype: "disagree"
            //            ,sorttype: "bycount"
            ,
            pcode: page.getChannel()
        }
    };
    default_config.validate_comment = {
        url: "/toiignorevp/validatecomment.cms",
        type: "html",
        params: {
            //hostid:83,//259:travel
            //rchid:-2128958273,//2147477992:travel
            fromname: null,
            fromaddress: null,
            userid: null,
            location: null,
            imageurl: null,
            loggedstatus: null,
            message: null,
            roaltdetails: null,
            ArticleID: null,
            msid: null,
            parentid: null,
            rootid: null
        }
    };
    default_config.post_comment = {
        url: "/toiignorevp/postro.cms",
        type: "html",
        params: {
            //hostid:83,//259:travel
            //rchid:-2128958273,//2147477992:travel
            fromname: null,
            fromaddress: null,
            userid: null,
            location: null,
            imageurl: null,
            loggedstatus: null,
            message: null,
            roaltdetails: null,
            ArticleID: null,
            msid: null,
            parentid: null,
            rootid: null
        }
    };
    default_config.post_comment_withoutverification = {
        url: "/toiignorevp/postro_nover.cms",
        type: "html",
        params: {
            //hostid:83,//259:travel
            //rchid:-2128958273,//2147477992:travel
            fromname: null,
            fromaddress: null,
            userid: null,
            location: null,
            imageurl: null,
            loggedstatus: null,
            message: null,
            roaltdetails: null,
            ArticleID: null,
            msid: null,
            parentid: null,
            rootid: null
        }
    };

    default_config.post_comment_withverification = {
        url: "/toiignorevp/postroemailverification.cms",
        type: "html",
        params: {
            //hostid:83,//259:travel
            //rchid:-2128958273,//2147477992:travel
            fromname: null,
            fromaddress: null,
            userid: null,
            location: null,
            imageurl: null,
            loggedstatus: null,
            message: null,
            roaltdetails: null,
            ArticleID: null,
            msid: null,
            parentid: null,
            rootid: null
        }
    };
    default_config.rate = {
        //http://timesofindia.indiatimes.com/rate_techreview.cms?msid=44823267&getuserrating=1&criticrating=9&vote=8
        url: "/rate_techreview.cms",
        type: "html",
        params: {
            msid: null,
            getuserrating: null,
            vote: null,
            criticrating: null
        }
    };

    default_config.rate_comment = {
        url: "/ratecomment_new.cms",
        type: "html",
        params: {
            opinionid: null,
            typeid: null,
            rateid: null
        }
    };
    default_config.rate_comment_offensive = {
        url: "/offensive/mark",
        type: "html",
        params: {
            ofusername: null,
            ofreason: "NONE",
            ofcommenteroid: null,
            ofcommenthostid: 83,
            ofcommentchannelid: -2128958273,
            ofcommentid: null,
            ofuserisloggedin: null,
            ofuserssoid: null,
            ofuseremail: null
        }
    };
    var config = util.extend(true, {}, default_config, module.config());
    mod_api.updateConfig = function (new_config) {
        config = util.extend(true, config, new_config);
    };
    mod_api.getConfig = function (new_config) {
        return config;
    };
    mod_api.getTicket = function (_params, callback) {
        return mod_api.api("ticket", _params, callback);
    };
    mod_api.getUsersInfo = function (_params, callback) {
        return mod_api.api("usersInfo", {ssoid: _params.ssoids}, callback);
    };
    mod_api.getBadges = function (_params, callback) {
        return mod_api.api("badges", _params, callback);
    };
    mod_api.getRewards = function (_params, callback) {
        return mod_api.api("rewards", _params, callback);
    };
    mod_api.getComments = mod_api.getComments_newest = function (_params, callback) {
        return mod_api.api("comments", _params, callback);
    };
    mod_api.getComments_oldest = function (_params, callback) {
        return mod_api.api("comments_oldest", _params, callback);
    };
    mod_api.getComments_recommended = function (_params, callback) {
        return mod_api.api("comments_recommended", _params, callback);
    };
    mod_api.getComments_discussed = function (_params, callback) {
        return mod_api.api("comments_discussed", _params, callback);
    };
    mod_api.getComments_agree = function (_params, callback) {
        return mod_api.api("comments_agree", _params, callback);
    };
    mod_api.getComments_disagree = function (_params, callback) {
        return mod_api.api("comments_disagree", _params, callback);
    };
    mod_api.validateComment = function (_params, callback) {
        return mod_api.post("validate_comment", _params, callback);
    };
    mod_api.postComment = function (_params, callback) {
        return mod_api.post("post_comment", _params, callback);
    };
    mod_api.postCommentWithoutVerification = function (_params, callback) {
        return mod_api.post("post_comment_withoutverification", _params, callback);
    };
    mod_api.postCommentWithVerification = function (_params, callback) {
        return mod_api.post("post_comment_withverification", _params, callback);
    };

    /**
     *
     *
     *
     * @param rating msid, user_rating, critic_rating, rating
     * @param callback
     * @param user
     * @returns {*}
     */
    mod_api.rate = function (rating, callback, user) {
        var rating_u = {
            msid: rating.msid,
            getuserrating: rating.user_rating,
            vote: rating.rating,
            criticrating: rating.critic_rating
        };
        return mod_api.api("rate", rating_u, callback);
    };

    mod_api.rateComment = function (rating, callback, user) {
        if (user) { //TODO move all calls to backend
            switch (rating.typeid) {
                case 100: //Agree
                    mytimes.agreeComment(rating.opinionid);
                    break;
                case 101: //Disagree
                    mytimes.disagreeComment(rating.opinionid);
                    break;
                case 102: //Recommend
                    mytimes.recommendComment(rating.opinionid);
                    break;
                case 103: //Offensive
                    mod_api.rateCommentOffensive(rating, user); //todo check if mytimes request is to be sent
                    break;
            }
        }
        //http://mytest.indiatimes.com/mytimes/addActivity?activityType=Agreed&appKey=TOI&parentCommentId=28368882&baseEntityType=ARTICLE&objectType=A&url=
        //http://mytest.indiatimes.com/mytimes/addActivity?activityType=Disagreed&appKey=TOI&parentCommentId=28368547&baseEntityType=ARTICLE&objectType=A&url=
        //http://mytest.indiatimes.com/mytimes/addActivity?activityType=Reccomended&appKey=TOI&parentCommentId=28368541&baseEntityType=ARTICLE&objectType=A&url=
        return mod_api.api("rate_comment", rating, callback);
    };
    mod_api.rateCommentOffensive = function (rating, user, callback) {
        //OLD http://timesofindia.indiatimes.com/offensiveService/offence.asmx/getOffencivecomment?ofusername=Del%20Sanic&ofreason=Others:%20testing&ofcommenteroid=28231992&ofcommenthostid=83&ofcommentchannelid=-2128958273&ofcommentid=30937855&ofuserisloggedin=1&ofuserssoid=delsanic@gmail.com&ofuseremail=delsanic@gmail.com
        //http://timesofindia.indiatimes.com/offensive/mark?ofusername=Del%20Sanic&ofreason=Others:%20testing&ofcommenteroid=28232011&ofcommenthostid=83&ofcommentchannelid=-2128958273&ofcommentid=30937855&ofuserisloggedin=1&ofuserssoid=delsanic@gmail.com&ofuseremail=delsanic@gmail.com
        if (user) {
            var params = {};
            params.ofcommenteroid = rating.opinionid;
            params.ofcommentid = window.msid;
            params.ofuserisloggedin = 1;
            params.ofuserssoid = params.ofuseremail = user.getEmail();
            params.ofusername = user.getFullName();
            //            params = util.extend(true,{}, params, rating) ;
            return mod_api.api("rate_comment_offensive", params, callback);
        } else {
            event.publish("logger.error", "Cannot rate comment offensive, user not available.");
        }
    };
    mod_api.api = function (api, _params, callback) {
        var value = config[api];
        return ajax.get(util.val(value.url, value.params), util.extend(true, {}, value.params, _params), function (data) {
            if (callback) {
                try {
                    callback(data);
                } catch (e) {
                    event.publish("logger.error", e.stack);
                }
            }
        }, value.type || "jsonp").error(function () {
            if (callback) {
                try {
                    callback();
                } catch (e) {
                    event.publish("logger.error", e.stack);
                }
            }
        });
    };
    mod_api.post = function (api, _params, callback) {
        var value = config[api];
        return ajax.post(util.val(value.url, value.params), util.extend(true, {}, value.params, _params), function (data) {
            if (callback) {
                try {
                    callback(data);
                } catch (e) {
                    event.publish("logger.error", e.stack);
                }
            }
        }).error(function (event, xhr, e) {
            event.publish("comment.post.error", e);
        });
    };
    mod_api.get = function (key, params) { //todo change method name
        if (params) {
            var api = config[key];
            var _params = util.extend(true, {}, api.params, params);
            return {
                url: util.val(api.url, _params),
                params: _params
            };
        } else {
            return config[key];
        }
    };
    mod_api.init = function () {
        util.each(config, function (key, value) {
            var funName = string.camelCase("get " + key);
            mod_api[funName] = function (_params, callback) {
                ajax.getJSONP(util.val(value.url, value.params), util.extend(true, {}, value.params, _params), function (data) {
                    if (callback) {
                        callback(data);
                    }
                });
            };
        });
    };
    //    mod_api.init();
    return mod_api;
});

/**
 * 'ui' module.
 *
 * @module ui
 * @requires util
 * @requires logger
 * @requires event
 * @requires jquery
 * @requires is
 */
define('tiljs/ui',["./util", "./logger", "./event", "jquery", "./is", "./timer"], function (util, logger, event, $, is, timer) {
    logger.log("ui loaded");
    var mod_ui = {},
        open_window = {},
        mask, maskConfig;

    mod_ui.window = function (url, options) {
        logger.log("ui.window called");
        var default_options, opt, x, y, params, popup;
        default_options = {
            width: 300,
            height: 300,
            name: "Window",
            mask: true,
            resizable: false,
            disableScroll: false,
            closeCallback: function () {
                logger.log("Empty ui.window callback function.");
            }
        };
        opt = util.extend(true, {}, default_options, options);

        x = window.screen.width / 2 - opt.width / 2;
        y = window.screen.height / 2 - opt.height / 2;

        params = ['width=' + opt.width,
            'height=' + opt.height,
            'left=' + (is.defined(opt.left) ? opt.left : x),
            'top=' + (is.defined(opt.top) ? opt.top : (y - 20)),
            'scrollbars=' + (is.defined(opt.scrollbars) && (opt.scrollbars == 1) ? opt.scrollbars : 0),
            'resizable=' + opt.resizable];

        if (opt.mask === true && is.desktop()) {
            mod_ui.mask(null, {}, false);
        }
        if (opt.disableScroll === true) {
            mod_ui.disableScroll();
        }

        popup = window.open(url, opt.name, params.join(","));
        if (popup) {
            popup.focus();
            logger.log("Popup opened: " + url);
            logger.log(popup);
        }

//        popup.onresize = function(){
//            popup.resizeTo(opt.width,opt.height);
//        };


        try {
            //Exception "Permission Denied" in IE, using try catch so that this functionality works in other browsers.
            popup.reposition = function () {
                var x = window.screen.width / 2 - opt.width / 2,
                    y = (window.screen.height / 2 - opt.height / 2);
                popup.moveTo(x, y);
            };
        } catch (e) {
            logger.warn("Handled Exception in IE10.");
            logger.error(e);
        }

        if (!popup) {
            alert("Popups are blocked. Please enable them.");//TODO find better way
            logger.error("Popups are blocked. Please enable them.");
            mod_ui.unmask();
            return popup;
        }
        //TODO use timer module, prevent recursive dependency
        (function (popup, url, opt) {
            var interval = window.setInterval(function () {   //todo use timer
                try {
                    logger.log("Checking if popup is closed:" + url + ":" + popup.closed);
                    if (popup === null || popup.closed !== false) {
                        mod_ui.window.close(opt.name);
                    }
                }
                catch (e) {
                    logger.warn("Handled exception while closing popup.");
                    logger.error(e.stack);
                    window.clearInterval(interval);
                    interval = null;
                }
            }, 500);

            open_window[opt.name] = {opt: opt, popup: popup, interval: interval, url: url};

        }(popup, url, opt));


        return popup;
    };

    mod_ui.window.close = function (name, all) {
        if (!name) {
            logger.error("Window name is required to close it.");
            return;
        }
        var popup = open_window[name];
        if (all === true) {
            util.each(open_window, function (k) {
                mod_ui.window.close(k);
            });
        } else if (popup) {
            logger.log("Closing popup is closed:" + popup.opt.name + ":" + popup.url);

            if (popup.opt.mask === true) {
                mod_ui.unmask();
            }
            if (popup.opt.disableScroll === true) {
                mod_ui.enableScroll();
            }

            window.clearInterval(popup.interval);
            popup.interval = null;
            popup.popup.close();
            open_window[popup.opt.name] = null;
            popup.opt.closeCallback(popup.popup);
        } else {
            logger.warn("Popup '" + name + "' not found.");
        }
    };

    if (window.closeWindow) {
        logger.warn("window.closeWindow is already defined, open windows may not close properly.");
    } else {
        window.closeWindow = mod_ui.window.close;
    }

    mod_ui.iframe = function (url, options) {
        var default_options = {
                width: 300,
                height: 300,
                name: "Window",
                disablePopup: true,
                closeCallback: function () {
                    logger.log("Empty ui.iframe callback function.");
                }
            },

            opt = util.extend(true, {}, default_options, options),
            iframe = $("<iframe class='loginsignupframe'></iframe>"),//todo fix class dependency
            _iframe, popup;

        iframe.attr("src", url);
        iframe.css({
            width: "100%",
            height: "100%",
            border: "4px solid #cccccc",
            backgroundColor: "#FFF"
        });

        _iframe = iframe[0];

        popup = mod_ui.popup(iframe, opt);


        _iframe.close = function () {
            iframe.remove();
            popup.remove();
            mod_ui.unmask();
        };

        _iframe.resizeTo = function (width, height) {
            if (width && height) {
                popup.width(width);
                popup.height(height);
            }
        };

        _iframe.reposition = popup.reposition;

        return _iframe;
    };

    mod_ui.closeButton = function (clickCallback) {
        var closeButton = $("<span></span>");
        closeButton.on("click", clickCallback);
        return closeButton;
    };

    mod_ui.popup = function (html, options) {
        var default_options, closeButton, mask, opt, popup;
        default_options = {
            width: 300,
            height: 300,
            className :'',
            name: "Window",
            closeCallback: function () {
                logger.log("Empty ui.popup callback function.");
            },
            disableScroll: false
        };

        opt = util.extend(true, {}, default_options, options);
        popup = $("<div></div>");
        popup.width(opt.width);
        popup.height(opt.height);
        popup.css({
//            margin:"0 auto",
//            marginTop:"5%",
            position: "absolute",
            zIndex: maskConfig.zIndex + 1
        });
        popup.append(html);

        if (opt.disableScroll === true) {
            mod_ui.disableScroll();
        }

        if (opt.closeCallback) {
            if (window.closePopup) {
                logger.warn("'window.closePopup' is already defined.");
            }
            if (window.disablePopup) {
                logger.warn("'window.disablePopup' is already defined.");
            }

            window.closePopup = window.disablePopup = function () {
                popup.remove();
                mod_ui.unmask();

                if (opt.disableScroll === true) {
                    mod_ui.enableScroll();
                }

                if (opt.closeCallback) {
                    opt.closeCallback();
                }
                window.closePopup = null;
                window.disablePopup = null;
            };

            closeButton = mod_ui.closeButton(window.closePopup);

            closeButton.addClass("popup_close_button");
            //todo remove css from here
            closeButton.css({
                position: "absolute",
                top: "5px",
                right: "5px",
                cursor: "pointer",
                background: "url('/photo/25494620.cms') no-repeat scroll -160px -20px rgba(0, 0, 0, 0)",
                width: "18px",
                height: "18px"
            });

            popup.append(closeButton);
        }

        $("body").append(popup);
        
        if(opt.className){
            popup.addClass(opt.className);
        }
        mask = mod_ui.mask(popup, {}, false);

        popup.reposition = function () {
            var $w = $(window),
                windowWidth = $w.width(),
                windowHeight = $w.height(),

                calcWidth = ((windowWidth / 2) - (popup.width() / 2)),
                calcHeight = ((windowHeight / 2) - (popup.height() / 2));

            if (calcWidth < 0) {
                calcWidth = 0;
            }
            if (calcHeight < 0) {
                calcHeight = 0;
            }
            popup.css({
                left: calcWidth,
                top: calcHeight + $(window).scrollTop()
            });
        };

        popup.reposition();

        popup.close = function () {
            popup.remove();
            mod_ui.unmask();
        };

        event.subscribe("window.resize", function () {
            popup.reposition();
        });


        return popup;
    };


    mod_ui.img = function (url, attr) {
        var img = $("<img>");
        img.attr("src", url);
        util.each(attr, function (k, v) {
            img.attr(k, v);
        });
        return img;
    };


    mod_ui.anchor = function (url, text, attr) {
        var anchor = $("<a>");
        anchor.attr("href", url);
        anchor.text(text);
        util.each(attr, function (k, v) {
            anchor.attr(k, v);
        });
        return anchor;
    };

    /**
     * Checks if the provided element is in viewport.
     *
     * //todo create event 'inview' with callback which fires when element comes in view
     *
     * @param {selector/instance} elem element to be checked
     * @param {boolean} partial  when true,returns true when element is partially in view.
     * @param {int} skew Pixels to skew/move view from the top
     * @returns {boolean} true if element is in view
     */
    mod_ui.inView = function (elem, partial, skew, checkIfPartialInViewFromTop) {
        skew = skew || 0;

        var $w = $(window), $e = $(elem),
            docViewTop, docViewBottom, elemTop, elemBottom, in_view;

        if ($e.is(":hidden")) { // Element is hidden so its not in the view
            return false;
        }

        docViewTop = $w.scrollTop() - skew; //todo - skew
        docViewBottom = docViewTop + $w.height() + skew;//todo  + skew

        elemTop = $e.offset() ? $e.offset().top : 0;
        elemBottom = elemTop + $e.height();


        in_view = false;

        if (partial === true) {
            if( checkIfPartialInViewFromTop ){
                docViewTop = $w.scrollTop() + skew;
                docViewBottom = $w.scrollTop() + $w.height() - skew;
            }
//            if(in_view){
//                logger.log("P:"+elemBottom +">"+docViewTop+","+elemTop+"<="+docViewBottom);
//            }
            in_view = ((elemBottom > docViewTop ) && (elemTop <= docViewBottom ));
        } else {
            in_view = ((elemBottom <= docViewBottom) && (elemTop >= docViewTop));
//            if(in_view){
//                logger.log(elemBottom +"<="+docViewBottom+","+elemTop+">="+docViewTop);
//            }
        }

        return in_view;
    };


    mod_ui.init = function () {
        var throttleDelay = typeof window.timesThrottleInterval === 'number'? window.timesThrottleInterval: 500;
        var th_scroll = util.throttle(throttleDelay, function (e) {
                event.publish("window.scroll", e);
            }),

            th_load = function (e) {
                event.publish("window.load", e);
            },

            th_resize = util.throttle(500, function (e) {
                event.publish("window.resize", e);
            });

        if (window.addEventListener) {  // W3C DOM
            window.addEventListener("scroll", th_scroll, false);
            window.addEventListener("load", th_load, false);
            window.addEventListener("resize", th_resize, false);
        } else if (window.attachEvent) { // IE DOM
            window.attachEvent("onscroll", th_scroll);
            window.attachEvent("onload", th_load);
            window.attachEvent("onresize", th_resize);
        }

        $(function (e) {
            event.publish("document.ready", e);
        });

    };


    mod_ui.getGravatar = function (email, size) {
        if (!email || email.length === 0) {
            return null;
        }

        size = size || 80;

        return 'http://www.gravatar.com/avatar/' + util.md5(email.trim().toLowerCase()) + '.jpg?s=' + size;
    };

    mod_ui.maxlength = function (input, max, callback, parent, alertMsg) {

        $(parent || "body").off("keyup change", input);
        $(parent || "body").on("keyup change", input, function () {
            var val = $(this).val(),
                len = val.length;
            max = parseInt(max, 10);

            callback.call(this, max - len, len);
            if (len > max) {
                $(this).val(val.substr(0, max));
                if (alertMsg) {
                    window.alert(alertMsg);
                }
                return false;
            }
        });
    };

    mod_ui.getActionReferences = function (currentEle, mainParent) {
        var obj = {current: $(currentEle)};
        obj.parent = mainParent ? obj.current.parents(mainParent) : obj.current;

        obj.parent.find("[data-plugin]").each(function (i, v) {
            obj[$(v).attr("data-plugin")] = $(this);
        });

        return obj;
    };

    mask = null;
    maskConfig = {
        position: "fixed",
        left: 0,
        top: 0,
        width: "100%",
        height: "100%",
        backgroundColor: "#000",
        opacity: 0.5,
        zIndex: 99999
    };

    /**
     *
     * @param config to be provided once on a page.
     * @returns {null}
     * @param divEle Element to be shown above the mask
     * @param closeOnClick (default = false) If true, mask will be closed when clicked
     */
    mod_ui.mask = function (divEle, config, closeOnClick) {
        if (!mask) {
            mask = $("<div></div>");
            mask.popup = divEle;
            mask.css(util.extend(maskConfig, config));
//            mask.css("height", $(document).height());
            if (mask.popup) {
                mask.popup.show();
            }
            if (typeof closeOnClick === 'undefined' || closeOnClick === true) {
                mask.on("click", function () {
                    if (mask.popup) {
                        mask.popup.hide();
                    }
                    mod_ui.unmask();
                });
            }
            $(document).one("keyup", function (e) {     //todo move to common
                if (e.keyCode === 27) {
                    if (mask) {
                        if (mask.popup) {
                            mask.popup.hide();
                        }
                        mod_ui.unmask();
                    }
                }
            });
            $("body").append(mask);
        } else {
            logger.warn("Already masked. Use ui.unmask() before masking again.");
        }
        return mask;
    };

    mod_ui.isMasked = function () {
        return mask ? true : false;
    };

    mod_ui.unmask = function () {
        if (mask) {
            if (mask.popup) {
                mask.popup.hide();
            }
            mask.remove();
            mask = null;
        } else {
            logger.warn("No mask available. Use ui.mask() before unmasking.");
        }
    };

    mod_ui.tooltip = function (message, hideAfter) {
        hideAfter = hideAfter || 5;

        var tooltip = $("<div></div>");
        if (hideAfter > 0) {
            timer.after(function () {
                tooltip.fadeOut(function () {

                });

            });
        }

        return tooltip;
    };

    mod_ui.dialog = function (divEle) {
        //var default_params = {},
        //prms = util.extend(true,{}, default_params, params),

        var dialog = $("<div></div>");
        dialog.css({
            backgroundColor: "#FFF"
        });

        dialog.html(divEle.html());

        return dialog;
    };

    mod_ui.customScrollbar = function (ele) {
        if (window.$ && window.$ && window.$.fn && window.$.fn.mCustomScrollbar) {
            ele = window.$(ele);
            ele.mCustomScrollbar("destroy");
            ele.mCustomScrollbar({
                scrollButtons: {
                    enable: true
                },
                advanced: {
                    updateOnContentResize: true,
                    updateOnBrowserResize: true
                }
            });
        } else {
            logger.warn("mCustomScrollbar not found.");
        }
    };

    mod_ui.disableScroll = function (mainContainer) {
        $("html,body").css({overflow: "hidden", height: "100%", padding: "0", margin: "0"});
        $(mainContainer || "#container").css({overflowY: "scroll", height: "100%"});
    };

    mod_ui.enableScroll = function (mainContainer) {
        $("html,body").css({overflow: "", height: "", padding: "", margin: ""});
        $(mainContainer || "#container").css({overflowY: "", height: ""});
    };

    mod_ui.init();


    return mod_ui;
});

/**
 * 'load' module.
 *
 * @module load
 * @requires event
 * @requires logger
 */
define('tiljs/load',["./event", "./logger", "./util", "./is"], function (event, logger, util, is) {
    logger.log("load loaded");
    //    var LOADING = 0;
    //    var LOADED = 1;
    var mod_load = {};
    //    mod_load.js_queue = {};
    /**
     * Load javascript file on a page
     *
     * @memberOf module:load#
     * @function js
     * @param {String} url URL of the javascript file
     * @param {Function} [callback] function to be called when js is loaded
     * @param {String} [id] id to be given to the javascript tag
     * @param {Boolean} [async] true by default, set false to load synchronously
     * @returns {HTMLElement} generated script tag element
     * @example
     *  require(['load'],function(load){
	 *     //Load javascript 'abc.js'
	 *     load.js('abc.js',function(){
	 *        console.log('abc.js loaded');
	 *     });
	 *
	 *     //Load javascript 'abc.js' , the script element is assigned provided id
	 *     load.js('abc.js',function(){
	 *        console.log('abc.js loaded');
	 *     },'element_id',true);
	 *  });
     */
    mod_load.js = function (url, callback, id, async) {
        //TODO implement queue - prevent multiple js loading
        //        id = id || url.replace(/[^\w\s]/gi, ''); //todo BAD hack, implement queue
        //        var script =  document.getElementById(id);
        //        if(script && script.loaded){
        //            if(callback){
        //                callback();
        //            }
        //            return script;
        //        }
        var head = document.getElementsByTagName("head") ? document.getElementsByTagName("head")[0] : null;
        if (head) {
            var script = document.createElement("script");
            var done = false; // Handle Script loading
            if (id) {
                script.id = id;
            }
            if (async) {
                script.async = async;
            }
            if (!url) {
                throw new Error("Param 'url' not defined.");
            }
            script.src = url;
            script.onload = script.onreadystatechange = function () { // Attach handlers for all browsers
                if (!script.loaded && ( !this.readyState || this.readyState === "loaded" || this.readyState === "complete" )) {
                    script.loaded = true;
                    var endTime = new Date().getTime();
                    var timeSpent = endTime - script.startTime;
                    event.publish("load.js", ['_trackTiming', 'js', url, timeSpent, url]);
                    //                        track.ga(['_trackTiming', 'js', url , timeSpent, url ]);//todo identify label(last param)
                    if (callback) {
                        try {
                            callback();
                        } catch (e) { //to handle
                            event.publish("logger.error", e.stack);
                        }
                    }
                    script.onload = script.onreadystatechange = null; // Handle memory leak in IE
                }
            };
            script.startTime = new Date().getTime();
            head.appendChild(script);
            return script;
        } else {
            logger.info("Head Element not found. JS '" + url + "' not loaded. ");
            return null;
        }
    };
    /**
     * Load css file on a page
     *
     * @memberOf module:load#
     * @function css
     *
     * @param {String} href URL of the css file
     * @param {Function} [callback] function to be called when
     * @returns {HTMLElement} generated link tag element
     * @example
     *  require(['load'],function(load){
	 *     //Load stylesheet 'abc.css'
	 *     load.css('abc.css',function(){
	 *        console.log('abc.css loaded');
	 *     });
	 *  });
     */
    mod_load.css = function (href, callback) {
        var headEle = document.getElementsByTagName("head") ? document.getElementsByTagName("head")[0] : null;
        if (headEle) {
            var cssLink = document.createElement("link");
            cssLink.setAttribute("rel", "stylesheet");
            cssLink.setAttribute("type", "text/css");
            cssLink.setAttribute("href", href);
            headEle.appendChild(cssLink);
            if (callback) {
                setTimeout(callback, 0); //TODO find better way
            }
        } else {
            logger.info("Head Element not found. CSS '" + href + "' not loaded. ");
        }
        return cssLink;
    };
    /**
     * Load iframe on a page
     *
     * @memberOf module:load#
     * @function iframe
     *
     * @param {String} src URL of the iframe to be loaded
     * @param {Number} width width of the iframe, defaults to 0
     * @param {Number} height height of the iframe, defaults to 0
     * @param {String} containerId id of the container in which the iframe is to be loaded
     * @returns {HTMLElement} generated iframe element
     * @example
     *  require(['load'],function(load){
	 *     load.iframe('http://www.abc.com',100,100,'container_iframe');
	 *  });
     */
    mod_load.iframe = function (src, width, height, containerId) {
        var container = document.getElementById(containerId) || document.body;
        if (container) {
            var i = document.createElement("iframe");
            i.src = src;
            i.scrolling = "no";
            i.frameBorder = "0";
            i.width = width || 0;
            i.height = height || 0;
            container.appendChild(i);
            return i;
        } else {
            logger.info("Container with id '" + containerId + "' not found. iframe '" + src + "' not loaded. ");
        }
    };
    mod_load.image = function (src) {
        if (is.array(src)) {
            util.each(ajaxLogout, function (i, v) {
                mod_load.image(v);
            });
        } else {
            var img = new Image();
            img.src = src;
        }
    };
    /**
     * //TODO, remove private after implementing it.
     *
     * @private
     */
    mod_load._content = function (url, containerId) {
    };
    /**
     * Checks if the javascript or css is loaded
     *
     * @memberOf module:load#
     * @function isLoaded
     *
     * @param path
     * @returns {boolean}
     * @example
     *
     *  require(['load'],function(load){
	 *     load.isLoaded('abc.js');   // returns true is abc.js is loaded
	 *     load.isLoaded('abc.css');  // returns true is abc.css is loaded
	 *  });
     */
    mod_load.isLoaded = function (path) { //todo import jquery dependency
        return $('script[src="' + path + '"]').length > 0 || $('link[href="' + path + '"]').length > 0;
    };
    return mod_load;
});

/**
 * 'localstorage' module.
 *
 * @module localstorage
 * @requires util
 * @requires json
 */
define('tiljs/localstorage',["module", "./util", "json", "./is", "./logger"], function (module, util, JSON, is, logger) {
    var mod_localstorage = {};
    var default_config = {};
    var config = util.extend(true, {}, default_config, module.config());
    var LS = window.localStorage;
    if (!LS) {
        logger.warn("'localStorage' is not available.");
        LS = {
            getItem: function () {
            },
            removeItem: function () {
            },
            setItem: function () {
            }
        };
    }
    /**
     * Get value of a localstorage
     *
     * @param {String} [name] name of the localstorage for which value is required,
     *                        if name is not provided an object with all localstorages is returned
     * @returns {String | Array} value of the requested localstorage / Array of all localstorages
     */
    mod_localstorage.get = function (name) {
        var val = LS.getItem(name);
        if (val != null) {
            var record = JSON.parse(val);
            if (!record) {
                return null;
            }
            return ( new Date().getTime() < record.timestamp ) ? record.value : null;
        } else {
            return null;
        }
    };
    /**
     * localStorage Set,Get,Delete
     */
    mod_localstorage.getAll = function () {
        return mod_localstorage.get();
    };
    /**
     * Remove a localstorage
     *
     * @param {String} name name of the localstorage to be removed
     * @param {String} [path] path of the localstorage
     * @param {String} [domain] domain of the localstorage
     */
    mod_localstorage.remove = function (name, path, domain) {
        if (name) {
            LS.removeItem(name);
        }
    };
    /**
     * Set a localstorage
     *
     * @param {String} name name of the localstorage to be set
     * @param {String} value value of the localstorage to be set
     * @param {Number} [days] number of days for which the localstorage is to be set
     * @param {String} [path] path of the localstorage to be set
     * @param {String} [domain] domain of the localstorage to be set
     * @param {Boolean} [secure] true if the localstorage is to be set on https only (to be implemented)
     */
    mod_localstorage.set = function (name, value, days, path, domain, secure) {
        var date = new Date();
        var expirationMS = date.getTime() + ( ( days || 365 ) * 24 * 60 * 60 * 1000 );
        var record = {
            value: value,
            timestamp: new Date().getTime() + expirationMS,
            path: path,
            domain: domain
        };
        try {
            LS.setItem(name, JSON.stringify(record));
        } catch (e) {
            //            if (e == 'QUOTA_EXCEEDED_ERR') {
            logger.error('Unable to save item in localStorage:' + name);
            //            }
        }
        //        return value;
    };
    return mod_localstorage;
});

define('api',["tiljs/apps/times/api"], function (api) {
    var mod_api = api;
    return mod_api;
});

define('tiljs/plugin/plugin',["../load", "../util", /* "jquery",*/ "../event", "../ui", "../logger", "../is"], function (load, util, /*$,*/ event, ui, logger, is) {
    var default_config = {
        init: true,
        root: "body",
        dependency: function (callback) {
            //this is config here
            this.dep_data = {};
            if (callback) {
                callback();
            }
        }
    };
    var mod_plugin = function (id, config) {
        if (!id) {
            throw new Error("'id' param is required.");
        }
        this.id = id;
        this.updateConfig(config);
        //        console.log("done");
    };
    mod_plugin.prototype.updateConfig = function (config) {
        this.config = util.extend(true, {}, default_config, config);
    };
    mod_plugin.prototype.find = function () {
        return $(this.config.root).find("[data-plugin='" + this.id + "']");
    };
    mod_plugin.prototype.init = function () {
        event.publish(getEventName("beforeinit"));
        //        var plugins = opt.find();
        //        logger.log(opt.id + " init:" + plugins.length);
        //        if (plugins && plugins.length > 0) {
        //            event.publish(getEventName("beforeloadjs"));
        //            if (opt.js && opt.isJSdependent(plugins)) {
        //                load.js(opt.js, function (options, plugins) {
        //                    return function () {
        //                        event.publish(getEventName("afterloadjs"));
        //                        opt.initPlugins(plugins);
        //                    };
        //                }(opt, plugins), opt.js_id);
        //            } else {
        //                opt.initPlugins(plugins);
        //            }
        //        }
        //        console.log("init" );
        if (is.funct(this.config.dependency)) {
            var tthis = this;
            this.config.dependency(function () {
                tthis.render();
            });
        } else {
            this.render();
        }
    };
    mod_plugin.prototype.render = function () {
        event.publish(getEventName("beforerender"));
        var plugin = this;
        this.find().each(function (i, ele) {
            plugin.renderEach(ele);
        });
        event.publish(getEventName("afterrender"));
    };
    mod_plugin.prototype.renderEach = function (ele) {
        //$(ele).html("yoo hoo");
        //Override this
    };
    var getEventName = function (eventName) {
        return "plugin." + this.id + eventName; //todo replace with ===> "plugin." + this.id + "." + eventName;
    };
    return mod_plugin;
});

define('tiljs/plugin/dynamic',["../timer", "../util", "../plugin/plugin"], function (timer, util, plugin) {
    var mod_uptime = new plugin("dynamic-uptime");
    mod_uptime.uptime = function () {
        var plugins = $("[data-plugin='dynamic-uptime']");
        plugins.each(function (i, p) {
            mod_uptime.renderEach(p);
        });
    };
    mod_uptime.renderEach = function (ele) {
        //        var plugins = $("[data-plugin='dynamic-uptime']");
        //        plugins.each(function(i,p){
        var plugin = $(ele);
        var time = plugin.attr("data-time");
        var elapsedTime = timer.elapsedTime(time, {
            minute: "min",
            second: "sec"
        }, true);
        plugin.html(elapsedTime);
        //        });
    };
    timer.every(60000 /*minute*/, function () {
        mod_uptime.render();
    });
    mod_uptime.init();
    return mod_uptime;
});

define('rodate',[], function () {
    var rodate = {};
    rodate.uptime = function () {
        var plugins = $("[rodate]");
        plugins.each(function (i, p) {
            rodate.renderEach(p);
        });
    };
    rodate.renderEach = function (ele) {
        var plugin = $(ele);
        var elapsedTime = '';
        var time = plugin.attr("rodate");
        var match = time.match(/^(\d+)-(\d+)-(\d+) (\d+)\:(\d+)\:(\d+)$/);
        if (!!time && !match) {
            time = !isNaN(time) ? parseInt(time) : time;
            var timeObj = new Date(time);
            if (!isNaN(timeObj.getTime())) {
                rod = timeObj;
            } else {
                if (time.indexOf("hrs IST") != -1) {
                    time = time.replace(" hrs IST", "");
                    time = time.splice(-2, 0, ":"); //21 Apr, 2014, 16:31
                }
                time = time.replace("IST", "");
                time = time.replace("hrs", "");
                time = time.replace("AM", " AM");
                time = time.replace("PM", " PM");
                rod = new Date(time);
                if (isNaN(rod.getTime())) {
                    if (time.indexOf(':') > -1) {
                        time = time.split(' ').join('T');
                        time = time.concat('+05:30');
                        rod = new Date(time);
                    }

                }
            }
            match = ['', rod.getYear() + 1900, rod.getMonth() + 1, rod.getDate(), rod.getHours(), rod.getMinutes(), rod.getSeconds()];
        }
        if( !!match && match instanceof Array && match.length >= 6 ){
            elapsedTime = rodate.elapsedTime(new Date(match[1], match[2] - 1, match[3], match[4], match[5], match[6]).getTime(), {
                minute: "min",
                second: "sec"
                }, true);
        }
        plugin.html(elapsedTime);
    };
    rodate.elapsedTime = function (ctime, labels_config, last_only) {
        if (typeof ctime !== "number") {
            return "";
        }
        var labels_default = {
            year: "year",
            day: "day",
            hour: "hour",
            minute: "minute",
            second: "second",
            ago: "ago"
        };
        var labels = $.extend({}, labels_default, labels_config);
        var timeparts = [
            {
                name: labels.year,
                div: 31536000000,
                mod: 10000
            },
            {
                name: labels.day,
                div: 86400000,
                mod: 365
            },
            {
                name: labels.hour,
                div: 3600000,
                mod: 24
            },
            {
                name: labels.minute,
                div: 60000,
                mod: 60
            },
            {
                name: labels.second,
                div: 1000,
                mod: 60
            }
        ];
        var
            i = 0,
            l = timeparts.length,
            calc,
            values = [],
            interval = new Date().getTime() - ctime; //todo use server time
        while (i < l) {
            calc = Math.floor(interval / timeparts[i].div) % timeparts[i].mod;
            if (calc && calc >= 0) {
                values.push(calc + ' ' + timeparts[i].name + ( calc > 1 ? 's' : '' ));
            }
            i += 1;
        }
        if (values.length === 0) {
            values.push('1 ' + labels.second);
        }
        if (last_only === true) {
            return values[0] + ' ' + labels.ago;
        } else {
            return values.join(', ') + ' ' + labels.ago;
        }
    };
    return rodate;
});

/**
 * 'login' module.
 *
 * @module login
 * @requires util
 * @requires ajax
 * @requires cookie
 * @requires event
 * @requires jquery
 * @requires module
 * @requires user
 * @requires string
 * @requires logger
 */
define('tiljs/login',["tiljs/apps/times/usermanagement"],
    function (login) {
        mod_login = login;
        
        return mod_login;
    }
);

define('tiljs/plugin/lazy',["../event", "../ui", "module", "../util"], function (event, ui, module, util) {
    var mod_lazy = {};
    var default_config = {
        skew: 1000,
        error_image: null
    };
    var config = util.extend(true, {}, default_config, module.config());
    mod_lazy.init = function () {
        var tthis = this;
        tthis.load();
        event.subscribe("window.scroll", function () { //todo this wont work
            tthis.load();
        })
    };
    mod_lazy.load = function () {
        var tthis = this;
        var imgEle = $("[data-src]");
        imgEle.each(function (i, imgEleC) {
            if (ui.inView(imgEleC, true, config.skew)) {
                tthis.loadEach(imgEleC);
            }
        });
    };
    mod_lazy.loadEach = function (imgEleC) {
        var imgEle$ = $(imgEleC);
        var imgdomain=(typeof toiprops != "undefined" && toiprops.hasOwnProperty("imgdomain"))?toiprops.imgdomain:'';
        var imgsrc = (/^(f|ht)tps?:\/\//i.test(imgEle$.attr("data-src")))?imgEle$.attr("data-src"):imgdomain+imgEle$.attr("data-src");
        if (config.error_image) {
            imgEle$.error(function () {
                $(this).attr('src', imgdomain+config.error_image);
            });
        }
        imgEle$.attr("src", imgEle$.attr("data-src"));
        imgEle$.removeAttr("data-src");
        
        if(imgEle$.siblings(".loader").length>0)
		{
		    setTimeout(function() {
		        if(imgEle$.hasClass("blurimage"))
        		{
        		    imgEle$.removeClass("blurimage");
        		}
    		    imgEle$.siblings(".loader").hide();    
    		}, 500);
		}
    };
    mod_lazy.init();
    return mod_lazy;
});

define('jsrender',["jquery"],function($){
    if(!$.fn.render){
        throw new Error("Missing js: http://timesofindia.indiatimes.com/jsrender.cms" );
    }
    return $.fn.render;
});
define('localstoragec',["tiljs/cookie"], function (cookie) {
    var mod_local = {};
    mod_local.isEnabled = function () {
        return typeof ( Storage ) !== "undefined";
    };
    mod_local.checkExpiry = function (key) {
        var obj = localStorage.getItem(key);
        if (obj && !( obj.hasOwnProperty("timestamp") && obj.hasOwnProperty("expires") )) return key;
        if (obj && (Number(new Date().getTime()) - Number(obj.timestamp) > Number(obj.expires) * 60 * 60 * 24 * 1000 )) {
            localStorage.removeItem(key);
            return;
        }
        return key;
    };
    mod_local.set = function (name, value, expires, path, domain, secure) {
        try {
            var object = {
                "value": value,
                timestamp: new Date().getTime(),
                "expires": expires
            };
            localStorage.setItem(name, JSON.stringify(object));
        } catch (e) {
            cookie.set(name, value, expires, path, domain, secure);
        }
    };
    mod_local.get = function (key) {
        //return (mod_local.checkExpiry(key))?localStorage.getItem(key):'';
        var val = '';
        try {
            val = JSON.parse(localStorage.getItem(key));
        } catch (ex) {
            val = localStorage.getItem(key);
        }
        return ( val && val['value'] ) ? val['value'] : val;
    };
    mod_local.csget = function (key) {
        //return (mod_local.isEnabled() && mod_local.checkExpiry(key))?mod_local.get(key):mod_local.get(key);
        return ( mod_local.isEnabled() && mod_local.get(key) ) ? mod_local.get(key) : cookie.get(key);
    };
    mod_local.csgetAll = function (key) {
	    return ( mod_local.isEnabled() ) ? localStorage : cookie.getAll();
    };
    mod_local.remove = function (data) {
        return localStorage.removeItem(data);
    };
    return mod_local;
});
define('tiljs/comments',["./util", "./ui", "jquery", "module", "./is", "./plugin/lazy", "./event"], function (util, ui, $, module, is, lazy, event) {
    var default_config = {
        gravatar: false,
        wrapper: "#comment-section", //data-plugin=['comments'] //All comments inside this
        main: "#comments", //data-plugin=['comments'] //Comment will be added here
        comment: "[data-plugin='comment']", //Each comment
        tmpl: "comment_tmpl",
        count: "[data-plugin='comments-count']",
        post_button: "[data-plugin='comment-post']",
        comment_input: "[data-plugin='comment-input']",
        form: "[data-plugin='comment-form']",
        loadonscroll: true
    };
    var mod_comments = function (config) {
        this.config = util.extend(true, {}, config);
    };
    mod_comments.config = util.extend(true, {}, default_config, module.config());
    var sample_comment = [
        {
            text: "Hello World",
            name: "Del Sanic",
            image: "http://www.gravatar.com/avatar/?d=identicon",
            uid: "123456",
            badge: [
                {
                    name: "Silver"
                },
                {
                    name: "Gold"
                }
            ]
        },
        {
            text: "Test Comment",
            name: "John",
            image: "http://www.gravatar.com/avatar/?d=identicon",
            uid: "123457",
            badge: [
                {
                    name: "Silver"
                },
                {
                    name: "Gold"
                }
            ]
        }
    ];
    mod_comments.getConfig = function () {
        return this.config;
    };
    mod_comments.prototype.getConfig = function () {
        return this.config;
    };
    mod_comments.prototype.initialize = function () {
        var tthis = this;
        //        tthis.isLoading=0;
        this.comments = [];
        this.getData(function (data, commentCount) {
            tthis.renderCommentCount(commentCount || ( data ? data.length : 0 ));
            if (data && data.length > 0) {
                tthis.renderNoComment(false);
                tthis.render(data);
            } else {
                tthis.renderNoComment(true);
            }
        });
        if (tthis.config.loadonscroll === true) {
            (function (tthis) {
                event.subscribe("window.scroll", function () { //todo this wont work
                    tthis.loadNextPg();
                })
            })(tthis);
        }
    };
    mod_comments.prototype.getData = function (callback) {
        //        var comment = util.extend(true,{},sample_comment);
        //        ui.getGravatar();
        callback(sample_comment);
    };
    mod_comments.prototype.renderCommentCount = function (count, type) {
        $("[data-plugin='comment-count']").text(count);
    };
    mod_comments.prototype.renderNoComment = function (showOrHide) {
        if (showOrHide) {
            $("[data-plugin='comment-none']").show();
        } else {
            $("[data-plugin='comment-none']").hide();
        }
    };
    mod_comments.prototype.render = function (data, callback, append) {
        var tthis = this;
        if (data) {
            var root = $(tthis.config.wrapper + " " + tthis.config.main);
            if (append == false || typeof append === "undefined") {
                root.empty();
                ////            root.append(this.renderInput()) ;
            }
            //            if (this.config.tmpl) {
            //                this.renderUsingTemplate(0,data,this.config.tmpl);
            //            } else {
            util.each(data, function (i, v) {
                root.append(tthis.renderEach(i, v));
                if (callback) {
                    callback(data);
                }
            });
            lazy.load();
            //            }
        }
    };
    mod_comments.prototype.renderEach = function (index, dataOne) {
        if (this.config.tmpl && $.fn.render) {
            return this.renderUsingTemplate(index, dataOne, this.config.tmpl);
        } else {
            event.publish("logger.error", "$.fn.render not defined. Render using jquery. this.config.tmpl=" + this.config.tmpl + "&$.fn.render=" + $.fn.render);
            return this.renderUsingjQuery(index, dataOne);
        }
    };
    mod_comments.prototype.renderUsingTemplate = function (index, dataOne, tmpl, prepend) {
        return $("#" + tmpl).render(dataOne);
    };
    mod_comments.prototype.renderUsingjQuery = function (index, dataOne) {
        var li = $("<li></li>");
        li.text(dataOne.name + ": " + dataOne.text);
        return li;
    };
    mod_comments.prototype.loadingDiv = function (text) {
        $("[data-plugin='comment-loading']").text(text);
    };
    //    mod_comments.prototype.isLoading = function () {
    //        return this.isLoading === 1;
    //    };
    mod_comments.prototype.loadNextPg = function () {
        var tthis = this;
        //        var config = tthis.getConfig();
        if (tthis.isLoading === 0 && ui.inView(tthis.config.main + " .comment:last-child", true, 1000)) { //todo remove li from here
            tthis.loadComment(tthis.config.commentType, function (data) {
            }, true, ++tthis.config.curpg);
        }
    };
    mod_comments.prototype.loading = function (progress) {
        this.loadingDiv("Loading..." /*+ " " + (progress?progress + "%":"")*/);
        this.isLoading = 1;
    };
    mod_comments.prototype.loaded = function () {
        this.loadingDiv("");
        this.isLoading = 0;
        event.publish("comments.loaded", this);
        if (this.config.loadonscroll == false) {
            $(this.config.wrapper).find('#' + this.config.commentType).append("<div class='loadmore'>View more comments</div>");
        }
    };
    mod_comments.prototype.loadedAll = function () {
        this.loadingDiv("Loaded all comments");
        $(this.config.wrapper + ' #' + this.config.commentType + ' .loadmore').hide(); //todo change to data plugin
        if (this.comments.length == 0) {
            event.publish("comments.loaded.none", this);
        } else if (this.comments.length >= 0) {
            event.publish("comments.loaded.all", this);
        }
        this.isLoading = 2;
    };
    return mod_comments;
});

define('tiljs/social/social',["../load", "../util", "jquery", "../event", "../ui", "../logger"], function (load, util, $, event, ui, logger) {
    //    function SocialPlugin(id, social_parent) {
    //        var tthis = this;
    //
    //        this.id = id;
    //        this.social_id = social_parent.id;
    //        this.social_parent = social_parent;
    //
    //        var registerEvents = function () {
    //            var pluginName = tthis.getName();
    //            util.each(this.events, function (eventName, eventCallback) {
    //                $("body").on(eventName, "[data-plugin='" + pluginName + "']", function(e){
    //                    if(eventCallback){
    //                        eventCallback.call(this,e);
    //                    }
    //                    e.stopImmediatePropagation();
    //                    return false;
    //                });
    //            });
    //        };
    //
    //        this.readOptions = function (ele) {
    //            return util.data(ele);
    //        };
    //
    //        this.getName = function () {
    //            return this.social_id + "-" + this.id;
    //        };
    //
    //        this.init=function(){
    //
    //        };
    //
    //        this.preAttachPluginEvent = function (plugins) {
    //            var pluginInstance = plugins.filter("[data-plugin='" + this.getName() + "']");
    //            pluginInstance.each(function (kk, vv) {
    //                if (tthis.init) {
    //                    tthis.init(vv, tthis);
    //                }
    //            });
    //        };
    //    }
    var mod_social = function (id) {
        this.id = id;
        this.config = {
            js: null,
            js_id: null
        };
        this.config = function (config) {
            this.config = util.extend(true, {}, this.config, config);
            this.js = config.js;
            this.js_id = config.js_id;
        };
        /**
         * @deprecated use this.config
         * @param js
         * @param js_id
         */
        this.setJS = function (js, js_id) {
            this.js = js;
            this.js_id = js_id;
        };
        this.plugins = {};
        this._getPluginID = function (id) {
            return opt.id + "-" + id;
        };
        this.addPlugin = function (plugin_options) {
            opt.plugins[this._getPluginID(plugin_options.id)] = plugin_options;
            if (plugin_options.alias) {
                for (var i = 0; i < plugin_options.alias.length; i++) {
                    var alias_options = util.extend(true, {}, plugin_options, {
                        id: plugin_options.alias[i]
                    });
                    delete alias_options.alias;
                    this.addPlugin(alias_options);
                }
            }
        };
        this.getPlugin = function (id) {
            return opt.plugins[this._getPluginID(id)];
        };
        var opt = this;
        this.beforeinit = function () {
        };
        this.afterloadjs = function () {
        };
        this.beforeloadjs = function () {
        };
        this.init = function (config) {
            if (opt.beforeinit) {
                opt.beforeinit();
            }
            var plugins = opt.find();
            logger.log(opt.id + " init:" + plugins.length);
            if (plugins && plugins.length > 0 || config.parse === true) {
                if (opt.beforeloadjs) {
                    opt.beforeloadjs();
                }
                //                console.log(opt.js_id + ":" + opt.js_id);
                if (opt.js && ( opt.isJSdependent(plugins) || config.parse === true )) {
                    load.js(opt.js, function (options, plugins) {
                        return function () {
                            if (opt.afterloadjs) {
                                opt.afterloadjs(config);
                            }
                            opt.initPlugins(plugins);
                        };
                    }(opt, plugins), opt.js_id);
                } else {
                    opt.initPlugins(plugins);
                }
            }
        };
        this.find = function () {
            return $("[data-plugin^='" + this.id + "-']");
        };
        this.isJSdependent = function (plugins) {
            for (var i = 0; i < plugins.length; i++) {
                var plugin = plugins[i];
                var pluginName = $(plugin).attr("data-plugin");
                if (opt.plugins[pluginName] && opt.plugins[pluginName].js) {
                    return true;
                }
            }
            return false;
        };
        this.initPlugins = function (plugins) {
            this.registerPluginEvents();
            //            this.initPlugins(plugins);
        };
        this.registerPluginEvents = function () {
            util.each(opt.plugins, function (pluginName, plugin) {
                util.each(plugin.events, function (eventName, eventCallback) {
                    //                        console.log("EVENT:"+pluginName+":"+eventName);
                    $("body").off(eventName, "[data-plugin='" + pluginName + "']");
                    $("body").on(eventName, "[data-plugin='" + pluginName + "']", function (e) {
                        if (eventCallback) {
                            try {
                                event.publish("social.action", {
                                    plugin: pluginName,
                                    event: eventName,
                                    element: this,
                                    dom_event: e
                                });
                                eventCallback.call(this, e);
                            } catch (e) {
                                event.publish("logger.error", e.stack);
                            }
                        }
                        e.stopPropagation();
                        return false;
                    });
                });
                var pluginInstance = $("body").find("[data-plugin='" + pluginName + "']");
                pluginInstance.each(function (kk, vv) {
                    if (plugin.init) {
                        try {
                            plugin.init(vv, plugin);
                        } catch (e) {
                            event.publish("logger.error", e.stack);
                        }
                    }
                });
            });
        };
        this.preAttachPluginEvent = function (plugins) {
            //            console.log(opt.plugins);
            var plugincount = 0;
            util.each(opt.plugins, function (k, v) {
                var pluginInstance = plugins.filter("[data-plugin='" + k + "']");
                pluginInstance.each(function (kk, vv) {
                    plugincount++;
                    if (v.init) {
                        v.init(vv, v);
                        $(vv).css("border", "2px solid red");
                    }
                });
            });
            logger.log(opt.id + " found plugin : " + plugincount + "/" + plugins.length);
        };
        this.renderPlugin = function (ele, default_params, main_ele) {
            var element = $(ele);
            var data = util.data(ele);
            var params = util.extend(true, {}, default_params, data);
            params.href = data.url || data.href || element.attr("href") || params.href;
            var pluginEle = $(main_ele);
            //Using this because data method in jquery does not append dom element
            $.each(params, function (name, value) {
                pluginEle.attr("data-" + name, value);
            });
            element.empty();
            element.append(pluginEle);
            this.parse(ele);
        };
        this.getAbsoluteUrl = function (url) {
            var resolvedUrl = ( url && url.length > 0 && url !== "#" ) ? url : document.location.href;
            resolvedUrl = resolvedUrl.split("#")[0]; // remove #
            if (resolvedUrl && resolvedUrl.length > 2 && resolvedUrl[0] === "/" && resolvedUrl[1] !== "/") { //URL is relative, make it absolute
                resolvedUrl = location.protocol + "//" + location.host + resolvedUrl;
            }
            return resolvedUrl;
        };
        ///Helper Methods
        this._share = function (url, params, options, element) {
            event.publish("social.onBeforeShare", {
                params: params,
                element: element,
                network: this.id
            });
            var _url = this.getAbsoluteUrl(url);
            var name = "social_share_" + new Date().getTime();
            var _options = $.extend({
                name: name,
                width: 700,
                height: 400
            }, options);
            var popup = ui.window(_url + "?" + $.param(params), _options);
            if (popup) {
                popup.moveTo(275, 275);
            }
        };
    };
    mod_social.onBeforeShare = function (callback) {
        event.subscribe("social.onBeforeShare", callback);
    };
    return mod_social;
});

define('tiljs/social/facebook',["../social/social", "../ui", "../logger", "../event", "../util", "module", "jquery", "../ajax", "../is"], function (social, ui, logger, event, util, module, $, ajax, is) {
    var default_config = {
        parse: false,
        init: true,
        appid: null,
        js: "//connect.facebook.net/en_US/sdk.js",
        //        js: "//connect.facebook.net/en_US/all.js",
        js_id: "facebook-jssdk",
        load_js: false,
        share_url: "http://www.facebook.com/sharer.php",
        oauth: false,
        status: false,
        xfbml: false,
        fb_version: 'v2.12',
        share_params: function (url, title, summary, image) {
            return {
                "url[url]": url
            }
        }
    };
    var config = util.extend(true, {}, default_config, module.config());
    var mod_facebook = new social("facebook", "facebook");
    mod_facebook.setJS(config.js, config.js_id);
    var __isJSdependent = mod_facebook.isJSdependent;
    mod_facebook.isJSdependent = function (plugins) {
        return config.load_js || __isJSdependent(plugins);
    };
    mod_facebook.addPlugin({
        id: "like",
        js: true,
        init: function (ele, plugin) {
            var element = $(ele);
            var data = util.data(ele);
            var default_params = {
                href: location.href,
                layout: "button_count", //standard , box_count, button_count, button
                "show-faces": "false", //false, true
                width: "100", //integer
                action: "like", //like , recommend,
                share: false //true, false
            };
            var params = util.extend(true, {}, default_params, data);
            params.href = data.url || data.href || element.attr("href") || params.href;
            var fb_like = $("<div class='fb-like'></div>");
            $.each(params, function (name, value) {
                //Using this because data method in jquery does not append dom element
                fb_like.attr("data-" + name, value);
            });
            element.empty();
            element.append(fb_like);
            mod_facebook.parse(ele);
        }
    });
    mod_facebook.addPlugin({
        id: "comments",
        js: true,
        init: function (ele, plugin) {
            var element = $(ele);
            var data = util.data(ele);
            var default_params = {
                href: location.href,
                colorscheme: "light", //light, dark
                numposts: 10 //10
                //                width : "100"            //integer
            };
            var params = util.extend(true, {}, default_params, data);
            params.href = data.url || data.href || element.attr("href") || params.href;
            var fb_comments = $("<div class='fb-comments'></div>");
            //Using this because data method in jquery does not append dom element
            $.each(params, function (name, value) {
                fb_comments.attr("data-" + name, value);
            });
            element.empty();
            element.append(fb_comments);
            mod_facebook.parse(element[0]);
            //            FB.xfbml.parse(ele);
        }
    });
    mod_facebook.addPlugin({
        id: "share",
        alias: ["button"],
        events: {
            click: function (e) {
                var data = util.data(this);
                var title = data.title || document.title;
                mod_facebook.share(data.url || $(this).attr("href"), title, data.summary, data.image, this);
            }
        }
    });
    mod_facebook.share = function (url, title, summary, image, element) {
        if (false && window.FB && config.appid) { //disabling this because proper app id not available
            FB.ui({
                method: 'feed',
                display: 'popup',
                link: mod_facebook.getAbsoluteUrl(url),
                picture: mod_facebook.getAbsoluteUrl(image), //check picture should be correct
                name: title,
                //             caption: summary,
                description: summary
            }, function (response) {
                //                alert(response);
            });
        } else {
            var shareParam = {
                u: mod_facebook.getAbsoluteUrl(url),
                display: 'popup',
                sdk: 'joey'
                //                    'p[url]': mod_facebook.getAbsoluteUrl(url),
                //                    'p[title]': title,
                //                    'p[summary]': summary,
                //                    'p[image][0]': mod_facebook.getAbsoluteUrl(image)
            };
            if (!is.empty(config.appid)) {
               // shareParam.app_id = config.appid;
            }
            mod_facebook._share(
                config.share_url, shareParam, {
                    name: 'facebook_share_dialog',
                    width: 626,
                    height: (is.IE()) ? 600 : 436
                }, element
            );
        }
    };
    mod_facebook.addPlugin({
        id: "follow",
        events: {
            click: function (e) {
                mod_facebook.follow($(this).attr("data-url") || $(this).attr("href"));
            }
        },
        init: function (ele, plugin) {
        }
    });
    mod_facebook.follow = function (url, options) {
        var _url = mod_facebook.getAbsoluteUrl(url);
        var win = window.open(url, "_blank");
        win.focus();
    };
    mod_facebook.addPlugin({
        id: "login",
        js: true,
        events: {
            click: function (e) {
                mod_facebook.login();
            }
        }
    });
    var __perms = null;
    mod_facebook.parse = function (ele) {
        if (typeof FB !== "undefined") {
            FB.XFBML.parse(ele);
        } else {
            logger.warn("'FB' is required in parse");
        }
    };
    mod_facebook.getGrantedPermissions = function (callback) {
        if (typeof FB !== "undefined") {
            mod_facebook.api("/me/permissions", function (resp) {
                if (callback) {
                    callback(resp);
                }
            });
        } else {
            logger.warn("'FB' is required in login");
        }
    };
    mod_facebook.hasPermissions = function (permissions, callback) {
        if (typeof FB !== "undefined") {
            mod_facebook.api("/me/permissions", function (resp) {
                if (resp && resp.data && resp.data.length > 0) {
                    var perms = typeof permissions === "string" ? permissions.split(",") : ( permissions instanceof Array ? permissions : [] );
                    for (var i = 0; i < perms.length; i++) {
                        var perm = resp.data[0];
                        if (perm.hasOwnProperty(perms[i])) {
                            if (callback) {
                                callback(true);
                                return null;
                            }
                        }
                    }
                }
                if (callback) {
                    callback(false, resp && resp.error ? resp.error : null);
                }
            });
        } else {
            logger.warn("'FB' is required in login");
        }
    };
    mod_facebook.getPermissions = function (permissions, callback) {
        if (typeof FB !== "undefined") {
            var perms = typeof permissions === "string" ? permissions : ( permissions instanceof Array ? permissions.join(",") : "" );
            mod_facebook.hasPermissions(permissions, function (resp) {
                if (resp === true) {
                    if (callback) {
                        callback(resp);
                    }
                } else {
                    mod_facebook.login(permissions, function () {
                        mod_facebook.hasPermissions(permissions, function (resp) {
                            if (callback) {
                                callback(resp);
                            }
                        });
                    });
                }
            });
        } else {
            logger.warn("'FB' is required in login");
        }
    };
    mod_facebook.login = function (permissions, callback) {
        if (typeof FB !== "undefined") {
            logger.log(permissions);
            var perms = typeof permissions === "string" ? permissions : ( permissions instanceof Array ? permissions.join(",") : "" );
            if (__perms != perms) {
                //                __perms = perms;
                FB.login(callback, {
                    scope: perms
                }); //'email,user_likes'
            }
        } else {
            logger.warn("'FB' is required in login");
        }
    };
    mod_facebook.addPlugin({
        id: "logout",
        events: {
            click: function (e) {
                mod_facebook.logout();
            }
        }
    });
    mod_facebook.logout = function (callback) {
        if (typeof FB !== "undefined") {
            FB.logout(callback)
        } else {
            logger.warn("'FB' is required in logout");
        }
    };
    mod_facebook._createFBroot = function () {
        //Create fb-root div.
        var id = "fb-root";
        var div = $("#" + id);
        if (!div || div.length == 0) {
            div = $("<div></div>");
            div.attr("id", id);
            div.css("display", "none");
            $("body").append(div);
        }
        return div;
    };
    mod_facebook.beforeinit = function () {
        if (!config.appid) {
            logger.warn("'config.appid' is Required");
        }
    };
    mod_facebook.beforeloadjs = function () {
        mod_facebook._createFBroot();
    };
    mod_facebook.afterloadjs = function (k) {
        if (typeof FB !== "undefined") {
            logger.log("FB js loaded");
            if (config.init === true || k.init === true) {
                FB.init({
                    appId: config.appid,
                    oauth: config.oauth,
                    status: config.status,
                    cookie: true,
                    xfbml: config.xfbml,
                    version: config.fb_version
                });
            }
            event.publish("FB.onload", FB);

            FB.Event.subscribe('edge.remove', function (response) {
                event.publish("FB.edge.remove", response);
            });

            FB.Event.subscribe('edge.create', function (response) {
                event.publish("FB.edge.create", response);
            });

            FB.Event.subscribe('comment.create', function (response) {
                event.publish("FB.comment.create", response);
            });
            FB.Event.subscribe('auth.authResponseChange', function (response) {
                event.publish("FB.auth.authResponseChange", response);
                if (response.status === 'connected') {
                    // the user is logged in and has authenticated your
                    // app, and response.authResponse supplies
                    // the user's ID, a valid access token, a signed
                    // request, and the time the access token
                    // and signed request each expire
                    var uid = response.authResponse.userID;
                    var accessToken = response.authResponse.accessToken;
                    event.publish("FB.auth.authResponseChange.connected", response);
                    event.publish("FB.connected", FB);
                } else if (response.status === 'not_authorized') {
                    // the user is logged in to Facebook,
                    // but has not authenticated your app
                    event.publish("FB.auth.authResponseChange.not_authorised", response);
                } else {
                    // the user isn't logged in to Facebook.
                    event.publish("FB.auth.authResponseChange.failed", response);
                }
            });
        } else {
            logger.warn("'FB' is required in afterloadjs");
        }
    };
    var currentUser = null;
    mod_facebook.getUser = function (callback) {
        if (typeof FB !== "undefined" && !currentUser) {
            FB.api('/me', function (response) { //todo use mod_facebook.api
                if (callback) {
                    currentUser = response;
                    callback(response); //response is the basic user object
                }
            });
        } else {
            if (callback) {
                callback(currentUser);
            }
        }
    };
    mod_facebook.onlogin = function (callback) {
        event.subscribe("FB.auth.authResponseChange.connected", function (resp) {
            mod_facebook.getUser(function (user) {
                if (callback) {
                    callback(user, resp);
                }
            })
        });
    };
    mod_facebook.oncomment = function (callback) {
        event.subscribe("FB.comment.create", function (resp) {
            mod_facebook.getUser(function (user) {
                if (callback) {
                    callback(user, resp);
                }
            })
        });
    };
    mod_facebook.onlogout = function (callback) {
        event.subscribe(["FB.auth.authResponseChange.not_authorised", "FB.auth.authResponseChange.failed"], function (resp) {
            if (callback) {
                currentUser = null;
                callback(resp);
            }
        });
    };
    mod_facebook.fql = function (query, callback) {
        if (typeof FB !== "undefined") {
            logger.log(query);
            FB.api({ //todo use mod_facebook.api
                method: 'fql.query',
                query: query
            }, callback);
        } else {
            logger.warn("'FB' is required in fql");
        }
    };
    //select name from page where page_id in (SELECT page_id FROM page WHERE page_id IN (SELECT uid, page_id, type FROM page_fan WHERE uid=me()) AND type='city')
    mod_facebook.getLikes = function (callback) {
        if (typeof FB !== "undefined") {
            FB.api('/me/likes', /*{'limit': '5'},*/ function (response) { //todo use mod_facebook.api
                if (callback) {
                    currentUser = response;
                    callback(response); //response is the basic user object
                }
            });
        }
    };
    mod_facebook.getLikesByCategory = function (categories, callback) {
        if (categories.length > 0 && is.string(categories)) {
            categories = categories.split(",");
        }
        var catArr = [];
        if (categories.length > 0) {
            util.each(categories, function (i, v) {
                catArr.push("type='" + v + "'");
            });
        }
        var catStr = catArr.length > 0 ? "AND (" + catArr.join(" OR ") + ")" : "";
        mod_facebook.getUser(function (user) {
            if (user) {
                mod_facebook.fql("select name from page where page_id in (SELECT page_id FROM page WHERE page_id IN (SELECT uid, page_id, type FROM page_fan WHERE uid=me()) " + catStr + ")", function (data) {
                    if (callback) {
                        callback(data);
                    }
                });
            } else {
                logger.warn("User is not logged in. Cannot run facebook.getLikesByCategory.");
            }
        });
    };
    /**
     * Paging Example :

     var facebook = require("social/facebook")
     facebook.getLikes(function(data){
            if(data){
                console.log(data);
                facebook.paging(data,arguments.callee); //This will recursively call facebook
            }
        });

     * @param data
     * @param callback
     * @returns {*}
     */
    mod_facebook.paging = mod_facebook.pageNext = function (data, callback) {
        //{"cursors":{"after":"MjY4ODE3MDI2NDgyMDU5","before":"MTYwMjI3OTE0MDM3NzU0"},
        // "next":"https://graph.facebook.com/100006612690893/likes?access_token=CAABrIHwVZA2GUh3ryguvIzDAHbM1SR0iHYnLHo2hZAp1gZDZD&limit=25&after=MjY4ODE3MDI2NDgyMDU5"}
        if (data && data.paging && data.paging.next) {
            return ajax.getJSONP(data.paging.next, callback);
        } else {
            callback(null);
        }
    };
    mod_facebook.pagePrev = function (data, callback) {
        //{"cursors":{"after":"MjY4ODE3MDI2NDgyMDU5","before":"MTYwMjI3OTE0MDM3NzU0"},
        // "next":"https://graph.facebook.com/100006612690893/likes?access_token=CAABrIHwVZA2GUh3ryguvIzDAHbM1SR0iHYnLHo2hZAp1gZDZD&limit=25&after=MjY4ODE3MDI2NDgyMDU5"}
        if (data && data.paging && data.paging.previous) {
            return ajax.getJSONP(data.paging.previous, callback);
        } else {
            callback(null);
        }
    };
    mod_facebook.getRegisteredUsersTxt = function (callback) {
        mod_facebook.getRegisteredUsers(function (users) {
            if (callback) {
                if (users.length == 1) {
                    callback(users[0].name + " has planned his/her trips on HappyTrips.com.", users);
                } else if (users.length > 1) {
                    callback(users.length + " of your friends have planned their trips on HappyTrips.com", users);
                } else {
                    callback("None of your friends have planned their trips on HappyTrips.com.", users);
                }
            }
        })
    };
    //    mod_facebook.getRegisteredUsersTxtImg = function (callback, count, link) {
    //        mod_facebook.getRegisteredUsersTxt(function (text, users) {
    //            if (users && users.length > 0) {
    //                var imgEle = $("<span></span>");
    //
    //                var maxImg = 10;
    //
    //                imgEle.empty();
    //                for (var i = 0; i < users.length && i < maxImg; i++) {
    //                    var user = users[i];
    //                    if (link === true) {
    //                        imgEle.append($('<a href="https://www.facebook.com/' + user.uid + '" target="_blank"><img src="' + user.pic_square_with_logo + '" alt="' + user.name + '" title="' + user.name + '" /></a>'));
    //                    } else {
    //                        imgEle.append($('<img src="' + user.pic_square_with_logo + '" alt="' + user.name + '" title="' + user.name + '" />'));
    //                    }
    //
    //                }
    //                if(!count || count === true){
    //                    imgEle.append($('<a href="https://www.facebook.com/' + user.uid + '" class="fbImgCount" target="_blank">+' + ((users.length) - i) + '</a>'));
    //                }
    //            }
    //        });
    //    };
    /**
     * N users have registered on APP_ID
     * @param callback
     */
    mod_facebook.getRegisteredUsers = function (callback) {
        mod_facebook.fql('SELECT uid,name,pic_square_with_logo FROM user WHERE is_app_user AND uid IN (SELECT uid2 FROM friend WHERE uid1 = me())', callback);
    };
    mod_facebook.api = function () {
        var query = arguments[0];
        var method = typeof arguments[1] === "string" ? arguments[1] : "GET";
        var params = typeof arguments[2] === "object" ? arguments[2] : {};
        var callback = typeof arguments[1] === "function" ? arguments[1] : ( typeof arguments[2] === "function" ? arguments[2] : ( typeof arguments[3] === "function" ? arguments[3] : null ) );
        /*
         'since':'last week',
         'limit': '10',
         'offset': '20',
         'until': 'yesterday'
         */
        if (typeof FB !== "undefined") {
            logger.debug(query);
            FB.api(query, method, params, function (response) {
                if (callback) {
                    callback(response);
                }
            });
        } else {
            logger.warn("'FB' is required in api");
        }
    };
    mod_facebook.getCheckins = function (callback) {
        mod_facebook.api("/me/locations", callback);
    };
    mod_facebook.post = function (message, callback) {
        var _message = typeof arguments[0] === "string" ? {
            message: arguments[0]
        } : arguments[0];
        mod_facebook.login("publish_stream", function () {
            mod_facebook.api("/me/feed", "POST", _message, callback);
        });
    };
    /**SELECT page_id,name
     FROM place
     WHERE distance(latitude, longitude, "28.6410126613", "77.2408139523") < 50000
     ORDER BY distance(latitude, longitude, "28.6410126613", "77.2408139523")
     LIMIT 10*/
    mod_facebook.checkin = function (message, placeid, callback) {
        mod_facebook.post({
            message: message,
            place: placeid
        }, callback);
    };
    $(document).ready(function(){
      mod_facebook.init(config);  
    });
    return mod_facebook;
});

define('tiljs/ext/date',[], function () {
    /*
     * @version  0.5.0
     * @author   Lauri Rooden - https://github.com/litejs/date-format-lite
     * @license  MIT License  - http://lauri.rooden.ee/mit-license.txt
     */
    !function (Date, proto) {
        var maskRe = /(["'])((?:[^\\]|\\.)*?)\1|YYYY|([MD])\3\3(\3?)|SS|([YMDHhmsW])(\5?)|[uUAZSwo]/g,
            yearFirstRe = /(\d{4})[-.\/](\d\d?)[-.\/](\d\d?)/,
            dateFirstRe = /(\d\d?)[-.\/](\d\d?)[-.\/](\d{4})/,
            timeRe = /(\d\d?):(\d\d):?(\d\d)?\.?(\d{3})?(?:\s*(?:(a)|(p))\.?m\.?)?(\s*(?:Z|GMT|UTC)?(?:([-+]\d\d):?(\d\d)?)?)?/i,
            wordRe = /.[a-z]+/g,
            unescapeRe = /\\(.)/g
        //, isoDateRe = /(\d{4})[-.\/]W(\d\d?)[-.\/](\d)/
        // ISO 8601 specifies numeric representations of date and time.
        //
        // The international standard date notation is
        // YYYY-MM-DD
        //
        // The international standard notation for the time of day is
        // hh:mm:ss
        //
        // Time zone
        //
        // The strings +hh:mm, +hhmm, or +hh (ahead of UTC)
        // -hh:mm, -hhmm, or -hh (time zones west of the zero meridian, which are behind UTC)
        //
        // 12:00Z = 13:00+01:00 = 0700-0500
        Date[proto].format = function (mask) {
            mask = Date.masks[mask] || mask || Date.masks["default"]
            var self = this,
                get = "get" + ( mask.slice(0, 4) == "UTC:" ? ( mask = mask.slice(4), "UTC" ) : "" )
            return mask.replace(maskRe, function (match, quote, text, MD, MD4, single, pad) {
                text = single == "Y" ? self[get + "FullYear"]() % 100 : match == "YYYY" ? self[get + "FullYear"]() : single == "M" ? self[get + "Month"]() + 1 : MD == "M" ? Date.monthNames[self[get + "Month"]() + ( MD4 ? 12 : 0 )] : single == "D" ? self[get + "Date"]() : MD == "D" ? Date.dayNames[self[get + "Day"]() + ( MD4 ? 7 : 0 )] : single == "H" ? self[get + "Hours"]() % 12 || 12 : single == "h" ? self[get + "Hours"]() : single == "m" ? self[get + "Minutes"]() : single == "s" ? self[get + "Seconds"]() : match == "S" ? self[get + "Milliseconds"]() : match == "SS" ? ( quote = self[get + "Milliseconds"](), quote > 99 ? quote : ( quote > 9 ? "0" : "00" ) + quote ) : match == "u" ? ( self / 1000 ) >>> 0 : match == "U" ? +self : match == "A" ? Date[self[get + "Hours"]() > 11 ? "pm" : "am"] : match == "Z" ? "GMT " + ( -self.getTimezoneOffset() / 60 ) : match == "w" ? self[get + "Day"]() || 7 : single == "W" ? ( quote = new Date(+self + ( ( 4 - ( self[get + "Day"]() || 7 ) ) * 86400000 )), Math.ceil(( ( quote.getTime() - quote["s" + get.slice(1) + "Month"](0, 1) ) / 86400000 + 1 ) / 7) ) : match == "o" ? new Date(+self + ( ( 4 - ( self[get + "Day"]() || 7 ) ) * 86400000 ))[get + "FullYear"]() : quote ? text.replace(unescapeRe, "$1") : match
                return pad && text < 10 ? "0" + text : text
            })
        }
        Date.am = "AM"
        Date.pm = "PM"
        Date.masks = {
            "default": "DDD MMM DD YYYY hh:mm:ss",
            "isoUtcDateTime": 'UTC:YYYY-MM-DD"T"hh:mm:ss"Z"'
        }
        Date.monthNames = "JanFebMarAprMayJunJulAugSepOctNovDecJanuaryFebruaryMarchAprilMayJuneJulyAugustSeptemberOctoberNovemberDecember".match(wordRe)
        Date.dayNames = "SunMonTueWedThuFriSatSundayMondayTuesdayWednesdayThursdayFridaySaturday".match(wordRe)
        //*/
        /*
         * // In Chrome Date.parse("01.02.2001") is Jan
         * n = +self || Date.parse(self) || ""+self;
         */
        String[proto].date = Number[proto].date = function (format) {
            var m, temp, d = new Date,
                n = +this || "" + this
            if (isNaN(n)) {
                // Big endian date, starting with the year, eg. 2011-01-31
                if (m = n.match(yearFirstRe)) d.setFullYear(m[1], m[2] - 1, m[3])
                else if (m = n.match(dateFirstRe)) {
                    // Middle endian date, starting with the month, eg. 01/31/2011
                    // Little endian date, starting with the day, eg. 31.01.2011
                    temp = Date.middle_endian ? 1 : 2
                    d.setFullYear(m[3], m[temp] - 1, m[3 - temp])
                }
                // Time
                m = n.match(timeRe) || [0, 0, 0]
                d.setHours(m[6] && m[1] < 12 ? +m[1] + 12 : m[5] && m[1] == 12 ? 0 : m[1], m[2], m[3] | 0, m[4] | 0)
                // Timezone
                if (m[7]) {
                    d.setTime(d - ( ( d.getTimezoneOffset() + ( m[8] | 0 ) * 60 + ( ( m[8] < 0 ? -1 : 1 ) * ( m[9] | 0 ) ) ) * 60000 ))
                }
            } else d.setTime(n < 4294967296 ? n * 1000 : n)
            return format ? d.format(format) : d
        }
    }(Date, "prototype");
    return {};
});

define('tiljs/apps/times/comments',[
        "module",
        "jquery",
        "json",
        "jsrender",
        "localstoragec",
        "../times/api",
        "../../comments",
        "../../ajax",
        "../../plugin/dynamic",
        "../../util",
        "../times/usermanagement",
        "../../event",
        "../../ui",
        "../../is",
        "../../string",
        "../../plugin/lazy",
        "../../cookie",
        "../../logger",
        "../../timer",
        "../../analytics/mytimes",
        "../../compatibility",
        "../../social/facebook",
        "../../page",
        "../../user",
        "../../ext/date",
        "primeuserhandler"
    ],
    function (module, $, json, jsrender, localstoragec, api, comments, ajax, dynamic, util, login, event, ui, is, string, lazy,
              cookie, logger, timer, mytimes, compatibility, facebook, page, userClass, ext_date, primeuserhandler) {
        //todo use plugin module for data-plugin

        var CONSTANT = {
            RATE_TYPE: {
                AGREE: 100,
                DISAGREE: 101,
                RECOMMEND: 102,
                OFFENSIVE: 103
            }
        };

        var default_config = {
//            post_url :function(){
//                var url = "/postro.cms";
//
//                if (document.location.host == "test.indiatimes.com") {
//                    url = "lib/postComment.php";
//                }
//                return url;
//            }(),
//            validate_url : function(){
//                var validate_url = "/validatecomment.cms";
//                if (document.location.host == "test.indiatimes.com" || document.location.host == "test.happytrips.com") {
//                    validate_url = "lib/validateComment.php";
//                }
//                return validate_url;
//            }(),
//            rate_url : "/ratecomment_new.cms",
            validation: {
                minlength: 1
            },
            loadCommentFromMytimes: false,
            commentType: "comments",
            loadonscroll: true,
            sendCommentLiveEmail: true,
            loginRequiredForRating: true,
            nonloggedinComment: true,
            disabledirectcomment: false,
            maxchar: 3000,
            maxCommentWrapLength: 500,
            maxResponseCount: 3,
            hideResponses: false,
            share_url: "/share.cms",
            verify_comment_url: "/json/cmtverified.cms",
            messages: {
                "name_required": "Please enter your name.",
                "login_required": "Please login to comment",
                "location_required": "Please enter your location.",
                "captcha_required": "Please enter captcha value.",
                "name_toolong": "Name cannot be longer than 30 chars.",
                "name_not_string": "Name can only contain alphabets.",
                "location_toolong": "Location cannot be longer than 30 chars.",
                "location_not_string": "Location can only contain alphabets.",
                "captcha_toolong": "Captcha cannot be longer than 4 chars.",
                "captcha_number_only": "Captcha value can only be a number.",
                "email_required": "Please enter your email address.",
                "email_invalid": "Please enter a valid email address.",
                "captcha_invalid": "Please enter a valid captcha value.",
                "minlength": "You can't post this comment as the length it is too short. ",
                "blank": "You can't post this comment as it is blank.",
                "maxlength": "You have entered more than 3000 characters.",
                "popup_blocked": "Popup is blocked.",
                "has_url": "You can't post this comment as it contains URL.",
                "duplicate": "You can't post this comment as it is identical to the previous one.",
                "abusive": "You can't post this comment as it contains inappropriate content.",
                "self_agree": "You can't Agree with your own comment",
                "self_disagree": "You can't Disagree with your own comment",
                "self_recommend": "You can't Recommend your own comment",
                "self_offensive": "You can't mark your own comment as Offensive",
                "already_agree": "You have already Agreed with this comment",
                "already_disagree": "You have already Disagreed with this comment",
                "already_recommended": "You have already Recommended this comment",
                "already_offensive": "You have already marked this comment Offensive",
                "cant_agree_disagree": "You can't Agree and Disagree with the same comment",
                "cant_agree_offensive": "You can't Agree and mark the same comment Offensive",
                "cant_disagree_recommend": "You can't Disagree and Recommend the same comment",
                "cant_recommend_offensive": "You can't Recommend and mark the same comment Offensive",
                "permission_facebook": "You can't post to facebook. Post permission is required.",
                "offensive_reason": "Please select a reason.",
                "offensive_reason_text": "Please enter a reason.",
                "offensive_reason_text_limit": "Please enter less than 200 chars."
            }
        };


        var times_comments = comments;
        times_comments.prototype.followee = [];
        

        comments.config = util.extend(true, {}, comments.config, default_config, module.config());

        times_comments.prototype.updateConfig = function (update_config) {
            //config = util.extend(true, config, update_config);
        };

//    login.init();

//        var isLoading = 0;
        var commentType = comments.config.commentType;
//        var curpg = 1;

        times_comments.prototype.initialize = function () {
            var tthis = this;
            this.config = util.extend(true, {}, comments.config, module.config(), this.config);
//            if (update_config) {
//                tthis.updateConfig(update_config);
//            }

            tthis.comments = [];
            tthis.commentCount = 0;
            tthis.countPresent = false;

            tthis.pageCount = 1;
//            tthis.commentsCacheDate = null;
//            tthis.commentsCacheUpdated = [];

            //todo move all this to config object
            tthis.config.comment_block_count = tthis.config.comment_block_count || 25;
            tthis.config.commentType = tthis.config.commentType || commentType;
//            tthis.config.attachInput = tthis.config.attachInput || true;
            tthis.config.attachReplyAction = tthis.config.attachReplyAction !== false;
            tthis.config.attachOpinionAction = tthis.config.attachOpinionAction !== false;

            if (tthis.config.disabledirectcomment) {
                $(tthis.config.wrapper + ' [data-plugin="comment-form"]').hide();
            }
            if (login.getUser()) {
                $(tthis.config.wrapper + " [data-plugin='user-isloggedin']").show();
                $(tthis.config.wrapper + " [data-plugin='user-notloggedin']").hide();
            }
            else {
                $(tthis.config.wrapper + " [data-plugin='user-isloggedin']").hide();
                $(tthis.config.wrapper + " [data-plugin='user-notloggedin']").show();
            }
            if (!tthis.config.nonloggedinComment && tthis.pageCount === 1) {
                $(tthis.config.wrapper + ' [data-plugin="user-notloggedin"]').remove();
            }

            tthis.config.opinions = [
                {name: "Agree", id: "agree"},
                {name: "Disagree", id: "disagree"},
                {name: "Recommend", id: "recommended"},
                {name: "Offensive", id: "offensive"}
            ];

//            if (tthis.config.attachInput === true) {
//                tthis.attachInput();
//            }

            if (tthis.config.attachOpinionAction === true) {
                tthis.attachOpinionAction();
            }

            if (tthis.config.attachReplyAction === true) {
                tthis.attachReplyAction();
            }

            this.getData(function (data, commentCount) {


                tthis.renderCommentCount(commentCount || (data ? data.length : 0));
                if (data && data.length > 0) {
                    tthis.renderNoComment(false);
                    tthis.render(data);
                } else {
                    tthis.renderNoComment(true);
                }

                tthis.verifyEmailComment();

            });

            (function (tthis) {
                event.subscribe("window.scroll", function () {//todo this wont work
                    var config = tthis.getConfig();
                    if (tthis.config.loadonscroll === true && tthis.isLoading === 0 && ui.inView(tthis.config.wrapper + " #" + tthis.config.commentType + " [data-plugin='comment']:visible:last", true, 200)) {  //todo remove li from here
                        tthis.loadComment(tthis.config.commentType, function (data) {

                        }, true, ++tthis.pageCount);
                    }
                });
            })(tthis);


//            tthis.onLoaded(function (comment_ref) {
//                tthis.loadSavedComment();
//            });


//            login.onStatusChange(function(){
//                tthis.loadSavedComment();
//            });
        };

        times_comments.run = function (config) {
            //Comments
            this.config = util.extend(true, {}, comments.config, module.config());
            var msid = config && config.msid ? config.msid : window.msid;//22655412;//27810093/*,channel = "toi"*/;
            var main = config && config.main ? config.main : "#" + this.config.commentType;//22655412;//27810093/*,channel = "toi"*/;
            var wrapper = config && config.wrapper ? config.wrapper : this.config.wrapper;//22655412;//27810093/*,channel = "toi"*/;
            var toi_comment = {};
            toi_comment[this.config.commentType] = new comments({main: main, msid: msid, wrapper: wrapper});
            toi_comment[this.config.commentType].initialize();

            $(wrapper + ' #comment_sort').change(function () {
                var rootid = $(this).val(),
                    id = "comments" + (rootid && rootid.length > 0 ? '_' + rootid : ""),
                    sortLbl = rootid.length ? rootid : "newest";

                $(wrapper + ' .comments-list').hide();
                $(wrapper + " #" + id).show();

                $(wrapper + ".comment-section .noComment").hide();

                if (toi_comment[id]) {
                    toi_comment[id].updateAfterCommentsLoaded();
                    toi_comment[id].attachReplyAction();
                    toi_comment[id].attachOpinionAction();
                    toi_comment[id].updateCachedRating();
                } else {
                    toi_comment[id] = new comments({
                        main: "#" + id,
                        msid: msid,
                        commentType: id,
                        wrapper: wrapper/*,attachReplyAction:false, attachOpinionAction:false*/
                    });
                    toi_comment[id].initialize();
                }
                event.publish("comment.sort", sortLbl);
                event.publish("comments.sortby", {rootid: rootid, msid: msid});
                $(wrapper + " [data-plugin='comment-error-outer']").text("");
                $(wrapper + " [data-plugin='comment-error']").text("");
                event.publish("comment_error");
            });


            toi_comment[this.config.commentType].processRating();

            (function (that) {
                event.subscribe("user.status", function () {
                    toi_comment[that.config.commentType].processRating(that);
                });
            }(this))


            event.subscribe("comments.loaded", function (commentObj) {
                logger.log("comments.loaded:" + commentObj.config.commentType);
                commentObj.updateAfterCommentsLoaded();
                if (commentObj.config.hideResponses === true) {
                    commentObj.hideExtraResponses();
                }
            });

            event.subscribe("comments.loaded.none", function (commentObj) {
                logger.log("comments.loaded.none:" + commentObj.config.commentType);
                commentObj.updateAfterCommentsLoaded();
            });

            event.subscribe("login.error", function (err) {
                if (err && err.error) {
                    logger.error(err.error);
                } else {
                    logger.error(err);
                }
            });

            return toi_comment;
        };

        times_comments.prototype.processRating = function () {
            var user = login.getUser();
            if (!user) {
                $(this.config.wrapper + " [data-plugin='comment-error-outer']").text("");
                $(this.config.wrapper + " [data-plugin='comment-error']").text("");
                event.publish("comment_error");
            }
            var commenttype = "comments" + ($(this.config.wrapper + ' #comment_sort').length && $(this.config.wrapper + ' #comment_sort').val() !== '' ? '_' + $(this.config.wrapper + ' #comment_sort').val() : "");
            // callback to get user rating from mytimes
            if (user && this && this.config && this.config.withrating) {
                //var tthis = toicomment[commenttype];
                var savedComment = this.getSavedComment();
                var usr_data = {};
                usr_data.userId = user.getId();
                usr_data.baseEntityId = 0;
                usr_data.uniqueAppKey = this.config.withrating;
                usr_data.appKey = page.getChannel();
                $.getJSON("https://myt.indiatimes.com/mytimes/alreadyRated?callback=?", usr_data, function (data) {
                    event.publish("comments.user_has_rated", data);
                    if (window.msid == this.config.msid && this.getSavedComment()) {
                        data = (data && data != '') ? data : ' ';
                        savedComment.urs = data;
                        this.saveComment(savedComment);
                        this.loadSavedComment();
                    }
                });
            }

            this.markFollowingAll(); //Added by Amit
        };

        //Todo remove from prototype
        times_comments.prototype.attachUserToComment = function (commentObj, user) {
            logger.log("Attaching user to comment");
            commentObj.user = {
                "id": user.getId(),
                "uid": user.getId() ? user.getUid() : '',
                "name": user.getFullName(),
                "username": user.getUsername(),
                "location": user.getCITY(),
                "image": user.getThumb(),
                "email": user.getEmail()
//                    "followers": user.getFollowersCount(),
//                    ,"badge": [],  //todo
//                    "opinion": [],//todo
//                    "points": 1205,     //todo
//                    "pointslevel": "Silver"   //todo
            };
        };

        times_comments.prototype.hideExtraResponses = function () {
            var ttthis = this;
            $($(this.config.wrapper + " #" + this.config.commentType + " .comment-box.level1").get().reverse()).each(function (i, v) {
                // $(".comment-box.level1").get().reverse().each(function(i,v){
                var tc = $(this);
                var tc_level = tc.data("level");
                var tc_next = tc.next();
                if (is.numberOnly(tc_next.data("level"))) {
                    var response_cnt = 0;
                    while ((tc_next.data("level") != tc_level) && (tc_next.is(":hidden")) && (i < ttthis.config.comment_block_count)) {
                        if (response_cnt == ttthis.config.maxResponseCount) {
                            tc_next.before('<div class="show_all_responses comment-box level' + (tc_level + 1) + '" data-level="' + tc_level + '" data-action="all_responses"> Show all responses </div>');
                            break;
                        } else {
                            tc_next.slideDown();
                            tc_next = tc_next.next();
                            if (!is.numberOnly(tc_next.data("level"))) {
                                break;
                            }
                        }
                        response_cnt++;
                    }
                }
            });
        };

        times_comments.prototype.updateAfterCommentsLoaded = function () {
            var commentObj = this;
            if (this.pageCount === 1) {
                if (commentObj.config.commentType === this.config.commentType) {
                    if (commentObj.comments.length > 0) {
                        logger.log("updateAfterCommentsLoaded : comments.loaded:" + commentObj.config.commentType);
                        $(commentObj.config.wrapper + ".comment-section .sortby").show();
                        $(commentObj.config.wrapper + ".comment-section .noComment").hide();
                    } else {
                        logger.log("updateAfterCommentsLoaded : comments.loaded.none:" + commentObj.config.commentType);
                        $(commentObj.config.wrapper + ".comment-section .sortby").hide();
                        $(commentObj.config.wrapper + ".comment-section .noComment").text("Be the first one to review.").show();
                    }
                }

                if (commentObj.countPresent !== true) {
                    logger.log("updateAfterCommentsLoaded : countPresent:false:" + commentObj.config.commentType);
                    if (commentObj.comments.length === 0) {
                        $(commentObj.config.wrapper + ".comment-section .noComment").text("Be the first one to review.").show();
                    } else if (commentObj.config.commentType === "comments_discussed") {
                        $(commentObj.config.wrapper + ".comment-section .noComment").text("None of the comments have been discussed.").show();
                    } else if (commentObj.config.commentType === "comments_agree") {
                        //$(commentObj.config.wrapper + ".comment-section .noComment").text("None of the comments have been up voted.").show();
                    } else if (commentObj.config.commentType === "comments_disagree") {
                        $(commentObj.config.wrapper + ".comment-section .noComment").text("None of the comments have been down voted.").show();
                    }
                }
            }
        };

        times_comments.prototype.renderCommentCount = function (count) {
            var tthis = this;

            function displayCount(type, cnt) {
                //$("[data-plugin='comment-count" + (type ? "-" + type : "") + "']").text(cnt ? cnt : "0");
                $(tthis.config.wrapper + " [data-plugin='comment-count" + (type ? "-" + type : "") + "']").text(cnt ? cnt : "0");
                event.publish("comment.count", (cnt ? cnt : "0"));
            }

            if (is.object(count)) {
                displayCount("", count.newest);
                displayCount("oldest", count.oldest);
                displayCount("recommended", count.recommended);
                displayCount("discussed", count.discussed);
                displayCount("agree", count.agree);
                displayCount("disagree", count.disagree);
            } else {
                displayCount("", count);
            }
        };


        /**
         *
         * @param commentType newest(default),oldest,recommended,discussed,agree,disagree
         * @param callback
         * @param append true if comments visible are not to be cleaned
         * @param curpg
         */
        times_comments.prototype.loadComment = function (commentType, callback, append, curpg) {
            var tthis = this;
            if (tthis.config.loadCommentFromMytimes == true) {
                tthis._loadCommentMytimes(commentType, function (data) {
                    tthis.render(data, callback, append);
                }, curpg);
            } else {
                tthis._loadComment(commentType, function (data) {
                    tthis.render(data, callback, append);
                }, curpg);
            }
        };

        times_comments.prototype.getData = function (callback) {
            var tthis = this;
            if (tthis.config.loadCommentFromMytimes == true) {
                this._loadCommentMytimes(this.config.commentType, callback);
            } else {
                this._loadComment(this.config.commentType, callback);
            }
        };

        times_comments.prototype._loadComment = function (commentType, callback, curpg) {
            var tthis = this;
            var config = tthis.config;//getConfig();
            tthis.loading();

//        var _comments_url = comments_url(config.msid);
            logger.log("loading comments: " + config.msid);
            api.api(commentType, {
                msid: config.msid,
                curpg: curpg || 1/*,channel:config.channel*/
            }, function (comments_data) {
//                tthis.loading(50);

                logger.log("loaded comments: " + config.msid);
                var commentsD = comments_data.articlecomment
                    || comments_data.new_cmtofart2_nit
                    || comments_data.new_cmtofart2_nit_v1
                    || comments_data.articleshow_othcmtofart
                    || comments_data.new_cmtofart2_nit_sub_dev || (comments_data.mytuserdata ? comments_data : null);
//                tthis.commentsCacheDate = tthis.commentsCacheDate || (commentsD.tdate&&commentsD.tdate.date?commentsD.tdate.date:logger.warn("Comments do not have tdate."));

                var userData = commentsD.mytuserdata && commentsD.mytuserdata['array'] ? (is.array(commentsD.mytuserdata['array']) ? commentsD.mytuserdata['array'] : [commentsD.mytuserdata['array']]) : null;
//                var commentCount = commentsD.rothrd ? commentsD.rothrd.opctr : null;
                var commentsData = commentsD.rothrd && commentsD.rothrd.op ? (is.array(commentsD.rothrd.op) ? commentsD.rothrd.op : [commentsD.rothrd.op]) : null;
                if (!commentsData || commentsData.length == 0) {
                    tthis.loadedAll();
                    callback([]);
                    return null;
                }

                tthis.flagData = commentsData[0];
                var commentCount = {
                    total: commentsD.rothrd.opctr,
                    newest: commentsD.rothrd.opctr,
                    oldest: commentsD.rothrd.opctr,
                    recommended: commentsD.rothrd.recommendcount,
                    discussed: commentsD.rothrd.opctrtopcnt, // total top level comments
                    disagree: commentsD.rothrd.disagreecount,
                    agree: commentsD.rothrd.agreecount
                };
                var commentPageCount = {
                    comments: Math.ceil(commentsD.rothrd.opctrtopcnt / config.comment_block_count),
                    comments_oldest: Math.ceil(commentsD.rothrd.opctrtopcnt / config.comment_block_count),
                    comments_recommended: Math.ceil(commentsD.rothrd.recommendcount / config.comment_block_count),
                    comments_discussed: Math.ceil(commentsD.rothrd.opctrtopcnt / config.comment_block_count),
                    comments_disagree: Math.ceil(commentsD.rothrd.disagreecount / config.comment_block_count),
                    comments_agree: Math.ceil(commentsD.rothrd.agreecount / config.comment_block_count)
                };

                var users = [];//getUsers(commentsData);
//                console.log("---------------------");
                var i = 0;
                if (userData) {
                    for (i = 0; i < userData.length; i++) {
                        users.push(userData[i].sso);
                    }
                }

                var commentsResult = [];

                for (var c = 0; c < commentsData.length; c++) {
                    var cmt = commentsData[c];
                    var user = userData ? userData[users.indexOf(cmt.roaltdetails.fromaddress)] : null;
                    var optext = cmt.optext;
                    optext = (typeof optext === "object") && optext.hasOwnProperty('content') ? String(optext.content) : optext;
                    var comment = {
                        index: ++tthis.commentCount,
                        id: cmt.messageid,
                        comment: is.string(optext) ? $("<div/>").text(optext).html() : "",
                        level: cmt.level,
                        childcount: cmt.CHILD ? cmt.CHILD.length : 0,
                        parentuid: cmt.parentuid,
                        parentusername: cmt.parentusername,
                        time: cmt.rodate ? util.getDate(cmt.rodate).getTime() : "",//1384934349412,    //cmt.rodate //19 Nov, 2013 01:04 PM
                        abstime: cmt.rodate,
                        opinion: (function (cmt) {
                            var opinions = [];
                            if (tthis.config.opinions) {
                                for (var o = 0; o < tthis.config.opinions.length; o++) {
                                    opinions.push({
                                        name: tthis.config.opinions[o].name,
                                        id: tthis.config.opinions[o].id,
                                        count: cmt[tthis.config.opinions[o].id]
                                    });
                                }
                            }
                            return opinions.length > 0 ? opinions : null;
                        }(cmt)),

                        user: {
                            //TODO fix multiple condition check ,user tthis.attachUserToComment(comment,user);
                            id: user && user._id ? user._id : cmt.roaltdetails.fromname,
                            username: user ? user.D_N_U : null,
                            name: cmt.roaltdetails.fromname || (user && user.FL_N ? user.FL_N : ""),    //name used from comment because name in replies to does not match user name in mytimes
                            location: user && user.CITY && !is.object(user.CITY) && !is.empty(user.CITY) ? user.CITY : (!is.empty(cmt.roaltdetails.location) && !is.object(cmt.roaltdetails.location) ? cmt.roaltdetails.location : null),
                            image: user && user.thumb ? user.thumb : cmt.roaltdetails.imageurl,
                            email: user ? user.sso : "",
                            rate: cmt.roaltdetails.urs,
                            followers: user ? user.F_C : 0,
                            follower_text: (user ? user.F_C : 0) > 1 ? ('(' + user.F_C + ' followers)') : ((user ? user.F_C : '') > 0 ? '(' + user.F_C + ' follower)' : ''),
                            points: user && user.reward && user.reward.user && user.reward.user.statusPoints ? user.reward.user.statusPoints : null,
                            pointslevel: user && user.reward && user.reward.user && user.reward.user.levelName ? user.reward.user.levelName : null,
                            pointsNeeded: (function (user) {
                                var points_needed = '';
                                var user_points = user && user.reward && user.reward.user && user.reward.user.statusPoints ? user.reward.user.statusPoints : null;
                                if (user_points == null || user_points < 250) {
                                    points_needed = 250 - user_points;
                                } else if (user_points > 249 && user_points < 5000) {
                                    points_needed = 5000 - user_points;
                                } else if (user_points > 4999 && user_points < 25000) {
                                    points_needed = 25000 - user_points;
                                } else if (user_points > 24999 && user_points < 250000) {
                                    points_needed = 250000 - user_points;
                                }
                                return points_needed;
                            }(user)),

                            badge: (function (user) {
                                var badges = [];
                                if (user && user.rewardpoint && user.rewardpoint.userbadges && user.rewardpoint.userbadges.activityBadge) {
                                    var activityBadge = user.rewardpoint.userbadges.activityBadge;
                                    if (!is.array(activityBadge)) { // Backend gives object when length = 1, converting ot array
                                        activityBadge = [activityBadge];
                                    }
                                    for (var d = 0; d < activityBadge.length; d++) {  //todo remove loop
                                        var badge = activityBadge[d].currentBadge;
                                        badges.push({
                                            name: badge.bname,
                                            count: badge.level,
                                            image: badge.bimg,
                                            desc: badge.desc,
                                            levelDesc: util.decodeHTML(badge.levelDesc)
                                        });
                                    }
                                }
                                return badges.length > 0 ? badges : null;
                            }(user))

                        }
                    };

                    commentsResult.push(comment);
//                        if( c > 10){
//                            break;
//                        }
                    logger.log("Parsed comment " + c);
                }

                tthis.comments = tthis.comments.concat(commentsResult);

                logger.log("rendering  " + commentsResult.length + " comments");
                callback(commentsResult, commentCount);
                logger.log("rendered " + commentsResult.length + " comments");

                tthis.loaded();
                var curpgn = curpg || 1;
                if (tthis.config.loadonscroll == false && !commentsResult || !(curpgn < commentPageCount[tthis.config.commentType])) {
                    tthis.loadedAll();
                } else if (tthis.config.loadonscroll == true && !commentsResult || commentsResult.length == 0) {
                    tthis.loadedAll();
                }

            });

            return null;
        };


        times_comments.prototype.parseComment = function (cmt, commentsResult, level) {
            var ttthis = this;
            var activePrimeUserPrcArr = [1,3,4,5,8];
            var user = cmt.user_detail || {
                    FL_N: cmt.A_D_N || cmt.F_NAME,
                    CITY: cmt.CITY
                };
            user.reward = {user: cmt.user_reward};
            user.rewardpoint = {userbadges: cmt.user_reward_point_info};
            user.rate = cmt && cmt.U_R ? cmt.U_R : '';
            // Add prime flag for user
            user.isPrime = cmt.user_detail && cmt.user_detail.U_P_S && activePrimeUserPrcArr.indexOf(parseInt(cmt.user_detail.U_P_S)) !== -1? true: false;
            var tthis = this;

            level = level || 1;

            var comment = {
                index: ++tthis.commentCount,
                id: cmt.A_U_I,
//                comment: cmt.C_T , //is.string(cmt.C_T) ? $("<div/>").text(cmt.C_T).html() : "",
                comment: is.string(cmt.C_T) ? $("<div/>").html(cmt.C_T).text() : "",
                trimcom: (function (cmt) {
                    var t_c = is.string(cmt.C_T) ? $("<div/>").html(cmt.C_T).text() : "";
                    return util.trimText(t_c, ttthis.config.maxCommentWrapLength);
                }(cmt)),
                authrid: (cmt.C_A_ID ? cmt.C_A_ID : ""),
                level: level,
                parentuid: cmt.O_ID,
                childcount: cmt.CHILD ? cmt.CHILD.length : 0,
                parentusername: cmt.O_D_N || cmt.F_NAME,
                time: (cmt.A_DT ? util.getDate(parseInt(cmt.A_DT, 10)).getTime() : ""),//1384934349412,    //cmt.rodate //19 Nov, 2013 01:04 PM
                abstime: cmt.A_DT ? util.getDate(parseInt(cmt.A_DT, 10)).format("DD MMM, YYYY HH:mm A") : "",
                opinion: (function (cmt) {
                    var opinions = [];

                    opinions.push({name: "Agree", id: "AC_A_C", count: (cmt.AC_A_C) ? cmt.AC_A_C : 0});
                    opinions.push({name: "Disagree", id: "AC_D_C", count: (cmt.AC_D_C) ? cmt.AC_D_C : 0});
                    opinions.push({name: "Recommend", id: "AC_R_C", count: (cmt.AC_R_C) ? cmt.AC_R_C : 0});
                    opinions.push({name: "Offensive", id: "AC_O_C", count: (cmt.AC_O_C) ? cmt.AC_O_C : 0});

                    return opinions.length > 0 ? opinions : null;
                }(cmt)),

                user: {
                    //TODO fix multiple condition check ,user tthis.attachUserToComment(comment,user);
                    id: user && user._id ? user._id : null,
                    username: user && user.D_N_U ? user.D_N_U : null,
                    name: user && user.FL_N ? user.FL_N : "",    //name used from comment because name in replies to does not match user name in mytimes
                    location: user && user.CITY && !is.object(user.CITY) && !is.empty(user.CITY) && (user.CITY != "Unknown") ? user.CITY : null,
                    image: user && user.thumb ? user.thumb : "",
                    email: user && user.sso ? user.sso : "",
                    rate: user && user.rate ? user.rate : "",
                    followers: user && user.F_C ? user.F_C : 0,
                    isPrime: user.isPrime,
                    follower_text: (user ? user.F_C : 0) > 1 ? ('(' + user.F_C + ' followers)') : ((user ? user.F_C : '') > 0 ? '(' + user.F_C + ' follower)' : ''),
                    points: user && user.reward && user.reward.user && user.reward.user.statusPoints ? user.reward.user.statusPoints : null,
                    pointslevel: user && user.reward && user.reward.user && user.reward.user.levelName ? user.reward.user.levelName : null,
                    pointsNeeded: (function (user) {
                        var points_needed = '';
                        var user_points = user && user.reward && user.reward.user && user.reward.user.statusPoints ? user.reward.user.statusPoints : null;
                        if (user_points == null || user_points < 250) {
                            points_needed = 250 - user_points;
                        } else if (user_points > 249 && user_points < 5000) {
                            points_needed = 5000 - user_points;
                        } else if (user_points > 4999 && user_points < 25000) {
                            points_needed = 25000 - user_points;
                        } else if (user_points > 24999 && user_points < 250000) {
                            points_needed = 250000 - user_points;
                        }
                        return points_needed;
                    }(user)),

                    badge: (function (user) {
                        var badges = [];
                        if (user && user.rewardpoint && user.rewardpoint.userbadges && user.rewardpoint.userbadges.activityBadge) {
                            var activityBadge = user.rewardpoint.userbadges.activityBadge;
                            if (!is.array(activityBadge)) { // Backend gives object when length = 1, converting ot array
                                activityBadge = [activityBadge];
                            }
                            for (var d = 0; d < activityBadge.length; d++) {  //todo remove loop
                                var badge = activityBadge[d].currentBadge;
                                badges.push({
                                    name: badge.bname,
                                    count: badge.level,
                                    image: badge.bimg,
                                    desc: badge.desc,
                                    levelDesc: util.decodeHTML(badge.levelDesc)
                                });
                            }
                        }
                        return badges.length > 0 ? badges : null;
                    }(user))

                }
            };
            commentsResult.push(comment);

            if (cmt.CHILD) {
                for (var cmtChild in cmt.CHILD) {
                    tthis.parseComment(cmt.CHILD[cmtChild], commentsResult, level + 1);
                }
            }

        };

        times_comments.prototype._loadCommentMytimes = function (commentType, callback, curpg) {
            var tthis = this;
            var config = tthis.config;//getConfig();
            tthis.loading();

//        var _comments_url = comments_url(config.msid);
            logger.log("loading comments: " + config.msid);
            api.api(commentType, {
                msid: config.msid,
                pagenum: curpg || 1/*,channel:config.channel*/
            }, function (comments_data) {
//                tthis.loading(50);

                logger.log("loaded comments: " + config.msid);
                var commentsData = comments_data;
//                tthis.commentsCacheDate = tthis.commentsCacheDate || (commentsData.tdate&&commentsData.tdate.date?commentsD.tdate.date:logger.warn("Comments do not have tdate."));

                if (!commentsData || commentsData.length == 0) {
                    tthis.loadedAll();
                    callback([]);
                    return null;
                }

                tthis.flagData = commentsData[0];
                var commentCount = {
                    total: commentsData[0].totalcount,
                    newest: commentsData[0].totalcount,
                    oldest: commentsData[0].totalcount,
                    recommended: commentsData[0].totalcount,
                    discussed: commentsData[0].totalcount,
                    disagree: commentsData[0].totalcount,
                    agree: commentsData[0].totalcount
                };
//                var commentCount = {
//                    total: commentsD.rothrd.opctr,
//                    newest: commentsD.rothrd.opctr,
//                    oldest: commentsD.rothrd.opctr,
//                    recommended: commentsD.rothrd.recommendcount,
//                    discussed: commentsD.rothrd.opctrtopcnt, // total top level comments
//                    disagree: commentsD.rothrd.disagreecount,
//                    agree: commentsD.rothrd.agreecount
//                };
                var commentPageCount = {
                    comments: Math.ceil(commentCount.newest / config.comment_block_count),
                    comments_oldest: Math.ceil(commentCount.oldest / config.comment_block_count),
                    comments_recommended: Math.ceil(commentCount.recommended / config.comment_block_count),
                    comments_discussed: Math.ceil(commentCount.discussed / config.comment_block_count),
                    comments_disagree: Math.ceil(commentCount.disagree / config.comment_block_count),
                    comments_agree: Math.ceil(commentCount.agree / config.comment_block_count)
                };

//                var users = [];//getUsers(commentsData);
////                console.log("---------------------");
//                var i = 0;
//                if (userData) {
//                    for (i = 0; i < userData.length; i++) {
//                        users.push(userData[i].sso);
//                    }
//                }

                var commentsResult = [], priorityComments=[];
                
                if(commentsData && commentsData[0]['priorityComment'] && commentsData[0]['priorityComment'].length > 0){
                        var cmnts = commentsData[0]['priorityComment'];
                        for (var c = 0; c < cmnts.length; c++) {
                                var cmt = cmnts[c];
                                var reason = null;
            
                                if (cmt.DLT == 1) {
                                    reason = "DLT fail";
                                } else if (is.empty(cmt.C_T)) {
                                    reason = "Blank fail";
                                }
                                if (reason) {
                                    logger.log("Not Parsed " + reason + " comment " + c);
                                } else {
                                    tthis.parseComment(cmt, priorityComments);
                                    logger.log("Parsed comment " + c)
                                }
                            }
                    }

                for (var c = 1; c < commentsData.length; c++) {
                    var cmt = commentsData[c];
                    var reason = null;

                    if (cmt.DLT == 1) {
                        reason = "DLT fail";
                    } else if (is.empty(cmt.C_T)) {
                        reason = "Blank fail";
                    }
                    if (reason) {
                        logger.log("Not Parsed " + reason + " comment " + c);
                    } else {
                        tthis.parseComment(cmt, commentsResult);
                        logger.log("Parsed comment " + c)
                    }
                }

                tthis.countPresent = commentsData[0].countPresent || false;
                tthis.comments = tthis.comments.concat(commentsResult);
                tthis.priorityComments = priorityComments;

                logger.log("rendering  " + commentsResult.length + " comments");
                callback(commentsResult, commentCount);
                logger.log("rendered " + commentsResult.length + " comments");

                tthis.loaded();
                var curpgn = curpg || 1;
                if (tthis.config.loadonscroll == false && !commentsResult || !(curpgn < commentPageCount[tthis.config.commentType])) {
                    tthis.loadedAll();
                } else if (tthis.config.loadonscroll == true && !commentsResult || commentsResult.length == 0) {
                    tthis.loadedAll();
                }

            });

            return null;
        };
        function replaceAll(find, replace, str) {
            return str.replace(new RegExp(find, 'g'), replace);
        }


        var domain = "http://jcmsdev.indiatimes.com";

        var getUsers = function (data) {
            var ssoids = {};
            for (var i = 0; i < data.length; i++) {
                ssoids[(data[i].roaltdetails.fromaddress)] = {};
            }
            return ssoids;
        };


        times_comments.prototype.postToSocial = function (message, sites, closeCallback) {
            var tthis = this;
            var domainOnly = util.getDomainOnly();

            var user = login.getUser();

            window.newShare = true;
            window.newShareData = {
//                site:"facebook",
                sites: sites,
                message: message,
                link: window.facebooklink || page.getMeta('og:url'),
                title: window.facebookktitle || page.getMeta('og:title'),
                domain: window.location.host,
                picture: window.fb_Img || page.getMeta('og:image'),
                desc: window.facebooksyn || page.getMeta('og:description'),
                facebook: user ? user.facebook : null,
                twitter: user ? user.twitter : null
            };

            /******************Comment Share on FB*****************/
            if (-1 != window.newShareData.sites.indexOf('facebook')) {
                if (typeof FB == 'undefined') {
                    require(["tiljs/social/facebook", "tiljs/event"], function (facebook, event) {
                        // Load FB sdk if it's not loaded
                        facebook.init({init: true, parse: true});
                        //Open FB feed dialog to post comment once sdk is loaded
                        event.subscribe("FB.onload", function (data) {
                            tthis.postToFB(window.newShareData);
                        });
                    });
                } else {
                    tthis.postToFB(window.newShareData);
                }
                sites = sites.replace(/facebook,|facebook/g, "");
                window.newShareData.sites = sites;
            }
            if (!sites.length) {
                return true;
            }
            /*****************************************************/

            var url = tthis.config.share_url + "?sites=" + sites;
            var socialPost = ui.window(url, {
                width: 600,
                height: 230,
                name: "socialPost",
                closeCallback: closeCallback
            });
            if (socialPost) {
                try {
                    socialPost.moveTo(250, 240);
                } catch (e) {
                    logger.log("Handled IE Exception.");
                    logger.error(e);
                }
            } else {
//                window.popupblocked = 1;
//                if(is.desktop()){
//                    twitterPost = ui.iframe(url, {width: 575, height: 314, name: "twitterPost", closeCallback: closeCallback});
//                }else{
                logger.error("Popups are blocked. Please enable them.");
//                }
            }
        };

        times_comments.prototype.postToFB = function (data) {
            FB.ui({
                method: 'feed',
                message: data.message,
                name: data.title,
                link: data.link,
                picture: data.picture,
                caption: data.domain,
                description: data.desc
            });
        };

        times_comments.prototype.postToTwitter = function (message, closeCallback) {
            var domainOnly = util.getDomainOnly();

            if (message.length > 100) {
                message = message.substring(0, 99) + "...";
            }

            window.log = window.log || function () {
                };
            window.popupblocked = 0;
            cookie.remove("fbcheck", "/", domainOnly);
            cookie.remove("twtcheck", "/", domainOnly);

            cookie.set("twtcheck", "1", 1, "/", domainOnly);
            cookie.set("usercomt", message, 1, "/", domainOnly);

            var url = "/stgredirectpagetest.cms";
            var twitterPost = ui.window(url, {
                width: 600,
                height: 230,
                name: "twitterPost",
                closeCallback: closeCallback
            });
            if (twitterPost) {
                twitterPost.moveTo(250, 240);
            } else {
                window.popupblocked = 1;
                if (is.desktop()) {
                    twitterPost = ui.iframe(url, {
                        width: 575,
                        height: 314,
                        name: "twitterPost",
                        closeCallback: closeCallback
                    });
                } else {
                    alert("Popups are blocked. Please enable them.");
                }
            }


//            var url = "https://twitter.com/share?text=" + message + "&url=" + document.location.href;
//            var twitterPost = ui.window(url, {width: 750, height: 500, name: "twitterPost", closeCallback: closeCallback});
//            if(twitterPost){
//                try{//Not working in IE10 - TOIPR-5367
//                    twitterPost.moveTo(275, 275);
//                }catch(e){
//                    logger.warn("Exception handled for IE10");
//                    logger.error(e);
//                }
//            }else{
//                if(is.desktop()){
//                    ui.iframe(url, {width: 750, height: 500, name: "twitterPost", closeCallback: closeCallback});
//                }else{
//                    alert("Popups are blocked. Please enable them.");
//                }
//            }
        };

        times_comments.prototype.postToFacebook = function (message, closeCallback) {
            var domainOnly = util.getDomainOnly();
            var tthis = this;

            //todo remove cookie use
            if (window.localStorage) {
                localStorage.setItem("usercomt", message);
            }

            window.log = window.log || function () {
                };
            window.popupblocked = 0;
            cookie.remove("fbcheck", "/", domainOnly);
            cookie.remove("twtcheck", "/", domainOnly);

            cookie.set("fbcheck", "1", 1, "/", domainOnly);
            cookie.set("usercomt", message, 1, "/", domainOnly);

            var url = "/stgredirectpagetest.cms";
//            facebook.getPermissions("publish_stream",function(got_permission){
//                if(got_permission === true){
            var facebookPost = ui.window(url, {
                width: 600,
                height: 230,
                name: "facebookPost",
                closeCallback: closeCallback
            });
            if (facebookPost) {
                facebookPost.moveTo(250, 240);
            } else {
                window.popupblocked = 1;
                if (is.desktop()) {
                    facebookPost = ui.iframe(url, {
                        width: 575,
                        height: 314,
                        name: "facebookPost",
                        closeCallback: closeCallback
                    });
                } else {
                    alert("Popups are blocked. Please enable them.");
                }
            }
//                }   else{
//                    tthis.error(config.messages.permission_facebook);
//                }
//            });


            /*
             if (window.FB) {  //todo use facebook plugin
             FB.ui({
             method: "stream.publish",
             message: message,
             attachment: {media: [
             {type: "image", href: window.facebooklink, src: window.fb_Img}
             ], name: window.facebookktitle,
             caption: "timesofindia.indiatimes.com",
             description: window.facebooksyn,
             href: window.facebooklink},
             user_message_prompt: "What's on your mind?"}, function (d) {
             //                    if (d && d.post_id) {
             //                    } else {
             //                    }
             });
             }else{
             logger.warn("'window.FB' is not defined. Will try again after 2secs.");
             timer.available("FB",function(FB){
             if(FB){
             toi_comments.postToFacebook(message);
             }else{
             logger.error("'window.FB' is not defined. Giving up.");
             }
             },3000, 10);
             }     */
        };

        times_comments.prototype.attachOpinionAction = function () {
            logger.log("Attaching Opinion Action");
            var tthis = this;
            var opinions = this.config.opinions;

            for (var o = 0; o < opinions.length; o++) {
                var opinion = opinions[o];
                (function (opinion) {
                    $(tthis.config.wrapper).off("click", "[data-action='comment-" + opinion.id + "']");
                    $(tthis.config.wrapper).on("click", "[data-action='comment-" + opinion.id + "']", function () {
                        var ref = ui.getActionReferences(this, tthis.config.comment);
                        var parent = ref.parent;

                        var opinionid = parent.attr("data-id");
                        //rateAgree, rateDisagree, rateRecommend, rateOffensive
                        (function (tthis, parent, opinion, ref) {
                            tthis["rate" + opinion.name](opinionid, function (errMsg) {
                                if (errMsg) {
                                    tthis.error(errMsg, ref["comment-error-outer"]);
                                } else {
                                    tthis.error("", ref["comment-error-outer"]);
                                    var count_ele = parent.find("[data-plugin='comment-" + opinion.id + "-count']");
                                    var currentCount = parseInt(count_ele.text(), 10);
                                    var $bottomCommentsOpinionElement = $('.bottom-comments .comment-box[data-id="' + parent.attr('data-id') + '"] .footer [data-action="comment-' + opinion.id + '"]');
                                    $(count_ele).text(++currentCount);
                                    if ($bottomCommentsOpinionElement.length) {
                                        $bottomCommentsOpinionElement.find('.count').text(currentCount);
                                    }
                                }
                            }, ref);
                        }(tthis, parent, opinion, ref));
                        event.publish("comment.opinion", opinion.id);
                        return false;
                    });
                }(opinion))
            }

            $(tthis.config.wrapper).off('focus', '[data-plugin="comment-input"]');
            $(tthis.config.wrapper).on('focus', '[data-plugin="comment-input"]', function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                if (ref["comment-form"] && !ref["comment-form"].hasClass('full')) {
                    ref["comment-form"].addClass("full");
                } else if (ref["comment-reply"] && !ref["comment-reply"].hasClass('full')) {
                    ref["comment-reply"].addClass("full");
                }
                setcaptcha(ref);
            });


            $(tthis.config.wrapper).off("focus", "[data-plugin='get-user-name']");
            $(tthis.config.wrapper).on("focus", "[data-plugin='get-user-name']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                if (ref["comment-form-login"]) {
                    ref["comment-form-login"].removeClass("noreg");
                    setcaptcha(ref);
                }
            });
            $(tthis.config.wrapper).on("mouseover", ".badges .more-btn", function (event) {
                var elemTop = $(event.target).closest('.comment-box').position().top + $(event.target).closest('.comment-box').closest('.comment-box').height(),
                    elemH = $(event.target).find('.popup_badge').height(),
                    wH = $(window).height(),
                    commentScrollPos = 0
                // $('[data-plugin="offensive_popup"]').hide();
                $(event.target).find('.popup_badge').removeClass('popup_above');

                if (((elemTop - commentScrollPos) + elemH) > wH) {
                    $(event.target).find('.popup_badge').addClass('popup_above');
                }
                $(event.target).find('.popup_badge').show();
            });

            $(tthis.config.wrapper).on("mouseout", ".badges .more-btn", function (event) {

                $(event.target).find('.popup_badge').hide();
            });


            function setcaptcha(ref) {
                var $set_user_captcha = ref['set-user-captcha'];
                if ($set_user_captcha && $set_user_captcha.text().length == 0) {
                    $set_user_captcha.text(Math.floor((Math.random() * 10)) + "+" + Math.floor((Math.random() * 10)) + "=");
                }
            }

            $(tthis.config.wrapper).off("click", "[data-action='offensive_popup_submit']");
            $(tthis.config.wrapper).on("click", "[data-action='offensive_popup_submit']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                var opinionid = ref.parent.attr("data-id");
                var reason = null;
                reason = ref.offensive_popup.find("input:checked").val();

                if (!reason) {
                    tthis.error(tthis.config.messages.offensive_reason, ref["comment-offensive-error"]);
                } else if (reason == "Others") {
                    var reasonVal = ref.offensive_popup_reason.val().trim();
                    if (!reasonVal || reasonVal == "") {
                        tthis.error(tthis.config.messages.offensive_reason_text, ref["comment-offensive-error"]);
                        reason = null;
                    } else {
                        if (reasonVal.length > 200) {
                            tthis.error(tthis.config.messages.offensive_reason_text_limit, ref["comment-offensive-error"]);
                            reason = null;
                        } else {
                            reason = "Others" + ": " + reasonVal;
                        }
//                        tthis.rateOffensive(opinionid,function(errMsg){
//                            if (errMsg) {
//                                tthis.error(errMsg, ref["comment-offensive-error"]);
//                            } else {
//                                tthis.error("", ref["comment-offensive-error"]);
//
//                                if(ref.parent){
//                                    ref.parent.find("[data-action='comment-offensive-already']").show();
//                                    ref.parent.find("[data-action='comment-offensive']").hide();
//                                }
//
//                                ref.offensive_popup.hide();
//                            }
//                        },ref, reason);
                    }
                }

                if (reason) {
                    tthis.rate(opinionid, CONSTANT.RATE_TYPE.OFFENSIVE, 0, function (error, resp) {
                        if (error) {
                            tthis.error(error, ref["comment-offensive-error"]);
                        } else if (!error && ref.parent) {
//                            ref.parent.find("[data-action='comment-offensive-already']").show();
//                            ref.parent.find("[data-action='comment-offensive']").hide();
//                            ref.offensive_popup.hide();
                            ref.offensive_popup.addClass("submitted");
                        }


                    }, ref, reason);
                }


//                ref.offensive_popup.find();
            });


            $(tthis.config.wrapper).off("click", "[data-action='offensive_popup_close']");
            $(tthis.config.wrapper).on("click", "[data-action='offensive_popup_close']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);

                if (ref.offensive_popup && ref.offensive_popup.hasClass("submitted")) {
                    ref.parent.find("[data-action='comment-offensive-already']").show();
                    ref.parent.find("[data-action='comment-offensive']").hide();
                }
                ref.offensive_popup.hide();
                $('.comments-overlay .extra-padding').hide();
                return false;
            });

        };

        times_comments.prototype.attachReplyAction = function () {
            logger.log("Attaching Reply Action");
            var tthis = this;

            $(tthis.config.wrapper).off("click", "[data-action='all_responses']");
            $(tthis.config.wrapper).on("click", "[data-action='all_responses']", function () {
                var tc_level = $(this).data("level"),
                    tc_next = $(this).next();
                while (tc_next.data("level") != tc_level) {
                    tc_next.slideDown();
                    tc_next = tc_next.next();
                    if (!is.numberOnly(tc_next.data("level"))) {
                        break;
                    }
                }
                $(this).remove();
            });

            $(tthis.config.wrapper).off('click', "[data-action='more-response-length']");
            $(tthis.config.wrapper).on("click", "[data-action='more-response-length']", function () {
                $(this).parent().hide();
                $(this).parent().next().show();
                event.publish("comment.readmore");
            });


            $(tthis.config.wrapper).off("click", "[data-action='comment-reply']");
            $(tthis.config.wrapper).on("click", "[data-action='comment-reply']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);

                var parent = ref["parent"];
                if (ref["comment-reply"]) {
                    ref["comment-reply"].show();
                    if (is.defined(tthis.config.rating) && tthis.config.rating) {
                        if (userInfo.userRating != null && userInfo.userRating != undefined && userInfo.userRating != "") {
                            $(tthis.config.wrapper + " [data-plugin='comment-rating']").val($(tthis.config.wrapper + " [data-plugin='rating-list'] [data-plugin='rating-vaue'][val=" + userInfo.userRating + "]").html());
                        }
                    }
                } else {
                    var commentForm = $(tthis.config.wrapper + " [data-plugin='comment-form']");
                    var commentFormHTML = $("<div>" + commentForm.html() + "</div>");
                    commentFormHTML.find("[data-clear='true']").remove();
                    // changes for prime comments box
                    // if(commentForm.hasClass('prime-comment')) {
                    //     commentFormHTML.find('[data-plugin="comment-post"]').val('Reply');
                    //     commentFormHTML.find('[data-action="comment-close"]').remove();
                    //     $('<input type="button" value="Cancel" class="button1 close" data-action="comment-close" title="Cancel"/>').insertBefore(commentFormHTML.find('[data-plugin="comment-post"]'));
                    // }
                    var tmpl = $.templates("<div class='" + commentForm.attr("class") + " reply' data-plugin='comment-reply'>" + commentFormHTML.html() + "</div>");
                    parent.append(tmpl.render([
                        {}
                    ]));
                    if (is.defined(tthis.config.rating) && tthis.config.rating) {
                        //$('.readrate').remove();
                        if (userInfo.userRating != null && userInfo.userRating != undefined && userInfo.userRating != "") {
                            $(tthis.config.wrapper + " [data-plugin='comment-rating']").val($(tthis.config.wrapper + " [data-plugin='rating-list'] [data-plugin='rating-vaue'][val=" + userInfo.userRating + "]").html());
                        }
                    }
                }
                //updated references
                ref = ui.getActionReferences(this, tthis.config.comment);
//                ref["comment-input"].keyup();
//                ref["comment-input"].focus();
                tthis.error("", ref["comment-error"]);
                //Trigger placeholders
                $('[placeholder]').blur();
                return false;

            });

            $(tthis.config.wrapper).off("click", "[data-action='toggle_replies']");
            $(tthis.config.wrapper).on("click", "[data-action='toggle_replies']", function () {
                var t = $(this);
                // var tc=t.parent();
                var tc = t.closest('.comment-box');
                var tc_level = tc.data("level");
                var tc_next = tc.next();
                var tstatus = t.attr("data-togglereplies");
                if (is.numberOnly(tc_next.data("level")) && tstatus == "show") {
                    event.publish("comment.togglereplies", "Show");
                    t.attr("data-togglereplies", "hide");
                    var response_cnt = 0;
                    while (tc_next.data("level") != tc_level) {
                        if (response_cnt == 3) {
                            tc_next.before('<div class="show_all_responses comment-box level' + (tc_level + 1) + '" data-level=' + tc_level + ' data-action="all_responses"> Show all responses </div>');
                            break;
                        } else {
                            tc_next.slideDown();
                            tc_next = tc_next.next();
                            if (!is.numberOnly(tc_next.data("level"))) {
                                break;
                            }
                        }
                        response_cnt++;
                    }
                } else {
                    event.publish("comment.togglereplies", "Hide");
                    t.attr("data-togglereplies", "show");
                    $('.show_all_responses').remove();
                    while (tc_next.data("level") != tc_level) {
                        tc_next.slideUp();
                        tc_next = tc_next.next();
                        if (!is.numberOnly(tc_next.data("level"))) {
                            break;
                        }
                    }
                }
            });

            $(tthis.config.wrapper).off('click', '.loadmore');
            $(tthis.config.wrapper).on('click', '.loadmore', function () {
                $(this).remove();
                if (tthis.config.loadonscroll == false) {
                    tthis.loadComment(tthis.config.commentType, function (data) {
                    }, true, ++tthis.pageCount);
                }
            });

            $(tthis.config.wrapper).off("keyup", "[data-plugin='comment-input']");
            $(tthis.config.wrapper).on("keyup", "[data-plugin='comment-input']", function (e) {
                if (e.keyCode === 27) {//Esc Key
                    var ref = ui.getActionReferences(this, tthis.config.comment);
                    ref["comment-input"].val("");
                    ref["comment-reply"].hide();
                }
            });

            ui.maxlength("[data-plugin='comment-input']", tthis.config.maxchar, function (remainingChar, messageLength) {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                var parent = ref["parent"];
                var charsrem = ref["comment-input-remaining"];
                var charsInput = ref["comment-input-remaining-prime"];
                if(charsrem) {
                    charsrem.text(remainingChar >= 0 ? remainingChar : 0);   
                }
                
                if(charsInput) {
                    charsInput.text(remainingChar >= 0 ? (tthis.config.maxchar - remainingChar) : tthis.config.maxchar);   
                }
                
                if (tthis.config.messages.maxlength && messageLength > tthis.config.maxchar) {
                    tthis.error(tthis.config.messages.maxlength, ref["comment-error"]);
                } else {
                    tthis.error("", ref["comment-error"]);
                }

            }, tthis.config.wrapper);


            $(tthis.config.wrapper).off("click", "[data-action='comment-close']");
            $(tthis.config.wrapper).on("click", "[data-action='comment-close']", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);

                var reply = ref["comment-reply"];
                var input = ref["comment-input"];
                var charsrem = ref["comment-input-remaining"];
                var charsInput = ref["comment-input-remaining-prime"];
                if(charsrem) {
                    charsrem.text(tthis.config.maxchar);   
                }
                
                if(charsInput) {
                    charsInput.text(0);   
                }
                
                ref["comment-post"].removeClass("active");
                input.val("");
                reply.hide();
                tthis.error("", ref["comment-error"]);

                return false;//todo remove this
            });

//            var bbb = $("#badge_tmpl").render([{}]);
//            $(tthis.config.wrapper).on("mouseenter mouseleave","[data-plugin='comment-user-badge']",function(evt){
//                var badge = $(this);
//                var name = badge.attr("data-name");
//                 if(evt.type == "mouseenter"){
//                     logger.log("enter:"+name);
//                     badge.append(bbb);
//                 }else if(evt.type == "mouseleave"){
//                     logger.log("leave:"+name);
//                     $(badge).find(".badge_new").remove();
//                 }
//            });

            tthis.onLoaded(function (tthis) {
//                tthis =  _tthis;   //changing reference of comments input when another set of comments is loaded
//                if(tthis.commentsCacheDate){
                tthis.updateCachedRating();
//                }
                var user = login.getUser();
                tthis.followeeFlag = $('body').data("isfolloweefetchflagset");
                if (tthis.followeeFlag) {
                    tthis.markFollowingAll();
                }
                else {
                    
                    if(user && !tthis.followeeFlag){
                            $('body').data("isfolloweefetchflagset","true");
                            mytimes.getFollowee(function (data) {
                               tthis.followee = data;
                                tthis.markFollowingAll();
                            });
                    }
                }

                lazy.load();
                dynamic.uptime();
            });

            $(tthis.config.wrapper).off("click", "[data-plugin='comment-user-follow']");
            $(tthis.config.wrapper).on("click", "[data-plugin='comment-user-follow']", function () {
                var currentEle = $(this);
                var currentUser = login.getUser();
                var ref = ui.getActionReferences(this, tthis.config.comment);
                var userId = ref.parent.attr("data-userid");
                var userName = ref.parent.attr("data-user");
                if (currentUser && currentUser.getId() != userId) {
                    (function (userId, userName) {
                        mytimes.followUser(userId, function (dataa) {
                            tthis.followee = tthis.followee || [];
                            var currFollowee = {_id: userId, F_N: userName};
                            tthis.followee.push(currFollowee);
                            tthis.markFollowingId(currFollowee);
                        });
                    }(userId, userName))
                } else {
                    logger.warn("Cannot follow self.");
                }
            });


            $(tthis.config.wrapper).off("click",
                "[data-plugin='comment-post'],[data-plugin='comment-facebook-post'],[data-plugin='comment-twitter-post'],[data-plugin='comment-google-post'],[data-plugin='comment-email-post']");
            $(tthis.config.wrapper).on("click",
                "[data-plugin='comment-post'],[data-plugin='comment-facebook-post'],[data-plugin='comment-twitter-post'],[data-plugin='comment-google-post'],[data-plugin='comment-email-post']", function () {
                    event.publish("comment.post.start");
                    var ref = ui.getActionReferences(this, tthis.config.comment);

                    var parent = ref["parent"];
                    var reply = ref["comment-reply"];
                    var errorElement = ref["comment-error"];
                    var reply_input = ref["comment-input"];


                    var parentid = parent.attr("data-id");
                    var parentlevel = parent.attr("data-level");

                    var rootid = parent.attr("data-id");
                    var rootlevel = parent.attr("data-level");

                    var preventInfinite = 10;
                    var prevParent = parent;
                    while (rootlevel > 1 && --preventInfinite > 0) {
                        prevParent = prevParent.prev();
                        if (prevParent.attr("data-plugin") === "comment") {
                            rootid = prevParent.attr("data-id");
                            rootlevel = prevParent.attr("data-level");
                        } else {
                            break;
                        }
                    }

                    tthis.error("", errorElement);

                    var val = (reply_input.val() === reply_input.attr("placeholder")) ? "" : reply_input.val().trim();

//                    val = $("<div/>").text(val).html(); // encoded html content
                    if (val) {
                        tthis.add(val, parentid, rootid, rootlevel, function (commentObj, errMsg) {
                            tthis.renderComment(commentObj, errMsg);
                            event.publish("comment.post.end");
                        }, false, this);
                    }
                    else {
                        //tthis.renderComment(null, tthis.config.messages.blank);
                        event.publish("comment_error", tthis.config.messages.blank);
                        if($(tthis.config.wrapper + " [data-plugin='comment-error']").length>1)
                        $(this).parent().find("[data-plugin='comment-error']").text(tthis.config.messages.blank);
                        else
                        $(tthis.config.wrapper + " [data-plugin='comment-error']").text(tthis.config.messages.blank);
                    }
//                reply_input.val("");
                    return false; //todo remove
                });

        };

        times_comments.prototype.markFollowingAll = function () {
            var tthis = this;
            var followees = tthis.followee;
            var comments = $(tthis.config.wrapper);
            var user = login.getUser();
            if (user) {
                logger.info("Showing follow links");
                comments.find("[data-plugin='comment-user-follow_wrapper']").show();

                //Hide current user follow
                //Start Added by Amit
                //comments.find("[data-plugin='comment'][data-userid!='" + user.getId() + "'] [data-plugin='comment-user-follow_wrapper']").show();
                comments.find("[data-plugin='comment'][data-userid ='" + user.getId() + "'] [data-plugin='comment-user-follow_wrapper']").hide();
//                comments.find("[data-plugin='comment'][data-userid !='" + user.getId() + "'] [data-plugin='comment-user-follow_wrapper']").removeClass('dont_show');
                // End Added by Amit
                //Mark following
                util.each(followees, function (i, followee) {
                    tthis.markFollowingId(followee);
                });
            } else {
                //Added by Amit
                comments.find("[data-plugin='comment-user-follow_wrapper']").hide();
                logger.info("Follow links : Not logged in.");
            }
        };

        times_comments.prototype.markFollowingId = function (followee) {
            var tthis = this;
            var user = login.getUser();
            var comments = $(tthis.config.wrapper);
            if (user) {
                var foloweeEle = comments.find("[data-userid='" + followee._id + "'] .follow");

                if (foloweeEle && foloweeEle.length > 0) {
                    logger.info("Mark Following : " + user.getFullName() + "(" + user.getId() + ") >> " + followee.F_N + "(" + followee._id + ")");
                    tthis.markFollowing(foloweeEle);
                } else {
                    logger.info("Mark Following : " + user.getFullName() + "(" + user.getId() + ") >> " + followee.F_N + "(" + followee._id + ") " + " - NA");
                }
            } else {
                logger.info("Follow link : Not logged in.");

            }
        };

        times_comments.prototype.markFollowing = function (currentEle) {
            if (currentEle && currentEle.length > 0) {
                currentEle.html("<span class='divider'></span><i class='icon-follow'></i>Following");
                currentEle.removeClass("follow");
                currentEle.addClass("following");
                currentEle.removeAttr("data-plugin");
                currentEle.attr("title", currentEle.attr("title").replace("Follow", "Following"));
            }
        };

        times_comments.prototype.onLoaded = function (callback) {
            event.subscribe("comments.loaded", callback);
        };

        var savedComment = null;
        times_comments.prototype.saveComment = function (comment) {
            savedComment = comment;
            cookie.set("comment" + window.msid, json.stringify(comment), 1, document.location.pathname);
        };

        times_comments.prototype.getSavedComment = function () {
            var commentCookie = cookie.get("comment" + window.msid);
            if (is.defined(commentCookie)) {
                return json.parse(commentCookie);
            } else if (savedComment) {
                return savedComment;
            } else {
                return null;
            }
        };

        times_comments.prototype.removeSavedComment = function () {
            savedComment = null;
            return cookie.remove("comment" + window.msid, document.location.pathname);
        };

        times_comments.prototype.loadSavedComment = function () {
            var tthis = this;
            var user = login.getUser();
            var savedComment = tthis.getSavedComment();
            if (savedComment) {
                if (user) {
                    if (!tthis.config.rating || savedComment.urs != '') {
                        savedComment.urs = tthis.config.rating ? $.trim(savedComment.urs) : '';
                        logger.log("Has saved comment and user is logged in.");
                        logger.log(savedComment);
                        tthis.attachUserToComment(savedComment, user);
                        //                    if(savedComment.type != "comment-email-post") {
                        tthis.removeSavedComment();
                        tthis.post(savedComment, function (savedComment, errMsg) {
                            tthis.renderComment(savedComment, errMsg);
                        });
                        //                    }
                    }
                } else {
                    logger.log("Saved comment but user not logged in");
                }
            } else {
                logger.log("No Saved comment.");
            }
        };

        times_comments.prototype.verifyEmailComment = function () {
            var url_params = util.getParam();

//            if(!is.empty(url_params.messageid) && !is.empty(url_params.r)){

            var tthis = this;
            tthis.verify(function (commentObj, errMsg) {
                if (is.object(commentObj)) {
                    tthis.renderComment(commentObj, errMsg, true);
                    $(tthis.config.wrapper + " [data-plugin='comment-verified-msg']").show();
                    tthis.removeSavedComment();
                }
            });
//            }

        };

        times_comments.prototype.saveRatingValidation = function (opinionid, typeid, rateid, val, ref) {
            logger.log("Save Rating: " + this.config.commentType + ":" + opinionid);

            var user = login.getUser();
            var userId = user ? user.getId() : 0;

            var rating = ["rateV", opinionid, typeid, rateid];
//            var ratingC = ["rateC", opinionid, typeid, rateid];
            localstoragec.set(rating.join(":"), val || "1", 1, '/');
//            cookie.set(rating.join(":"), val || "1", 1, document.location.pathname);
//            cookie.set(ratingC.join(":"), val || "1", (1/24/60)*7, document.location.pathname);//7 minutes
//            this.commentsCacheUpdated.push(ratingC.join(":"));
        };

        times_comments.prototype.getSavedRatingValidation = function (opinionid, typeid, rateid, ref) {
            var user = login.getUser();
            var userId = user ? user.getId() : 0;

            var rating = ["rateV", opinionid, typeid, rateid];
            var commentCookie = localstoragec.csget(rating.join(":")); //cookie.get(rating.join(":"));
            if (is.defined(commentCookie)) {
                return commentCookie;
            } else {
                return null;
            }
        };

        times_comments.prototype.updateCachedRating = function () {
            var tthis = this;
            var cookies = localstoragec.csgetAll();
            var comments = $(tthis.config.wrapper + " #" + this.config.commentType);
            util.each(cookies, function (key, value) {
                if (key.indexOf("rateV") === 0/* && tthis.commentsCacheUpdated.indexOf(key) < 0 */) {
//                    if(value == tthis.commentsCacheDate){
                    logger.log("Updating Rating from cookie: " + key);
//                        tthis.commentsCacheUpdated.push(key);
                    var keyArr = key.split(":");
                    var rating = {
                        opinionid: parseInt(keyArr[1], 10),
                        typeid: parseInt(keyArr[2], 10),
                        rateid: parseInt(keyArr[3], 10),
                        commentType: tthis.config.commentType
                    };
                    //todo merge two if cases
                    var eleType = "";
                    switch (rating.typeid) {
                        case CONSTANT.RATE_TYPE.AGREE:
                            eleType = "comment-agree-count";
                            break;
                        case CONSTANT.RATE_TYPE.DISAGREE:
                            eleType = "comment-disagree-count";
                            break;
                    }
                    if (eleType != "") {
                        var commentRateCount = comments.find("[data-id='" + rating.opinionid + "']  [data-plugin='" + eleType + "']");
                        var val = parseInt(commentRateCount.text(), 10);
                        var cookieVal = parseInt(localstoragec.csget(key), 10);
                        if (cookieVal > val) {
                            commentRateCount.text(cookieVal);
                            logger.log("Updated Rating from cookie: " + key + " : " + val + " updated to " + cookieVal);
                        } else {
                            //It is already updated
                            logger.log(key + " Already Updated");
                        }
                    }
//                    }else{//Remove cookie because comments have refreshed
                    //cookie.remove(key);
//                    }
                }
            });
        };


//        toi_comments.prototype.saveRating = function (opinionid, typeid, rateid, val, ref) {
//            var rating = ["rate", opinionid, typeid, rateid];
//            cookie.set(rating.join(":"), val || "1", 1, document.location.pathname);
//        };
//
//        toi_comments.prototype.getSavedRating = function (opinionid, typeid, rateid, ref) {
//            var rating = ["rate", opinionid, typeid, rateid];
//            var commentCookie = cookie.get(rating.join(":"));
//            if (is.defined(commentCookie)) {
//                return commentCookie;
//            } else {
//                return null;
//            }
//        };

//        toi_comments.prototype.removeSavedRating = function (opinionid, typeid, rateid) {
//            var rating = ["rate", opinionid, typeid, rateid];
//            return cookie.remove(rating.join(":"), document.location.pathname);
//        };
//
//        toi_comments.prototype.loadSavedRating = function (opinionid, typeid, rateid) {
//            var tthis = this;
//            var user = login.getUser();
//            var savedRating = tthis.getSavedRating(opinionid, typeid, rateid);
//            if (savedRating && user) {
//                logger.log("Has saved rating and user is logged in.");
//                logger.log(savedRating);
//
//                tthis.rate(savedRating.opinionid, savedRating.typeid, savedRating.rateid, function (savedComment) {
//                });
//            }
//        };

        times_comments.prototype.validateRating = function (opinionid, typeid, rateid, ref, callback) {
            logger.log("Validate Rating: " + opinionid);
            var config = this.config;
            var user = login.getUser();
            var savedRating = this.getSavedRatingValidation(opinionid, typeid, rateid, ref);
            if (ref) {
                if (user && ref.parent && ref.parent.attr("data-userid") == user.getId()) { //Own comment
                    switch (typeid) {
                        case CONSTANT.RATE_TYPE.AGREE:
                            callback(config.messages.self_agree);
                            break;
                        case CONSTANT.RATE_TYPE.DISAGREE:
                            callback(config.messages.self_disagree);
                            break;
                        case CONSTANT.RATE_TYPE.RECOMMEND:
                            callback(config.messages.self_recommend);
                            break;
                        case CONSTANT.RATE_TYPE.OFFENSIVE:
                            callback(config.messages.self_offensive);
                            break;
                    }
                } else if (savedRating && savedRating > 0) {
                    switch (typeid) {
                        case CONSTANT.RATE_TYPE.AGREE:
                            callback(config.messages.already_agree);
                            break;
                        case CONSTANT.RATE_TYPE.DISAGREE:
                            callback(config.messages.already_disagree);
                            break;
                        case CONSTANT.RATE_TYPE.RECOMMEND:
                            callback(config.messages.already_recommended);
                            break;
                        case CONSTANT.RATE_TYPE.OFFENSIVE:
                            callback(config.messages.already_offensive);
                            break;
                    }
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.AGREE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.DISAGREE) {
                    callback(config.messages.cant_agree_disagree);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.DISAGREE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.AGREE) {
                    callback(config.messages.cant_agree_disagree);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.AGREE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.OFFENSIVE) {
                    callback(config.messages.cant_agree_offensive);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.OFFENSIVE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.AGREE) {
                    callback(config.messages.cant_agree_offensive);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.DISAGREE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.RECOMMEND) {
                    callback(config.messages.cant_disagree_recommend);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.RECOMMEND, rateid, ref) && typeid == CONSTANT.RATE_TYPE.DISAGREE) {
                    callback(config.messages.cant_disagree_recommend);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.OFFENSIVE, rateid, ref) && typeid == CONSTANT.RATE_TYPE.RECOMMEND) {
                    callback(config.messages.cant_recommend_offensive);
                } else if (this.getSavedRatingValidation(opinionid, CONSTANT.RATE_TYPE.RECOMMEND, rateid, ref) && typeid == CONSTANT.RATE_TYPE.OFFENSIVE) {
                    callback(config.messages.cant_recommend_offensive);
                } else {
                    callback();
                }
            } else {
                logger.error("Cannot validate rating. 'ref' is undefined.");
            }
        };

        times_comments.prototype.validateComment = function (commentObj, callback, ref) {
            event.publish("comment.post.validating");
            var comment = commentObj.comment;
            var config = this.config;

            logger.info("Validating Comment: " + comment);
            commentObj.urs = (commentObj.urs === '') ? undefined : commentObj.urs;
            if (is.empty(comment)) {
                callback(config.messages.blank);
            } else if (is.url(comment)) {
                callback(config.messages.has_url);
            } else if (comment.length < config.validation.minlength) {
                callback(config.messages.minlength);
            } else if (is.defined(this.config.rating) && this.config.rating && (!is.defined(commentObj.urs))) {
                callback(config.messages.ratemendate);
            } else {
                var msgObj = this.commentObjToMsgObj(commentObj);
//                var validate_url = config.validate_url;
                msgObj.message = msgObj.message.toLowerCase();
                api.validateComment(msgObj, function (response) {
                    if (response === "duplicatecontent") {
                        event.publish("comment.post.validation.failed", response);
                        callback(config.messages.duplicate);
                    } else if (response === "abusivecontent") {
                        event.publish("comment.post.validation.failed", response);
                        callback(config.messages.abusive);
                    } else {
                        event.publish("comment.post.validated");
                        callback();
                    }
                });

//                ajax.post(validate_url, msgObj, function (response) {
//                    if (response === "duplicatecontent") {
//                        event.publish("comment.post.validation.failed",response);
//                        callback(config.messages.duplicate);
//                    } else if (response === "abusivecontent") {
//                        event.publish("comment.post.validation.failed",response);
//                        callback(config.messages.abusive);
//                    } else {
//                        event.publish("comment.post.validated");
//                        callback();
//                    }
//                }).error(function(event,xhr, e){
//                    event.publish("comment.post.error",e);
//                });
            }
        };

        times_comments.prototype.add = function (msg, parentId, rootId, level, callback, cnsl, currentEle) {
            logger.info("Adding Comment: " + msg);
            var tthis = this;
            $(tthis.config.wrapper + " [data-plugin='comment-verified-msg']").hide(); //todo move to reset function

            var config = this.getConfig();
            var user = login.getUser();

            var ref = ui.getActionReferences(currentEle, tthis.config.comment);//todo optimize

            /*if($("[data-plugin='comment-rating']").length > 0){
             var rating_input = $("input[data-plugin='comment-rating']").val().trim();
             if ($("input[data-plugin='comment-rating']:first").val().trim() == "Rate this movie") {
             this.error("Please rate before review", ref["comment-error"]);
             return;
             }
             }*/

            var commentObj = {
                index: -1,
                id: -1,
                comment: msg.trim(),
                level: level || 1,
                parentId: parentId || 0,
                rootId: rootId || 0,
                parentuid: ref.parent ? ref.parent.attr("data-id") : null,
                parentusername: ref.parent ? ref.parent.attr("data-user") : null,
                type: currentEle ? $(currentEle).attr("data-plugin") : "comment-post",
                time: new Date().getTime(), //todo user server time,
                configid: "41083278",
                url: window.location.href.split("?")[0].split("#")[0],
                rotype: typeof tthis.config.rotype == 'undefined' ? 0 : tthis.config.rotype, // for article by default
                urs: typeof userInfo === 'object' ? userInfo.userRating : ''

            };
            /*if(typeof userInfo === 'object'){
             commentObj.urs = userInfo.userRating;
             }*/
            var facebookCheckbox = ref["comment-facebook"];
            var twitterCheckbox = ref["comment-twitter"];

            commentObj.social = [];
            if (facebookCheckbox && facebookCheckbox.is(':checked')) {
                commentObj.social.push("facebook");
            }

            if (twitterCheckbox && twitterCheckbox.is(':checked')) {
                commentObj.social.push("twitter");
            }


            if (!user) {
                var cmtUser = (commentObj.type == "comment-post" ? this.getCommentUser(ref) : null);
                if (is.object(cmtUser)) {
                    user = cmtUser;
                } else if (cmtUser) {
                    return;
                }
            }


            if (user) {


                tthis.attachUserToComment(commentObj, user);

                if (cnsl === true) {
//                    console.log(msgObj);
                    if (callback) {
                        callback(commentObj);
                    }
                } else {
                    tthis.post(commentObj, callback);
                }
                //todo add class .highlight
            } else {
//                this.validateComment(commentObj, function (error) {
//                    if (!is.empty(error)) {
//                        if (callback) {
//                            callback(commentObj, error);
//                        }
//                        return;
//                    }

                switch (commentObj.type) {
                    case "comment-facebook-post":
                        tthis.commentOnFacebook(commentObj, ref);
                        break;
                    case "comment-google-post":
                        tthis.commentOnGoogle(commentObj, ref);
                        break;
                    case "comment-twitter-post":
                        tthis.commentOnTwitter(commentObj, ref);
                        break;
                    case "comment-email-post":
                        tthis.commentUsingEmail(commentObj, ref);
                        break;
                    default:
                        tthis.commentWithoutLogin(commentObj, ref);
                        break;
                }

//                },ref);
            }


            /*
             //http://timesofindia.indiatimes.com/fbpostcomment.cms?article=http://timesofindia.indiatimes.com/city/delhi/Thieves-who-stole-judges-car-held/articleshow/26115345.cms&access_token=CAABrIHwVZA2UBACX0gAvHb8VBrOCmK6F3fmNZCSY8UL86A9wjUBwZAZChjmV3Np4VaBV41DYJNhagZA83pipQaacl66yYxNSzVsoZCi2CqWZCgfT22WfYHf9f3JzgYD11LxptjZCxZCjDdxdZA6K5BcLijMNDCv8JScHqmoMrOq9F6l5C2G5VDP3v2q699gbfwPtYo3YSGx8CLrwZDZ
             */
        };

        times_comments.prototype.getCommentUser = function (ref) {
            var config = this.config;

            var $get_user_name = ref['get-user-name'];
            var $get_user_email = ref['get-user-email'];
            var $get_user_location = ref['get-user-location'];
            var $set_user_captcha = ref['set-user-captcha'];
            var $get_user_captcha = ref['get-user-captcha'];

            if ($get_user_name && $get_user_email && $get_user_name.length > 0 && $get_user_email.length > 0) {
                var user = {};

                user.name = $get_user_name.val().trim();
                user.email = $get_user_email.val().trim();
                if ($get_user_location && $get_user_location.length > 0) {
                    user.location = $get_user_location.val().trim();
                }
                
                if ($('body.euuser.notloggedin').length === 1) {
                    this.error(config.messages.login_required, ref["comment-error"]);
                    return true;
                }

                if (user.name.length == 0 || user.name == $get_user_name.attr("placeholder")) {
                    this.error(config.messages.name_required, ref["comment-error"]);
                    return true;
                }

                if (user.name.length > 30) {
                    this.error(config.messages.name_toolong, ref["comment-error"]);
                    return true;
                }

                if (!is.alphaOnly(user.name)) {
                    this.error(config.messages.name_not_string, ref["comment-error"]);
                    return true;
                }


                if (user.email.trim().length == 0 || user.email == $get_user_email.attr("placeholder")) {
                    this.error(config.messages.email_required, ref["comment-error"]);
                    return true;
                }

                if (!is.email(user.email.trim())) {
                    this.error(config.messages.email_invalid, ref["comment-error"]);
                    return true;
                }

                if ($get_user_location && $get_user_location.length > 0) {
                    if (user.location.length == 0 || user.location == $get_user_location.attr("placeholder")) {
                        this.error(config.messages.location_required, ref["comment-error"]);
                        return true;
                    }

                    if (user.location.length > 30) {
                        this.error(config.messages.location_toolong, ref["comment-error"]);
                        return true;
                    }

                    if (!is.alphaOnly(user.location)) {
                        this.error(config.messages.location_not_string, ref["comment-error"]);
                        return true;
                    }
                }

                if ($get_user_captcha && $get_user_captcha.val().trim().length == 0) {
                    this.error(config.messages.captcha_required, ref["comment-error"]);
                    return true;
                }

                if ($get_user_captcha && $get_user_captcha.val().trim().length > 4) {
                    this.error(config.messages.captcha_toolong, ref["comment-error"]);
                    return true;
                }

                if ($get_user_captcha && !is.numberOnly($get_user_captcha.val().trim())) {
                    this.error(config.messages.captcha_number_only, ref["comment-error"]);
                    return true;
                }

                if ($set_user_captcha && $get_user_captcha && !eval($set_user_captcha.text() + "=" + $get_user_captcha.val())) {
                    this.error(config.messages.captcha_invalid, ref["comment-error"]);
                    return true;
                }


                return userClass.getNewUser(user, {
                    "id": "id",
                    "username": "username",
                    "thumb": "thumb",
                    "email": "email",
                    "name": "name",
                    "fullName": "name",
                    "CITY": "location"
                });

//                app: "toiipad",
//                    useripaddress: "202.134.162.148",
//                    location: "India",
//                    fromname: "Lawrance",
//                    fromaddress: "darrylthebest@gmail.com",
//                    rotype: 0

            }
        };
        times_comments.prototype.commentOnFacebook = function (commentObj, ref) {
            var tthis = this;
            var domainOnly = util.getDomainOnly();
//            commentObj.social.push("facebook");
            tthis.saveComment(commentObj);
            cookie.set("clickkepfbtart", "1", 1, "/", domainOnly);
            cookie.set("clickkepfbtart" + window.msid, window.msid, 1, "/", domainOnly);
            login.loginWithFacebook(function () {
                tthis.loadSavedComment();
            });
        };

        times_comments.prototype.commentOnGoogle = function (commentObj, ref) {
            var tthis = this;
//            commentObj.social.push("google");
            tthis.saveComment(commentObj);
            login.loginWithGoogle(function () {
                tthis.loadSavedComment();
            });
        };

        times_comments.prototype.commentOnTwitter = function (commentObj, ref) {
            var tthis = this;
            var domainOnly = util.getDomainOnly();
//            commentObj.social.push("twitter");
            tthis.saveComment(commentObj);
            cookie.set("clickkeptwtart", "1", 1, "/", domainOnly);
            cookie.set("clickkeptwtart" + window.msid, window.msid, 1, "/", domainOnly);
            login.loginWithTwitter(function () {
                tthis.loadSavedComment();
            });
        };

        times_comments.prototype.commentUsingEmail = function (commentObj, ref) {
            var tthis = this;
            var domainOnly = util.getDomainOnly();
            tthis.saveComment(commentObj);
            cookie.set("clickkepssoart", "1", 1, "/", domainOnly);
            cookie.set("clickkepssoart" + window.msid, window.msid, 1, "/", domainOnly);
            login.login(function () {
                tthis.loadSavedComment();
            });
        };

//        toi_comments.prototype.commentWithoutLogin = function (commentObj, ref) {
//            if (window.resetRegisterForm1 && window.putMathQ && window.lightbox2n) {    //todo, this is toi specific and is bad code, couldn't help it
//                window.resetRegisterForm1();
//                $("#registerForm1 #comments").val(commentObj.comment);
//                $("#registerForm1 #parentid").val(commentObj.parentId);
//                $("#registerForm1 #rootid").val(commentObj.rootId);
//
//                window.putMathQ(4);
//                window.lightbox2n();
//                window.scrollTo(0, 0);
//
//                var input = ref["comment-input"];
//                if (input) {
//                    input.val("");
//                    input.keyup();
////                    input.focus();
//                }
//            } else {
//                logger.error("'window.resetRegisterForm1 or window.putMathQ or window.lightbox2n' is not defined.");
//            }
//            this.loadSavedComment();
//        };


        times_comments.prototype.commentWithoutLogin = function (commentObj, ref) {
            var tthis = this;
            var domainOnly = util.getDomainOnly();

            tthis.saveComment(commentObj);
            cookie.set("clickkepssoart", "1", 1, "/", domainOnly);
            cookie.set("clickkepssoart" + window.msid, window.msid, 1, "/", domainOnly);
            login.login(function () {
                if (!(tthis.config.rating)) {
                    tthis.loadSavedComment();
                }
            });
        };
        /**
         * Verify comment posted using email
         *
         * @param commentObj
         * @param callback
         */
        times_comments.prototype.verify = function (callback, ref) {
            //http://timesofindia.indiatimes.com/cmtverified/29255491.cms?cmtid=23834874&r=1393492740078
            var tthis = this;
            var url = tthis.config.verify_comment_url;

            var msgObj = {
                msid: window.msid,
                cmtid: null,//ActionParams > messageid
                r: null//ActionParams > r
            };
            var url_params = util.getParam();
            if (window.messageid && window.param_r) {
                msgObj.cmtid = window.messageid;
                msgObj.r = window.param_r;
            }
            else {
                msgObj.cmtid = url_params.messageid;
                msgObj.r = url_params.r;
            }

            if (msgObj.msid && msgObj.cmtid && msgObj.r) {
                logger.info("Verifying Comment.");

                ajax.get(url, msgObj, function (response) {
                    if (response.cmtverified.commentbyid && response.cmtverified.commentbyid.roaltdetails) {
                        var cmt = response.cmtverified.commentbyid;
                        cmt.roaltdetails = cmt.roaltdetails.roaltdetails;

                        var commentObj = {
                            index: -1,
                            id: -1,
                            comment: is.string(cmt.message) ? $("<div/>").text(cmt.message).html() : "",
                            level: 1,
                            parentuid: cmt.parentuid,
                            parentusername: cmt.parentusername,
                            abstime: msgObj.r ? util.getDate(msgObj.r).getTime() : "",//1384934349412,    //cmt.rodate //19 Nov, 2013 01:04 PM
                            time: msgObj.r,
                            type: "comment-post",
                            user: {
                                name: cmt.roaltdetails.fromname,
                                location: cmt.roaltdetails.location
                            }
                        };


                        if (callback) {
                            callback(commentObj);
                        }
                    } else {
                        if (callback) {
                            callback(null, {});
                        }
                    }
                });
            }

            if (url_params.register === "1") {
                logger.info("Display register window.");

                if (!login.getUser()) {
                    login.login();
                }
            }
        };
        times_comments.prototype.post = function (commentObj, callback, ref) {
            var tthis = this;
//            var url = this.config.post_url;


//            if (!is.empty(commentObj.social)) {
//                if (commentObj.social.indexOf("facebook") > -1) {//todo use common function
//                    tthis.postToFacebook(commentObj.comment, function () {
//                        if (commentObj.social.indexOf("twitter") > -1) {//open twitter dialog after fb dialog closes
//                            tthis.postToTwitter(commentObj.comment);
//                        }
//                    });
//                } else if (commentObj.social.indexOf("twitter") > -1) {
//                    tthis.postToTwitter(commentObj.comment);
//                } else if (commentObj.social.indexOf("google") > -1) {
//                    tthis.postToGoogle(commentObj.comment);
//                }
//            }


            /*if (!is.empty(commentObj.social)) {
             if(is.defined(tthis.config.rating) && tthis.config.rating){
             if( is.defined(tthis.config.moviename) && tthis.config.moviename){
             // for movie review
             var socialtext = "Movie: "+tthis.config.moviename+", My Rating "+(commentObj.urs/2)+"/5. "+commentObj.comment;
             tthis.postToSocial(socialtext,commentObj.social.join(","));
             }
             }
             else{
             tthis.postToSocial(commentObj.comment,commentObj.social.join(","));
             }
             }*/

            if (!is.empty(commentObj.social)) {
                if (is.defined(tthis.config.rating) && tthis.config.rating) {
                    if (is.defined(tthis.config.moviename) && tthis.config.moviename) {
                        // for movie review
                        var socialtext = "Movie: " + tthis.config.moviename + ", My Rating " + (commentObj.urs / 2) + "/5. " + commentObj.comment;
                        tthis.postToSocial(socialtext, commentObj.social.join(","));
                    }
                    else if (is.defined(tthis.config.techprdtname) && tthis.config.techprdtname) {
                        // for tech prdt review
                        var socialtext = tthis.config.techprdtname + " : " + "My Rating " + (commentObj.urs / 2) + "/5, " + commentObj.comment;
                        tthis.postToSocial(socialtext, commentObj.social.join(","));
                    }
                }
                else {
                    tthis.postToSocial(commentObj.comment, commentObj.social.join(","));
                }
            }


            //todo move to api
            tthis.validateComment(commentObj, function (error) {
                if (!is.empty(error)) {
                    if (callback) {
                        callback(commentObj, error);
                    }
                    return;
                }
                event.publish("comment.post.posting");
                logger.info("Posting Comment:" + commentObj.comment);


                var msgObj = tthis.commentObjToMsgObj(commentObj);
                msgObj.pcode = page.getChannel();

                //todo implemente and check commented code.
                if (tthis.config.sendCommentLiveEmail === false) {
                    msgObj.verifyuser = 1; //comment is posted, email is not sent
                    api.postCommentWithoutVerification(msgObj, function (response) {
                        event.publish("comment.post.posted");
                        if (callback) {
                            callback(commentObj);
                        }
                    });
                } else {
                    if (tthis.config.enableparam && msgObj.rotype != 0) {
                        msgObj.url = msgObj.url + '?' + window.location.search.replace("?", "").split("&")[0] + '&';
                        msgObj.configid = '46516605'; // to handle param include
                    }
                    else if (msgObj.rotype != 0) {
                        msgObj.url = msgObj.url + '?';
                    }
                    api.postComment(msgObj, function (response) {
                        event.publish("comment.post.posted");
                        if (callback) {
                            callback(commentObj);
                        }
                    });
                }

//                ajax.post(url, msgObj, function (response) {
//                        event.publish("comment.post.posted");
//                        if (callback) {
//                            callback(commentObj);
//                        }
//                    })
//                    .error(function(event,xhr,e){
//                        event.publish("comment.post.error",e);
//                    });

            }, ref);
        };

        times_comments.prototype.commentObjToMsgObj = function (commentObj) {
            var config = this.config;//getConfig();

            var msgObj = {
                //                    hostid:83,//259:travel
                //                    rchid:-2128958273,//2147477992:travel
                fromname: commentObj.user ? commentObj.user.name : null,
                fromaddress: commentObj.user ? commentObj.user.email : null,
                userid: commentObj.user ? (commentObj.user.id ? commentObj.user.uid : "qrst") : "qrst", // todo use SSO
//                fbemailid: commentObj.user ? commentObj.user.email : null,//todo use fb email
                location: commentObj.user ? commentObj.user.location : null,
                imageurl: commentObj.user ? commentObj.user.image : null,
                loggedstatus: commentObj.user && commentObj.user.id ? 1 : 0,

                message: commentObj.comment,
                roaltdetails: 1,
                ArticleID: config.msid,
                msid: config.msid,
                parentid: commentObj.parentId,
                rootid: commentObj.rootId,
                url: commentObj.url,
                configid: commentObj.configid,
                urs: commentObj.urs ? commentObj.urs : null,
                rotype: commentObj.rotype,
                mailerformat: typeof obituary !== 'undefined' ? 'obituary': null,
                processRedirectionUrl: typeof processRedirectionUrl !== 'undefined' ? processRedirectionUrl : null,
                commentStatus: typeof commentStatus !== 'undefined' ? commentStatus : false
            };
            
            if( commentObj.url ){
                msgObj['redirectionurl'] = (typeof redirectionurl !== 'undefined') ? redirectionurl : commentObj.url;
            }

            if (!commentObj.user.id) {
                msgObj.verifyuser = 1; //To prevent sending "You comment is live mail" in case of non-logged in user.
            }
            return msgObj;
        };

        times_comments.prototype.error = function (errMsg, wrapper) {
            if (is.visible(wrapper)) {
                wrapper.text(errMsg);
            } else if (!is.empty(errMsg)) {
                alert(errMsg);
            }
            event.publish("comment_error", errMsg);
        };

        times_comments.prototype.rateAgree = times_comments.prototype.rateUpVote = function (opinionid, callback, ref) {
//            login.loginType(15);
            logger.log("Agree Comment: " + opinionid);
            this.rate(opinionid, CONSTANT.RATE_TYPE.AGREE, 0, callback, ref);
//            login.loginType();
            //http://timesofindia.indiatimes.com/ratecomment_new.cms?opinionid=22554141&typeid=100&rateid=1
            //http://mytest.indiatimes.com/mytimes/addActivity?activityType=Agreed&appKey=TOI&parentCommentId=22554141&baseEntityType=ARTICLE&objectType=A&url=
        };

        times_comments.prototype.rateDisagree = times_comments.prototype.rateDownVote = function (opinionid, callback, ref) {
//            login.loginType(16);
            logger.log("Disagree Comment: " + opinionid);
            this.rate(opinionid, CONSTANT.RATE_TYPE.DISAGREE, 0, callback, ref);
//            login.loginType();
            //http://timesofindia.indiatimes.com/ratecomment_new.cms?opinionid=22587427&typeid=101&rateid=1
            //http://mytest.indiatimes.com/mytimes/addActivity?activityType=Disagreed&appKey=TOI&parentCommentId=22587427&baseEntityType=ARTICLE&objectType=A&url=
        };

        times_comments.prototype.rateRecommend = function (opinionid, callback, ref) {
//            login.loginType(17);
            logger.log("Recommend Comment: " + opinionid);
            this.rate(opinionid, CONSTANT.RATE_TYPE.RECOMMEND, 0, callback, ref);
//            login.loginType();
            //http://timesofindia.indiatimes.com/ratecomment_new.cms?opinionid=22587134&typeid=102&rateid=1
            //http://mytest.indiatimes.com/mytimes/addActivity?activityType=Reccomended&appKey=TOI&parentCommentId=22587134&baseEntityType=ARTICLE&objectType=A&url=
        };

        times_comments.prototype.flag = times_comments.prototype.rateOffensive = function (opinionid, callback, ref, reason) {
            var tthis = this;
            logger.log("Flag/Offensive Comment: " + opinionid);

            $(ref.offensive_popup).off("click");
            $(ref.offensive_popup).on("click", function () {
                var ref = ui.getActionReferences(this, tthis.config.comment);
                var valReason = ref.offensive_popup.find("input:checked").val();
                if (valReason && valReason.length > 0 && valReason == "Others") {
                    ref.offensive_popup_reason.show();
                    event.publish("comment.flag.others", ref.offensive_popup);
                    //event.publish("comment.flag.show", ref.offensive_popup);
                } else {
                    ref.offensive_popup_reason.hide();
                }

                tthis.error("", ref["comment-offensive-error"]);

//                return false;
            });
            event.publish("comment.flag.show", ref.offensive_popup);

            var elemTop = $(ref.offensive_popup).closest('.comment-box').position().top + $(ref.offensive_popup).closest('.comment-box').closest('.comment-box').height(),
                elemH = $(ref.offensive_popup).height(),
                wH = $(window).height(),
                commentScrollPos = 0
            // $('[data-plugin="offensive_popup"]').hide();
            $(ref.offensive_popup).removeClass('popup_above');

            if (((elemTop - commentScrollPos) + elemH) > wH) {
                $(ref.offensive_popup).addClass('popup_above');
            }
            ref.offensive_popup.show();
            return;
            /*
             Find this comment offensive?
             Choose your reason below and click on the Submit button. This will alert our moderators to take action
             Reason for reporting:
             Foul language
             Defamatory
             Inciting hatred against a certain community
             Out of context/Spam
             Others

             */

//            //todo remove dependency on articleshow, use common rating.
//            var tthis = this;
//            //todo code repeated in rating also
//            var rating = {opinionid: opinionid, typeid: CONSTANT.RATE_TYPE.OFFENSIVE, rateid: 0};
//
//            var user = login.getUser();
//
//            if (user) {
//                this.validateRating(opinionid, rating.typeid, rating.rateid, ref, function (error) {
//                    if (!is.empty(error)) {
//                        if (callback) {
//                            callback(error);
//                        }
//                        return;
//                    }
//                    tthis.rate(opinionid, CONSTANT.RATE_TYPE.OFFENSIVE, rating.rateid, callback, ref);
//                });
//            } else {
//                (function (rating, callback, ref) {
//                    login.login(function () {
//                        tthis.rateOffensive(rating.opinionid, callback, ref);
//                    }, true);
//                }(rating, callback, ref));
//            }

            //http://timesofindia.indiatimes.com/offensiveService/offence.asmx/getOffencivecomment?ofusername=delsanic&ofreason=Out%20of%20context/Spam&ofcommenteroid=22586038&ofcommenthostid=83&ofcommentchannelid=-2128958273&ofcommentid=29127171&ofuserisloggedin=1&ofuserssoid=delsanic@gmail.com&ofuseremail=delsanic@gmail.com
            //http://timesofindia.indiatimes.com/ratecomment_new.cms?opinionid=22586038&typeid=103&rateid=1
        };

        times_comments.prototype.showRateOffensiveBox = function (opinionid, callback, ref) {
//            ref.current.find('[data-plugin="offensive_popup"]').show();
//            ref.current.find('[data-plugin="offensive_popup_submit"]').show();
//            ref.current.find('[data-plugin="offensive_popup_close"]').show();

        };

        times_comments.prototype.rate = function (opinionid, typeid, rateid, callback, ref, reason) {
            logger.log("Rate Comment: " + opinionid + ":" + typeid);
            var tthis = this;

            var rating = {opinionid: opinionid, typeid: typeid, rateid: rateid || 0};

            if (reason) {
                rating.ofreason = reason;
            }

            var user = login.getUser();

            if (user) {
                logger.log("Rate Comment user is logged in");
                this.validateRating(opinionid, typeid, rateid, ref, function (error) {
                    if (!is.empty(error)) {
                        if (callback) {
                            callback(error);
                        }
                        return;
                    }
                    var val = parseInt(ref["comment-agree-count"].text(), 10);
                    tthis.saveRatingValidation(opinionid, typeid, rateid, val + 1, ref);
                    api.rateComment(rating, function (resp) {
                        if (callback) {
                            callback(null, resp);
                        }
                    }, user);
//                    ajax.get(tthis.config.rate_url, rating, function (resp) {
//                        if (callback) {
//                            callback(null, resp);
//                        }
//                    });
                });
            } else {
                logger.log("Rate Comment user is NOT logged in, login prompted.");
                (function (rating, callback, ref) {
                    if (tthis.config.loginRequiredForRating === true) {
                        login.login(function () {
                            logger.log("Rate Comment user logged in, continue rating.");
                            tthis.rate(rating.opinionid, rating.typeid, rating.rateid, callback, ref, rating.reason);
                        }, true);
                    } else {
                        logger.log("Rate Comment user NOT logged in, continue rating.");
                        tthis.validateRating(rating.opinionid, rating.typeid, rating.rateid, ref, function (error) {
                            if (!is.empty(error)) {
                                if (callback) {
                                    callback(error);
                                }
                                return;
                            }
                            var val = parseInt(ref["comment-agree-count"].text(), 10);
                            tthis.saveRatingValidation(rating.opinionid, rating.typeid, rating.rateid, val + 1, ref);
                            api.rateComment(rating, function (resp) {
                                if (callback) {
                                    callback(null, resp);
                                }
                            });

//                            ajax.get(tthis.config.rate_url, rating, function (resp) {
//                                if (callback) {
//                                    callback(null, resp);
//                                }
//                            });
                        });
                    }
                }(rating, callback, ref));
            }

        };

        times_comments.prototype.renderComment = function (commentObj, errMsg, verified) {
            var tthis = this;
            var isPrimeUser = primeuserhandler.isPrimeActiveUser();
            if (isPrimeUser && commentObj && commentObj.user) {
                commentObj.user.isPrime = true;
            }
            if (commentObj) {
                var ref = ui.getActionReferences(tthis.config.wrapper + " [data-id='" + commentObj.parentId + "']");

                var parent = ref["parent"];
                var input = ref["comment-input"];
                var facebookCheckbox = ref["comment-facebook"];
                var twitterCheckbox = ref["comment-twitter"];

                if (errMsg) {
                    event.publish("comment.post.error", errMsg);
                    this.error(errMsg, ref["comment-error"]);
                } else {
                    event.publish("comment.post.rendering", {data: this, commentObj: commentObj});
                    commentObj.comment = $("<div/>").text(commentObj.comment).html();
                    commentObj.user.rate = commentObj.urs;
                    if ($(tthis.config.wrapper + " .comment-verification-msg").length) {
                        $(tthis.config.wrapper + " .comment-verification-msg").remove();
                    }
                    if (this.isReply(commentObj)) {
                        var reply = ref["comment-reply"];
                        //Convert to number if level is not a number
                        if (!is.number(commentObj.level)) {
                            commentObj.level = parseInt(commentObj.level, 10);
                        }
                        ++commentObj.level; //TODO check if level needs to be increased.

                        if ((commentObj && commentObj.user && commentObj.user.id) || !ref['set-user-captcha']) {
                            parent.after(this.renderEach(-1, commentObj, true));
                            reply.hide();
                        } else {
                            parent.after("<div class='comment-box highlight comment-verification-msg'>" + $(tthis.config.wrapper + " [data-plugin='comment-verification-msg']").html() + "</div>");
                            reply.hide();
                        }
                    } else {
                        if ((commentObj && commentObj.user && commentObj.user.id) || verified == true || !ref['set-user-captcha']) {
                            $(tthis.config.wrapper + ' ' + this.config.main).prepend(this.renderEach(-1, commentObj, true));
                        } else {
                            $(tthis.config.wrapper + ' ' + this.config.main).prepend("<div class='comment-box highlight comment-verification-msg'>" + $(tthis.config.wrapper + " [data-plugin='comment-verification-msg']").html() + "</div>");
                        }
                    }

                    if (input) {
                        input.val("");
                        input.keyup();
                        input.focus();
                        if (facebookCheckbox) {
                            facebookCheckbox.prop('checked', false);
                        }
                        if (twitterCheckbox) {
                            twitterCheckbox.prop('checked', false);
                        }

                        var $get_user_captcha = ref['get-user-captcha'];
                        var $set_user_captcha = ref['set-user-captcha'];
                        if ($get_user_captcha) {
                            $get_user_captcha.val("");
                        }
                        if ($set_user_captcha) {
                            $set_user_captcha.text(Math.floor((Math.random() * 10)) + "+" + Math.floor((Math.random() * 10)) + "=");
                        }
                    }
                    this.error("", ref["comment-error"]);
                }
                //
                lazy.load();
            } else {
                this.error(errMsg);
            }

        };

        times_comments.prototype.renderUsingTemplate = function (index, dataOne, tmpl, prepend) {
            return $("#" + tmpl).render(dataOne, {
                formatNumber: function (val) {
                    return util.formatNumber(val);
                },
                timeToDate: function (time) {
                    return new Date(time);
                }, parseDate: function (time) {
                    if (jsonDate != null) {
                        var date = new Date(time);
                        var newDate = $.fullCalendar.formatDate(date, "MMM dd, yyyy");
                        return newDate;
                    }
                }
            });
        };

        times_comments.prototype.isReply = function (cmt) {
            return cmt.parentuid && cmt.parentusername;
        };

//        toi_comments.prototype.parseTmpl = function (data) {
//            return $("#tmpl1").render(data, { formatNumber: function (val) {
//                return util.formatNumber(val);
//            }});
//        };

        times_comments.prototype.loadingDiv = function (text) {
            var tthis = this;
            if (text === "Loading...") {
                $(tthis.config.wrapper + " [data-plugin='comment-loading']").show();
            } else {
                $(tthis.config.wrapper + " [data-plugin='comment-loading']").hide();
            }
        };

        return times_comments;
    });

define('comments',[
        "tiljs/apps/times/comments",
        "tiljs/apps/times/usermanagement",
        "tiljs/logger",
        "tiljs/event",
        "jquery",
        "tiljs/util",
        "module",
        "tiljs/cookie",
        "tiljs/ui",
        "jsrender"
    ],
    function (comments, login, logger, event, $, util, module, cookie, ui, jsrender) {
        var mod_comments = comments;
        var default_config = {
            validation: {
                minlength: 1 //140
            },
            messages: {
                "name_required": "Please enter your name.",
                "login_required": "Please login to comment",
                "name_toolong": "Name cannot be longer than 30 chars.",
                "email_required": "Please enter your email address.",
                "email_invalid": "Please enter a valid email address.",
                "minlength": "Whoops! Your review is too short. Please write a review which is at least 140 characters long so that it is helpful for others as well :)",
                "maxlength": "You have entered more than 3000 characters.",
                "blank": "You can't post this review as it is blank.",
                "popup_blocked": "Popup is blocked.",
                "has_url": "You can't post this review as it contains URL.",
                "duplicate": "You can't post this review as it is identical to the previous one.",
                "abusive": "You can't post this review as it contains inappropriate content.",
                "self_agree": "You can't Agree with your own review",
                "self_disagree": "You can't Disagree with your own review",
                "self_recommend": "You can't Recommend your own review",
                "self_offensive": "You can't mark your own review as Offensive",
                "already_agree": "You have already Agreed with this review",
                "already_disagree": "You have already Disagreed with this review",
                "already_recommended": "You have already Recommended this review",
                "already_offensive": "You have already marked this review Offensive",
                "cant_agree_disagree": "You can't Agree and Disagree with the same review",
                "cant_agree_offensive": "You can't Agree and mark the same review Offensive",
                "cant_disagree_recommend": "You can't Disagree and Recommend the same review",
                "cant_recommend_offensive": "You can't Recommend and mark the same review Offensive",
                "permission_facebook": "You can't post to facebook. Post permission is required."
            }
        };
        mod_comments.config = util.extend(true, {}, comments.config, default_config, module.config());
        return mod_comments;
    });

define( 'homepage',[ "tiljs/cookie", "tiljs/load" ], function ( cookie, load ) {
	var mod_homepage = {};
	mod_homepage.init = function () {
		//--GA code--
		//        var _gaq = _gaq || [];
		//        _gaq.push(['_setAccount', 'UA-198011-4']);
		//        _gaq.push(['_setDomainName', 'none']);
		//        _gaq.push(['_setAllowLinker', true]);
		//        _gaq.push(['_addIgnoredOrganic', 'times of india']);
		//        _gaq.push(['_addIgnoredOrganic', 'toi']);
		//        _gaq.push(['_addIgnoredOrganic', 'the times of india']);
		//        _gaq.push(['_addIgnoredOrganic', 'timesofindia']);
		//        _gaq.push(['_addIgnoredOrganic', 'www.timesofindia.com']);
		//        _gaq.push(['_addIgnoredOrganic', 'timesofindia.com']);
		//        _gaq.push(['_addIgnoredOrganic', 'thetimesofindia']);
		//        _gaq.push(['_addIgnoredOrganic', 'time of india']);
		//        _gaq.push(['_addIgnoredOrganic', 'times of india headlines']);
		//        _gaq.push(['_addIgnoredOrganic', 'timesofindia.indiatimes.com']);
		//
		//        _gaq.push(['_trackPageview']);
		//        _gaq.push(['_trackPageLoadTime']);
		//        (function () {
		//            var ga = document.createElement('script');
		//            ga.type = 'text/javascript';
		//            ga.async = true;
		//            ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
		//            var s = document.getElementsByTagName('script')[0];
		//            s.parentNode.insertBefore(ga, s);
		//        })();
		//        //--GA code end--
		//
		//        //-- Begin comScore Tag --
		//        var _comscore = _comscore || [];
		//        _comscore.push({ c1: "2", c2: "6036484" });
		//        (function () {
		//            var s = document.createElement("script"), el = document.getElementsByTagName("script")[0];
		//            s.async = true;
		//            s.src = (document.location.protocol == "https:" ? "https://sb" : "http://b") + ".scorecardresearch.com/beacon.js";
		//            el.parentNode.insertBefore(s, el);
		//        })();
		//        //-- End comScore Tag --
		//
		//        //--Visual Revenue Reader Response Tracking Script (v6) --
		//        var page = (typeof homeObj != "undefined") ? true : false;
		//        var _vrq = _vrq || [];
		//        _vrq.push(['id', 77]);
		//        _vrq.push(['automate', page]);
		//        _vrq.push(['track', function () {
		//        }]);
		//        (function (d, a) {
		//            var s = d.createElement(a),
		//                x = d.getElementsByTagName(a)[0];
		//            s.async = true;
		//            s.src = 'http://a.visualrevenue.com/vrs.js';
		//            x.parentNode.insertBefore(s, x);
		//        })(document, 'script');
		//
		//        //-- End of VR RR Tracking Script - All rights reserved --
		//
		//        //-- BEGIN EFFECTIVE MEASURE CODE --
		//        (function () {
		//            var em = document.createElement('script');
		//            em.type = 'text/javascript';
		//            em.async = true;
		//            em.src = ('https:' == document.location.protocol ? 'https://in-ssl' : 'http://in-cdn') + '.effectivemeasure.net/em.js';
		//            var s = document.getElementsByTagName('script')[0];
		//            s.parentNode.insertBefore(em, s);
		//        })();
		//        //--END EFFECTIVE MEASURE CODE --
		//
		//        //********************************************
		//        //************** SET GeoLocation *************
		//        //********************************************
		//        //var gloc = times.cookie.get('geolocation')||"";
		//        if (!(cookie.get('geolocation')) || cookie.get('geolocation') == "undefined") {
		//            cookie.remove('geolocation', '/', location.host);
		//            cookie.remove('geolocation', '/', '.indiatimes.com');
		//            var ord = window.ord || Math.floor(Math.random() * 1e16);
		//            load.js("http://ad.doubleclick.net/N7176/adj/TOI_Test/TOI_Test_1x1;sz=1x1;ord=" + ord + "?");
		//            setTimeout(function () {
		//                var gloc = cookie.get('geolocation');
		//                if (gloc) {
		//                    cookie.remove('geolocation', '/', '.indiatimes.com');
		//                    cookie.set("geolocation", gloc, 365, "/", location.host, "");
		//                }
		//            }, 5000);
		//        }
		//        //************* END GeoLocation *************
	};
	return mod_homepage;
} );

define('crwdcnctrl',['tiljs/cookie', 'tiljs/event'], function (cookie, event) {
    var mod_lotame = {};

    var getAgeFromDOB = function (dob) {
        var today = new Date(), birthDate = new Date(dob), age = today.getFullYear() - birthDate.getFullYear();
        var m = today.getMonth() - birthDate.getMonth();
        if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
            age--;
        }
        return age;
    };

    var userDetailsFromCookie = function () {
        var userdetails = cookie.get("MSCSAuthDetail");
        var dtls = {};
        dtls.act = (typeof userdetails != 'undefined') ? "TOI" : "";
        if (typeof userdetails != 'undefined') {
            dtls.dob = (userdetails.match("DOB=(.*) ") != null) ? userdetails.match("DOB=(.*) ")[1] : "";
            dtls.gender = (userdetails.match("Gender=(.*)~Country") != null) ? userdetails.match("Gender=(.*)~Country")[1] : "";
        }
        dtls.age = (dtls.dob != "") ? getAgeFromDOB(dtls.dob) : "";
        return dtls;
    };

    mod_lotame.init = function () {
        var userDetails = userDetailsFromCookie();

        if (userDetails.gender != "" || userDetails.age != "") {
            if (typeof _cc2801 != 'undefined') {
                _cc2801.add("act", userDetails.act);
                _cc2801.add("dem", "toi.web:gender=" + userDetails.gender);
                _cc2801.add("dem", "toi.web:age=" + userDetails.age);
                if (typeof _cc2801.bcp != 'undefined') {
                    _cc2801.bcp();
                }
            }
        }
    };

    mod_lotame.init();

    event.subscribe(["user.login"], function (user) {
        if (typeof mod_lotame.init == 'function') {
            mod_lotame.init();
        }
    });
});
define('tiljs/social/twitter',["../social/social", "../ui", "../logger", "../event", "../util", "jquery", "module"], function (social, ui, logger, event, util, $, module) {
    var mod_twitter = new social("twitter", "twitter");
    var default_config = {
        parse: false,
        js: "//platform.twitter.com/widgets.js",
        js_id: "twitter-wjs",
        share_url: "https://twitter.com/share",
        via: null,
        format: "{{:title}}",
        sharePageTitle: true
    };
    var config = util.extend(true, {}, default_config, module.config());
    mod_twitter.setJS(config.js, config.js_id);
    mod_twitter.addPlugin({
        id: "button",
        js: true,
        init: function (ele, plugin) {
            var element = $(ele);
            var data = util.data(ele);
            var default_params = {
                //                size:"large", //
                count: "vertical", // horizontal, vertical, none
                url: location.href
            };
            var params = util.extend(true, {}, default_params, data);
            params.url = data.url || data.href || element.attr("href") || params.href;
            var tweet_button = $("<a class='twitter-share-button'></a>");
            //            tweet_button.attr("href",params.url);
            //Using this because data method in jquery does not append dom element
            $.each(params, function (name, value) {
                tweet_button.attr("data-" + name, value);
            });
            element.empty();
            element.append(tweet_button);
            mod_twitter.parse(ele);
        }
    });

    mod_twitter.addPlugin({
        id: "frame",
        js: true,
        init: function (ele, plugin) {

            var element = $(ele);
            var data = util.data(ele);
            var default_params = {
                twtid: "",
                theme: 'light'
            };
            var params = util.extend(true, {}, default_params, data);

            var divid = "twt-" + params.twtid;
            if (window.twttr) {
                twttr.widgets.createTweet(
                    params.twtid,
                    document.getElementById(divid),
                    {
                        theme: params.theme
                    }
                );
            }
        }
    });

    mod_twitter.addPlugin({
        id: "share",
        alias: ["tweet"],
        events: {
            click: function (e) {
                var data = util.data(this);
                mod_twitter.tweet(data.url || $(this).attr("href"), util.format(data.format || config.format, data), data.via || config.via, this);
            }
        },
        init: function (ele, plugin) {
            //            console.log(plugin.id + " init called");
            //            $(ele).click(function (e) {
            //                mod_twitter.tweet($(this).attr("data-url") || $(this).attr("href"));
            //                e.preventDefault();
            //            })
        }
    });
    mod_twitter.tweet = mod_twitter.share = function (url, text, via, element) {
        text = ( typeof text == "string" ) ? text.trim() : text;
        var tweetObj = {
            url: mod_twitter.getAbsoluteUrl(url),
            text: text || ( config.sharePageTitle === true ? document.title.split("|")[0] : "" )
        };
        if (via) {
            tweetObj.via = via;
        }
        mod_twitter._share(config.share_url, tweetObj, {
            name: 'twitter_tweet_dialog',
            width: 500,
            height: 400
        }, element);
    };
    mod_twitter.addPlugin({
        id: "follow",
        events: {
            click: function (e) {
                mod_twitter.follow($(this).attr("data-url") || $(this).attr("href"));
            }
        },
        init: function (ele, plugin) {
        }
    });
    mod_twitter.follow = function (url, options) {
        var _url = mod_twitter.getAbsoluteUrl(url);
        var win = window.open(url, "_blank");
        win.focus();
    };
    mod_twitter.addPlugin({
        id: "login",
        //        js: true,
        init: function (ele, plugin) {
            //            console.log(plugin.id + " init called");
            //            $(ele).click(function (e) {
            //                mod_twitter.login();
            //                e.preventDefault();
            //            })
        }
    });
    var __perms = null;
    mod_twitter.login = function (permissions, callback) {
    };
    mod_twitter.addPlugin({
        id: "logout",
        init: function (ele, plugin) {
            //            console.log(plugin.id + " init called");
            //            $(ele).click(function (e) {
            //                mod_twitter.logout();
            //                e.preventDefault();
            //            })
        }
    });
    mod_twitter.parse = function (ele) {
        if (typeof twttr !== "undefined") {
            twttr.widgets.load(ele);
        } else {
            logger.warn("'twttr' is required in parse");
        }
    };
    mod_twitter.logout = function (callback) {
    };
    mod_twitter.beforeinit = function () {
    };
    mod_twitter.beforeloadjs = function () {
    };
    mod_twitter.afterloadjs = function () {
        if (typeof twttr !== "undefined") {
            //                twttr.ready(function (twttr) {
            //                     attachtwitterevent();
            //                });
            logger.log("twttr js loaded");
            var event_names = ["click", "tweet", "retweet", "follow", "favorite"];
            util.each(event_names, function (k, event_name) {
                if (event_names.hasOwnProperty(event_name)) {
                    twttr.events.bind(event_name, function (event_name) {
                        return function (intent_event) {
                            event.publish("twttr." + event_name, {
                                intent_event: intent_event
                            });
                        };
                    }(event_name));
                }
            });
        } else {
            logger.warn("'twttr' is required in afterloadjs");
        }
    };
    var currentUser = null;
    mod_twitter.getUser = function (callback) {
        //        if (typeof FB !== "undefined" && !currentUser) {
        //            FB.api('/me', function (response) {
        //                if (callback) {
        //                    currentUser = response;
        //                    callback(response);  //response is the basic user object
        //                }
        //            });
        //        } else {
        //            if (callback) {
        //                callback(currentUser);
        //            }
        //        }
    };
    mod_twitter.onlogin = function (callback) {
        //        event.subscribe("FB.auth.authResponseChange.connected", function (resp) {
        //            mod_twitter.getUser(function (user) {
        ////                $("[data-plugin='" + opt.plugins.fb_login + "']").hide();
        ////                $("[data-plugin='" + opt.plugins.fb_logout + "']").show();
        //
        //                if (callback) {
        //                    callback(user, resp);
        //                }
        //            })
        //        });
    };
    mod_twitter.onlogout = function (callback) {
        //        event.subscribe(["FB.auth.authResponseChange.not_authorised", "FB.auth.authResponseChange.failed"], function (resp) {
        ////            $("[data-plugin='" + opt.plugins.fb_logout + "']").hide();
        ////            $("[data-plugin='" + opt.plugins.fb_login + "']").show();
        //
        //            if (callback) {
        //                currentUser = null;
        //                callback(resp);
        //            }
        //        });
    };
    
    $(document).ready(function(){
      mod_twitter.init(config);
    });
    return mod_twitter;
});

define('tiljs/social/pinterest',["../social/social", "../ui", "../logger", "../event", "../util", "../load", "jquery", "module"], function (social, ui, logger, event, util, load, $, module) {
    var mod_pinterest = new social("pinterest", "pinterest");
    var default_config = {
        parse: false,
        js: "//assets.pinterest.com/js/pinit.js",
        js_id: "pinterest-js",
        share_url: "//www.pinterest.com/pin/create/button/"
    };
    var config = util.extend(true, {}, default_config, module.config());
    mod_pinterest.setJS(config.js, config.js_id);
    mod_pinterest.addPlugin({
        id: "button",
        //        js:true,
        init: function (ele, plugin) {
            var element = $(ele);
            var data = util.data(ele);
            var default_params = {
                //                size:"large", //
                "pin-do": "buttonPin",
                "pin-config": "above" // horizontal, vertical, none
            };
            var params = util.extend(true, {}, default_params, data);
            params.href = data.url || data.href || element.attr("href") || params.href;
            var fb_like = $("<a></a>");
            var prm = {
                url: mod_pinterest.getAbsoluteUrl(params.href),
                media: mod_pinterest.getAbsoluteUrl(params.image),
                description: params.summary
            };
            fb_like.attr("href", "http://www.pinterest.com/pin/create/button/?" + $.param(prm));
            //Using this because data method in jquery does not append dom element
            $.each(params, function (name, value) {
                fb_like.attr("data-" + name, value);
            });
            element.empty();
            element.append(fb_like);
            mod_pinterest.parse(ele);
        }
    });
    mod_pinterest.addPlugin({
        id: "share",
        alias: ["pin"],
        events: {
            click: function (e) {
                var data = util.data(this);
                mod_pinterest.share(data.url || $(this).attr("href"), data.title, data.summary, data.image, this);
            }
        },
        //        js:true,
        init: function (ele, plugin) {
        }
    });
    mod_pinterest.pin = mod_pinterest.share = function (url, title, summary, image, element) {
        mod_pinterest._share(config.share_url, {
            url: mod_pinterest.getAbsoluteUrl(url),
            description: title,
            summary: summary,
            media: mod_pinterest.getAbsoluteUrl(image)
        }, {
            name: 'pinterest_pin_dialog',
            width: 700,
            height: 400
        }, element);
    };
    mod_pinterest.addPlugin({
        id: "follow",
        events: {
            click: function (e) {
                mod_pinterest.follow($(this).attr("data-url") || $(this).attr("href"));
            }
        },
        init: function (ele, plugin) {
        }
    });
    mod_pinterest.follow = function (url, options) {
        var _url = mod_pinterest.getAbsoluteUrl(url);
        var win = window.open(url, "_blank");
        win.focus();
    };
    mod_pinterest.parse = function (ele) {
        var pinJs = $('#' + config.js_id);
        pinJs.remove();
        load.js(config.js, null, config.js_id);
    };
    $(document).ready(function(){
      mod_pinterest.init(config);
    });
    return mod_pinterest;
});

define('tiljs/social/linkedin',["../social/social", "../ui", "../logger", "../event", "../util", "jquery", "module"], function (social, ui, logger, event, util, $, module) {
    var mod_linkedin = new social("linkedin", "linkedin");
    var default_config = {
        parse: false,
        js: "//platform.linkedin.com/in.js",
        js_id: "linkedin-js",
        //                share_url:"https://www.linkedin.com/cws/share"
        share_url: "http://www.linkedin.com/shareArticle"
    };
    var config = util.extend(true, {}, default_config, module.config());
    mod_linkedin.setJS(config.js, config.js_id);
    mod_linkedin.addPlugin({
        id: "button",
        js: true,
        init: function (ele, plugin) {
            //<script type="IN/Share" data-url="http://www.google.com" data-counter="top"></script>
            var element = $(ele);
            var data = util.data(ele);
            var default_params = {
                url: location.href,
                counter: "top" //top
            };
            var params = util.extend(true, {}, default_params, data);
            params.url = data.url || data.href || element.attr("href") || params.href;
            var fb_like = $("<script type='IN/Share'></script>");
            //Using this because data method in jquery does not append dom element
            $.each(params, function (name, value) {
                fb_like.attr("data-" + name, value);
            });
            element.empty();
            element.append(fb_like);
            mod_linkedin.parse(ele);
        }
    });
    mod_linkedin.addPlugin({
        id: "share",
        events: {
            click: function (e) {
                var data = util.data(this);
                mod_linkedin.share(data.url || $(this).attr("href"), data.title, data.summary, data.image, this);
            }
        },
        init: function (ele, plugin) {
        }
    });
    mod_linkedin.share = function (url, title, summary, image, element) {
        mod_linkedin._share(config.share_url, {
            url: mod_linkedin.getAbsoluteUrl(url),
            title: title,
            summary: summary
        }, {
            name: 'linkedin_share_dialog',
            width: 500,
            height: 570
        }, element);
        //        window.open("//linkedin.com/submit?url=" + _url + "&title=" + $("title").text(), "_blank");
    };
    mod_linkedin.parse = function (ele) {
        if (typeof IN !== "undefined") {
            IN.parse(ele);
        } else {
            logger.warn("'IN' is required in parse");
        }
    };
    $(document).ready(function(){
      mod_linkedin.init(config);
    });
    return mod_linkedin;
});

define('tiljs/social/googleplus',["../social/social", "../ui", "../logger", "module", "../event", "../util", "jquery"], function (social, ui, logger, module, event, util, $) {
    /*
     <body itemscope itemtype="http://schema.org/Product">
     <h1 itemprop="name">Shiny Trinket</h1>
     <img itemprop="image" src="{image-url}" />
     <p itemprop="description">Shiny trinkets are shiny.</p>
     </body>
     */
    var default_config = {
        parse: false,
        js: "https://apis.google.com/js/plusone.js?onload=attachgoogleevent",
        js_id: "googleplus-js",
        share_url: "https://plus.google.com/share"
    };
    var config = util.extend(true, {}, default_config, module.config());
    var mod_googleplus = new social("googleplus", "googleplus");
    mod_googleplus.setJS(config.js, config.js_id);
    mod_googleplus.addPlugin({
        id: "button",
        js: true,
        init: function (ele, plugin) {
            var element = $(ele);
            var data = util.data(ele);
            var default_params = {
                href: location.href,
                size: "tall", //standard , small, medium, tall
                annotation: "bubble", //bubble, inline, none
                width: null //integer
            };
            var params = util.extend(true, {}, default_params, data);
            params.href = data.url || data.href || element.attr("href") || params.href;
            var fb_like = $("<div class='g-plusone'></div>");
            //Using this because data method in jquery does not append dom element
            $.each(params, function (name, value) {
                fb_like.attr("data-" + name, value);
            });
            element.empty();
            element.append(fb_like);
            mod_googleplus.parse(element[0]);
        }
    });
    mod_googleplus.addPlugin({
        id: "share",
        events: {
            click: function (e) {
                var data = util.data(this);
                mod_googleplus.share(data.url || $(this).attr("href"), data.title, data.summary, data.image, this);
            }
        },
        config: {
            shareUrl: ""
        },
        init: function (ele, plugin) {
        }
    });
    mod_googleplus.share = function (url, title, summary, image, element) {
        mod_googleplus._share(config.share_url, {
            url: mod_googleplus.getAbsoluteUrl(url)
        }, {
            name: 'googleplus_share_dialog',
            width: 500,
            height: 400,
            scrollbars: 1
        }, element);
        //        ui.window("https://plus.google.com/share?url=" + encodeURIComponent(_url)
        //            , {name: 'googleplus_pin_dialog', width: 700, height: 440});
    };
    mod_googleplus.addPlugin({
        id: "follow",
        events: {
            click: function (e) {
                mod_googleplus.follow($(this).attr("data-url") || $(this).attr("href"));
            }
        },
        init: function (ele, plugin) {
        }
    });
    mod_googleplus.follow = function (url, options) {
        var _url = mod_googleplus.getAbsoluteUrl(url);
        var win = window.open(url, "_blank");
        win.focus();
    };
    mod_googleplus.parse = function (ele) {
        if (typeof gapi !== "undefined") {
            gapi.plusone.go();
            //            gapi.plusone.render();
        } else {
            logger.warn("'gapi' is required in parse");
        }
    };
    $(document).ready(function(){
      mod_googleplus.init(config);
    });
    return mod_googleplus;
});

/**
 var __times = __times || [];
 __times.push(['event','subscribe','times.load',function(){
	///this is called when toicommonjs is loaded

 }]);

 __times.push(function(){
	///this is called when toicommonjs is loaded

 });

 */
define('tiljs/plugin/pre_event',["../event", "module", "../util", "../is"], function (event, module, util, is) {
    var mod_pre_event = {};
    var default_config = {};
    var config = util.extend(true, {}, default_config, module.config());

    mod_pre_event.init = function () {
        if (window.__times) {
            mod_pre_event.process(window.__times);
        } else {
            window.__times = [];
        }

        window.__times.push = function (v) {
            mod_pre_event.processOne(v);
            return Array.prototype.push.apply(this, arguments);
        };
    };

    mod_pre_event.process = function (__times) {
        util.each(__times, function (k, v) {
            mod_pre_event.processOne(v);
        });
    };

    mod_pre_event.processOne = function (v) {
        try {
            if (is.funct(v)) {
                v();
            } else if (is.array(v)) {
                var mod = v[0],
                    method = v[1],
                    params = v.splice(2);

                require(mod)[method].apply(this, params);
            } else {
                event.publish("logger.warn", "Invali params in __times");
            }
        } catch (e) {
            event.publish("logger.error", e);
        }
    };

    mod_pre_event.init();


    return mod_pre_event;
});


var TimesApps = window.TimesApps || {};
TimesApps.GA = (function(){
    var api, fn;
    
    fn = {
    	_getGACategory: function(){
            category = 'WEB-';
            if (typeof toiprops==='object' && toiprops._SCN_pg) {
                if  (typeof toiprops.msid !== 'undefined' && toiprops.msid == "82996824") {
                    category +=  'CL/city/mumbai/mumbaimirror';
                } else {
                    category +=  (toiprops._Tmpl_pg=='articlelist')?'CL':(toiprops._Tmpl_pg || toiprops._Tmpl_SCN);
                    category += (toiprops.seoLocation && toiprops._Tmpl_pg && toiprops._Tmpl_pg.indexOf('show')===-1)?'/'+toiprops.seoLocation:'';
                    category += (category.match(/CL$/))? document.location.pathname:'';
                }
            }else{
                category += document.location.pathname;
            }
            
            return category;
        },
        _send: function(action, label){
            window.ga && window.ga('send', {
                hitType: 'event',
                eventCategory: fn._getGACategory(),
                eventAction: action,
                eventLabel: label
            });
        },
        _getGACategorySearch: function(){
            var isMatched = false;
            var curPath = window.location.pathname;
            var cl = ['/india','/city', '/world','/business','/sports','/education','/elections'];
            var pa = curPath && curPath.split('/');
            for(let i = 0; i < cl.length; i++) {
                if (pa[i] && curPath.indexOf(pa[i])) {
                    isMatched = true;
                    break;
                }
            }
            
            category = 'WEB-TOI-';
            if (document.location.pathname.indexOf('/briefs')===0){
                category += 'Brief';
            }
            else if (document.location.pathname.indexOf('/videoshow/')!==-1){
                category += 'Videoshow';
            }
            else if (document.location.pathname.indexOf('/articleshow/')!==-1){
                category += 'Articleshow';
            }
            else if (document.location.pathname.indexOf('/photostory/')!==-1){
                category += 'Photostory';
            }
            else if (isMatched && !(curPath.indexOf('/articleshow/') > -1 || curPath.indexOf('/liveblog/') > -1 || curPath.indexOf('/photostory/') > -1 || curPath.indexOf('/videoshow/') > -1)) {
                category += 'CL-' + (Array.isArray(pa) && pa.length >= 2 ? pa[1] : '');
            }
            else {
                category += 'Others-' + (Array.isArray(pa) && pa.length >= 2 ? pa[1] : '');
            }
            
            return category;
        }
        
    };
    
    api = {
        send : function(action, label){ return fn._send(action, label); },
        getGACategory: function(){ return fn._getGACategory(); },
        getGACategorySearch: function(){ return fn._getGACategorySearch(); }
    };
    
    return api;
}());
TimesApps.getGACategory = function(){
    return TimesApps.GA.getGACategory();
}

TimesApps.getGACategorySearch = function(){
    return TimesApps.GA.getGACategorySearch();
}

define('pgtrack',[], function () {
    var mod_pgtrack = {};
    mod_pgtrack.evtCap = function (e) {
        var target = e.target;
        var levelsToCheck = 3;
        try {
            if (target) {
                while (levelsToCheck > 0 && target != document.querySelector('body')) {
                    if (target.getAttribute("pg") != null) {
                        mod_pgtrack.track(mod_pgtrack.addUrl(target));
                        break;
                    }
                    levelsToCheck--;
                    target = target.parentNode;
                }
            }
        } catch (ex) {}
    };

    mod_pgtrack.addUrl = function (target) {

        var pg = target.getAttribute("pg");
        
        if (pg && pg.indexOf('getpageurl') > -1) {
            pg = pg.replace('getpageurl', window.location.href);
        }
        if (pg && pg.indexOf('geturl') > -1) {

            if (target.nodeName == 'IMG' || target.nodeName == 'SPAN') {
                target = target.parentElement;
            }
            pg = pg.replace('geturl', target.getAttribute("href"));
        }
        if (pg && pg.indexOf('getmsid') > -1) {
            if (target.nodeName == 'IMG' || target.nodeName == 'SPAN') {
                target = target.parentElement;
            }
            pg = pg.replace('getmsid', target.getAttribute("href").match(/\d+(?=\D*$)/)[0]);
        }

        return pg;

    };

    mod_pgtrack.track = function (pgatt) {
        if (pgatt != null) {
            var pgat = pgatt.split('#');
            var trcode = null;
            if (pgatt != null) {
                var pgat = pgatt.split('#'),action,label;
                //************ ACTION ************//
                var si = pgatt.indexOf('~'), action;
                if (si > -1) {
                    action = pgatt.substr(si + 1);
                    pgatt = pgatt.substr(0, si);
                    pgat = pgatt.split('#');
                }else{
                    action = pgat[0]
                }
                
                //************ Label ************//
                if (pgat[1] ) label=pgat[1];
                var trcode = null;
                trcode = ga('send', 'event', TimesApps.getGACategory(), action, label);
            }
        }
    };
    $(document).click(mod_pgtrack.evtCap);
    return mod_pgtrack;
});
define('breakingnews',["jquery", "tiljs/ajax", "tiljs/load"], function ($, ajax, load) {
    //********************************************
    //************ START Breaking News ***********
    //********************************************
    var brkNObj = {};
    brkNObj.reloadtime = 2000; //12000;
    brkNObj.breakingnews = function () {
        //var hostUrl = '/breakingnews/breakingnews.html';
        var hostUrl = 'https://toibnews.timesofindia.indiatimes.com/TOIBNews/breakingnews.html';
        if (document.location.host == "toidev.indiatimes.com" || document.location.host == "jcmsdev.indiatimes.com") {
            hostUrl = '/home1_articlecount_test.cms'
        }
        if (window.homeObj && window.homeObj.breakingNewsPause == 0) {
            ajax.get(hostUrl, function (data) {
                data = data.replace(/[\r\n]/g, "");
                if (!$.trim(data)) {
                    myMethod();
                    brkNObj.reloadtime = 180000;
                    return true;
                }
                var stories = data.split(/[|]/g);
                $('.breaking-news .wrapper').html("")
                $('.breaking-news .wrapper').html("<ul id='js-news'/>");
                var long_story_count = 0;
                var long_story_char = 0, dataLength = 0;
                $.each(stories, function (index, val) {
                    val = '<li class="news-item">' + val + '</li>';
                    $('#js-news').append(val);

                    var textLength = $('#js-news li').eq(index).text().length;
                    dataLength += textLength;
                    if (textLength.length > 90) {
                        long_story_char += ( textLength.length - 90 );
                        long_story_count++;
                    }
                });
                myMethod(stories.length, dataLength, long_story_count, long_story_char);
            });
        } else {
            setTimeout(function () {
                brkNObj.breakingnews()
            }, brkNObj.reloadtime);
        }
        myMethod = function (slen, dlen, lStryCount, longstorychar) {
            if (slen && dlen) {
                $('.breaking-news').show();
                if ($('#adsdivLyr').height() > 0) {
                    $('#adsdivLyr').css("margin-top", "10px")
                }
                if ($('#js-news').ticker()) {
                    $('#js-news').show();
                }
                if (slen < 2) $('.ticker-controls').hide();
                if (!dlen) return true;
                brkNObj.reloadtime = slen > 1 ? slen : 2;
                dlen = slen > 1 ? dlen : dlen * 2;
                // 	brkNObj.reloadtime = ($.fn.ticker.defaults.pauseOnItems)?
                // 						($.fn.ticker.defaults.pauseOnItems*brkNObj.reloadtime):
                // 						(3000*brkNObj.reloadtime);
                var animationTime = longstorychar * 155; //lStryCount * 3000;
                brkNObj.reloadtime = ( slen * 6000 ) + brkNObj.reloadtime + animationTime + ( slen * 2500 );
                brkNObj.reloadtime = brkNObj.reloadtime * 5;
            } else {
                $('.breaking-news').hide();
            }
            setTimeout(function () {
                brkNObj.breakingnews()
            }, brkNObj.reloadtime);
        };
    };
    setTimeout(function () {
        if ($('#js-news').length > 0) {
            brkNObj.breakingnews();
        }
    }, 8000);
    //************* END Breaking News *************
    return brkNObj;
});
define('global',[], function () {
    var global = {};
    var mod_global = {};
    mod_global.global = global;
    mod_global.set = function (key, value) {
        global[key] = value;
    };
    mod_global.get = function (key) {
        return global[key];
    };
    return mod_global;
});
define('navsearchbox',['jquery'], function ($) {
    if ($("#pageType").val() && $("#pageType").val().indexOf("video") != -1) {
        //not required for videos
        return;
    }
    var navsearchbox = {};
    navsearchbox.toTitleCase = function (a) {
        return a.replace(/\w\S*/g, function (b) {
            return b.charAt(0).toUpperCase() + b.substr(1).toLowerCase()
        })
    };
    navsearchbox.trimToWords = function(string,no){
        
        return string.split(" ").splice(0,no).join(" ").substring(0,120);
        
    }
    navsearchbox.validateForm = function () {
        
        if ($('#query').val() == "") {
            alert("Please enter text to search");
            return false
        } else {
            var d = document.frmsearch1.query.value;
            if (!navsearch.isSearchedKeywordValid(d)) {
                $('#nav_autosuggest_result').html('');
                return false;
            }
            var a = -1;
            a = document.frmsearch1.search1.value;
            var c = null;
            if (d == "") {
                alert("Please enter text to search");
                document.frmsearch1.query.focus();
                return false
            }
            switch (a) {
                case "0":
                    var b = navsearchbox.trimToWords(navsearchbox.toTitleCase(d),10);
                    c = "https://timesofindia.indiatimes.com/topic/" + b.replace(/\s+/g, "-");
                    break;
                case "1":
                    c = "http://search.indiatimes.com/websearch.cms";
                    document.frmsearch1.type.value = 1;
                    break;
                case "2":
                    c = "http://search.indiatimes.com/websearch.cms";
                    document.frmsearch1.type.value = 0;
                    break;
                case "3":
                    var b = navsearchbox.toTitleCase(d);
                    c = "https://timesofindia.indiatimes.com/topic/" + b.replace(/\s+/g, "-") + "/videos";
                    break;
                case "4":
                    var b = navsearchbox.toTitleCase(d);
                    c = "http://photogallery.indiatimes.com/resultsearch.cms?source=toisearch&q=" + b.replace(/\s+/g, "-");
                    document.frmsearch1.target = "_blank";
                    break;
                default:
                    break;
            }
            // ga('send','event', TimesApps.getGACategory(),'NavBar-Search','Search_Initiate | '+document.frmsearch1.query.value);
            ga('send','event', TimesApps.getGACategorySearch(),'NavBar-Search-Initiate-Manually_Entered', window.location.href + '-' +document.frmsearch1.query.value);
            window.location.href = c;
            //document.frmsearch1.action = c;
            //document.frmsearch1.submit();
            return false;
        }
    };
    $("[data-plugin='navsearchboxvalidate']").on("submit", navsearchbox.validateForm);

    (function () {

        window.navsearch = {};
        var keyCode, $listItems, $selected, $current, lasttext;
        window.navsearch.isSearchedKeywordValid = function (searchKeyword) {
          if (!searchKeyword) return false;
          const allowedterm = /^[-@.\/#&+\w\s]*$/;
          if (searchKeyword.match(allowedterm)) {
            return true;
          }
          return false;
        };
        window.navsearch.handleAutoSearchResult = function (data) {
            $('#nav_autosuggest_result').html('');
            if (data && $.type(data) == 'array') {

                var len = data[1].length;

                for (var i = 0; i < len; i++) {
                    var q = data[1][i][0].replace(/\b[a-z]/g, function (f) {
                        return f.toUpperCase();
                    });
                    if(data[1][i][2] && typeof data[1][i][2] === 'object' && data[1][i][2].indexOf(10) !== -1){ continue;}
                    var dom = '',
                        link = "https://timesofindia.indiatimes.com/topic/" + q.replace(/\s+/g, "-");
                    dom = '<li><a href="' + link + '" target="_blank">' + q + '</li>';
                    $('#nav_autosuggest_result').append(dom);
                }

                $listItems = $('#nav_autosuggest_result li');
                
                $('#nav_autosuggest_result li a').click(function(){
                    var q = $(this).text();
                    ga('send','event', TimesApps.getGACategorySearch(),'NavBar-Search-Initiate-Auto_Suggestion', window.location.href + '-' + q);
                });

            }
        };

        var ajaxReq = null;

        $("[data-plugin='navsearchboxvalidate'] #query").on('keyup', '', function (evt) {
            keyCode = evt.keyCode;
            var _search_txt = $(this).val().trim(),
                _suggestion_box = $('#nav_autosuggest_result');

            if (_search_txt && !(keyCode == 40 || keyCode == 38 || keyCode == 27 && $('#nav_autosuggest_result').is(":visible"))) {

                var _search_api_url = 'https://suggestqueries.google.com/complete/search?client=youtube&jsonp=navsearch.handleAutoSearchResult&q=' + _search_txt;
                if (ajaxReq) ajaxReq.abort();
                
                if (navsearch.isSearchedKeywordValid(_search_txt)) {
                    ajaxReq = $.ajax({
                        type: "GET",
                        dataType: "jsonp",
                        url: _search_api_url,
                        success: function (data) {
    
                        }
                    });
                } else {
                    $('#nav_autosuggest_result').html('');
                }

            } else if (_search_txt) {

                if (keyCode == 27) { // 27 is key code of ESC key to close the list on esc key
                    !($('#main-nav').length) && $('#nav_autosuggest_result').closest('.search-form').removeClass('hover')
                } else if (keyCode == 40) {

                    !($('#main-nav').length) && $('#nav_autosuggest_result').closest('.search-form').addClass('hover')

                    if (!$listItems.hasClass("selected")) {
                        $listItems.first().addClass("selected");
                        $("#query").val($listItems.first().find("a").text());

                    } else {
                        $selected = $listItems.filter('.selected');


                        var $current;
                        if (!$selected.length || $selected.is(':last-child')) {
                            $current = $listItems.eq(0);
                        } else {
                            $current = $selected.next();
                        }
                        $selected.removeClass('selected');
                        $current.addClass('selected');
                        $("#query").val($current.find("a").text());

                    }


                } else if (keyCode == 38) {

                    !($('#main-nav').length) && $('#nav_autosuggest_result').closest('.search-form').addClass('hover')

                    if (!$listItems.hasClass("selected")) {
                        $listItems.first().addClass("selected");
                        $("#query").val($listItems.first().find("a").text());

                    } else {

                        $selected = $listItems.filter('.selected');

                        var $current;
                        if (!$selected.length || $selected.is(':first-child')) {
                            $current = $listItems.last();
                        } else {
                            $current = $selected.prev();
                        }
                        $selected.removeClass('selected');
                        $current.addClass('selected');
                        $("#query").val($current.find("a").text());


                    }

                }

            } else {
                $('#nav_autosuggest_result').html('');
            }


        });
    })();

    return navsearchbox;
});
define('navigation',["jquery", "tiljs/ajax", "global", "tiljs/plugin/lazy", "tiljs/is", 'tiljs/cookie', 'navsearchbox'], function ($, ajax, global, lazy, is, cookie, navsearchbox) {
    var navObj = {
        func: {},
        getelem: {},
        ajax: {}
    };
    global.set('nav', navObj);
    //************************************************
    //************* --START NAVIGATION-- *************
    //************************************************

    (function () {
        var _geoloc = cookie.get("geolocation");
        var geolan = (window.getCityJSON
        && getCityJSON[_geoloc]
        && getCityJSON[_geoloc]['lang']) ? getCityJSON[_geoloc]['lang'] : 'hindi';
        if ($('#nav-tv.category').length) {
            ajax.get('/tvlistingdrop.cms?languagename=' + geolan + '&type=default', function (data) {
                $('#rnav45449811, #rnav41505232').remove();
                $('body').append(data);
            });
        }
    })();

    /** Amazon navigation for GEO location */
    jQuery(document).ready(function ($) {
        var cnt_loc = cookie.get('cnt');

        //      if (cnt_loc === undefined){
        //          // Lets try after 3 seconds if cookies was not set already.
        //          setTimeout( function () {
        // 	cnt_loc = cookie.get('cnt');
        // 	loadNavGeoCodes(cnt_loc);
        // }, 3000 );
        //      }else{
        //          loadNavGeoCodes(cnt_loc);
        //      }

        function loadNavGeoCodes(country) {
            if (country == 'UK') {
                var url = '';
                if ($("#nav-amazon").length > 0) {
                    url = "/amazonuk.cms";
                } else {
                    url = "/amazon_drop.cms?geoid=5";
                }
                $.get(url, function (data) {
                    $("#nav-amazon").replaceWith(data);
                    $("#amzn_domain").show();
                    $("li[drop='amazon']").html(data);
                })
            } else {
                $("#amzn_domain").show();
            }
        }
    });
    /** end of Amazon navigation for GEO location */
    function showFirst(tthis) {
        var id = $(tthis).closest('li').find('.list7 li:first').attr('id');
        $('#rnav' + id).show();
    }

    function navHoverIn(tthis) {
        if ($(tthis).parent().attr("class").match(/current/) || $(tthis).parent().attr("class").match(/category/)) {
            return true;
        }
        navObj.id = $(tthis).parent().attr('id');
        navObj.extfile = '';
        navObj.extfile = $(tthis).attr('data-external');
        navObj.name = navObj.id.substring(4);
        $(tthis).parent().find("li:first").addClass("active");
        showFirst(tthis);
        if (navObj.id == 'nav-home' && $('#rnav-2128932452')) {
            $('.rnavclass').hide();
            $('#rnav-2128932452').show();
            if (!navObj.ajax[navObj.id] && $(tthis).hasClass('lnavdata'))
                $('.level-one .loader').show();
        }
        if (!navObj.ajax[navObj.id] && $(tthis).hasClass('lnavdata')) {

            var populateData = function (id) {
                var q = id;
                if (typeof s !== "undefined" && s == 1) {
                    q = q + "&s=" + s;
                }
                if (q == "entertainment-tv" || q == "tv") {
                    var g = cookie.get("geolocation");
                    var lan = (window.getCityJSON
                    && getCityJSON[g]
                    && getCityJSON[g]['lang']) ? getCityJSON[g]['lang'] : 'hindi';
                    ajax.get('/tvlistingdrop.cms?languagename=' + lan, function (data) {
                        $('#rhsnav' + id).append(data);
                    });
                    //ajax.get( '/tvlistingdropme.cms?languagename=hindi', function ( data ) {
                    //    $( '#rhsnav' + id ).append( data );
                    //});
                }
                if (q.match(/movie-reviews/g)) {
                    ajax.get('/nav_moviereview.cms?mvlang=' + q, function (data) {
                        $('#rhsnav' + id).html(data);
                    });
                }
                /*ajax code with jquery*/
                /*if($('#nav-'+id).hasClass('nohead')){
                 $( '.level-one .loader' ).show();
                 } */
                navObj.ajax['nav-' + id] = 1;
                var url = (navObj.extfile) ? navObj.extfile : '/homeajax.cms?nav=' + q;
                $.ajax({
                    url: url,
                }).done(function (data) {
                    $('#rhsnav' + id).append(data);
                    var idFirst = $('#rhsnav' + id).siblings('.left-column').find('.list7 li:first').attr('id');
                    idFirst = idFirst && idFirst.indexOf('lnav') > -1 ? idFirst.replace('lnav', '') : idFirst;
                    $('#rnav' + idFirst).show();
                    $('.level-one .loader').hide();
                    navObj.ajax['nav-' + id] = 1;
                    //hack for travel ********
                    $('#rnavtravel').html();
                    $('#rnavtravel').html($('#rnav22806450').html());
                    $('#rnav22806450').hide();
                    //end hack for travel ********
                    //Hack Home Nav other than home page ********
                    if (navObj.id == 'nav-home' && $('#rnav-2128932452')) {
                        $('.rnavclass').hide();
                        $('#rnav-2128932452').show();
                    }
                    //End Hack Home Nav other than home page ********
                    lazy.load();
                    /*if( navObj.activeTab )
                     nav2HoverIn( navObj.activeTab )*/
                })
                    .fail(function () {
                        navObj.ajax['nav-' + id] = 0;
                    })
                /*ajax code with jquery*/
            };
            populateData(navObj.name);
        }
        if (!navObj.getelem[navObj.id] && $('#rnav' + navObj.name).length) {
            var populateData = function (id) {
                $span = $('#rnav' + id).clone();
                $('#rnav' + id).remove();
                $('#nav-' + id + ' #rhsnav' + id).append($span);
                $('#rnav' + id).show();
            };
            populateData(navObj.name);
            navObj.getelem[navObj.id] = 1;
        }
        if (!navObj.timeoutId) {
            navObj.timeoutId = window.setTimeout(function () {
                navObj.timeoutId = null;
                $(".level-one .hover").removeClass("hover");
                $('#rnav' + navObj.name).show();
                $("#" + navObj.id).addClass("hover");
                //hack for travel ********
                $('#rnav22806450').hide();
                //end hack for travel ********
                lazy.load();
            }, 300);
        }
    }

    function navHoverOut() {
        if (navObj.timeoutId) {
            window.clearTimeout(navObj.timeoutId);
            navObj.timeoutId = null;
        } else {
            $(".dropdown, .all-sections").mouseleave(function () {
                $(".level-one .hover").removeClass("hover");
                $(".list7 li.active").removeClass("active");
                $(".rnavclass").hide();
            });
        }
    }

    $("#header, #trending, #content, .article-content-wrapper, .breaking-news").hover(function () {
        $(".level-one .hover").removeClass("hover");
        $(".search-form.hover").removeClass("hover");
        $(".rnavclass").hide();
        // $( "#query" ).attr( "disabled", "disabled" );
    });
    $(".search-form").hover(function () {
        $(".level-one li").removeClass("hover");
    });
    $("#navigation").on("mouseenter", ".navquery", function () {
        navHoverIn(this);
    }).on('mouseleave', ".navquery", function () {
        navHoverOut(this);
    });
    $(".navquery").on("click", function (event) {
        if (is.touch()) {
            var lastNav = window.curNav;
            window.curNav = $(this).attr("pg");
            if (typeof lastNav === "undefined" || lastNav !== window.curNav) {
                navHoverIn(this);
                return false;
            }
        }
        return true;
    });
    $(document).on("click"),
        function () {
            if (is.touch() && window.curNav !== null) {
                window.curNav = null;
                navHoverOut(this);
                //return false;
            }
        }

    function nav2HoverIn(tthis) {
        var str = $(tthis).attr('id');
        str = str.replace(/lnav/g, "");
        if (navObj.ajax[$(tthis).parents('.hover').attr('id')] != 1 || $("#rnav" + str).length == 0) {
            navObj.activeTab = tthis;
            $(tthis).parents('.two-column-layout').find('.loader').show();
            $('.rnavclass').hide();
            return false;
        }
        $(tthis).parents('.two-column-layout').find('.loader').hide();
        $(".rnavclass").hide();
        $(".level-one .active").removeClass("active");
        $(tthis).addClass('active');

        var parent = $(tthis).parents("ul.level-one li");
        if (parent.length == 0) {
            parent = $(tthis).parents(".two-column-layout")
        }

        parent.find("#rnav" + str).show();
        //hack for travel ********
        $('#rnav22806450').hide();
        lazy.load();
    }

    $(".lnavclass").mouseover(function () {
        nav2HoverIn(this);
    });
    $(".lnavclass a").click(function () {
        if (is.touch()) {
            var lastNav2 = window.curNav2;
            window.curNav2 = $(this).attr("pg");
            if (typeof lastNav2 === "undefined" || lastNav2 !== window.curNav2) {
                nav2HoverIn(this);
                return false;
            }
        }
        return true;
    });
    $(".latestwidget").click(function () {
        navObj.id = $(this).attr('id');
        url = '';
        loop = 0;
        
        if (navObj.id == 'latest' && !navObj[navObj.id]) {
            url = '/mostread_blockibeat.cms?tabname=mostread';
        } else if (navObj.id == 'mostcommented' && !navObj[navObj.id]) {
            url = '/mostcommented_block.cms?tabname=mostcomm';
        } else if (navObj.id == 'mostshared' && !navObj[navObj.id]) {
            url = '/mostshared_blocknew.cms?tabname=mostshared&top=5&tabname=mostshared';
        } else if (navObj.id == 'mosttrending' && !navObj[navObj.id]) {
            url = '/mosttrending_block.cms?tabname=trending';
            loop++;
        }

        if (url != '') {
            getContentWidgetCms(url, loop);
        }

        $(".latestwidget").removeClass('active');
        $(this).addClass('active');
        $(".tabcontent").hide();
        $('.' + navObj.id).show();
    });
    $(document).ready(function () {
        if ($(".mostshared ol li").length <= 3) {
            $("#mostshared").trigger('click');
        }
    });
    function getContentWidgetCms(url, loop) {
        loop++;
        if (loop > 1) {
            url = url + "&version=1";
        }
        ajax.get(url, function (data) {
            // Let try one more time with version nummber if li count is less than 3.
            if ($(data).find("ul li").length <= 3 && loop < 2) {
                getContentWidgetCms(url, loop);
            } else {
                $('.' + navObj.id + " ol").html(data);
                navObj[navObj.id] = 1;
                $('span.number').show();
            }
        });
    }

    $(".shopWidget").click(function () {
        navObj.id = $(this).attr('id');
        $(".shopWidget").removeClass('active');
        $(this).addClass('active');
        $(".tabcontent").hide();
        $('.' + navObj.id).show();
        lazy.load();
    });
    setTimeout(function () {
        $('span.number').show()
    }, 500);
    
    var lastScrollTop =0 , scrollDir = 'upwards' ;
    // when we don't require sticky nav, define var disabledStickyNav = 1;
    if (typeof ( disabledStickyNav ) === 'undefined') {
        navObj.stickyTop = $('#navigation').offset() ? $('#navigation').offset().top : 0;
        $(window).scroll(function () {
            navObj.windowTop = $(window).scrollTop();
            if (navObj.windowTop > navObj.stickyTop) {
                $('#navigation').addClass('sticky');
            } else {
                $('#navigation').removeClass('sticky');
            }
            
            var st = $(this).scrollTop();
            if (st > lastScrollTop){
                scrollDir = 'downwards';
                $('body').removeClass('scroll-up').addClass('scroll-down');    
                
             } else {
                  scrollDir = 'upwards';
                  $('body').addClass('scroll-up').removeClass('scroll-down');    
             }
             lastScrollTop = st;
        });
    }

    function getNavFn() {
        var dsktplist = null;
        return function () {
            if ($(window).width() <= 999) {
                if (!$('#navigation ul.level-one').hasClass('ipadflow')) {
                    $('#navigation ul.level-one').addClass('ipadflow');
                    if ($('#navigation ul.level-one li.nav-ipad .drpdwn-nav-ipad li').length < 1) {
                        var ipadlist = $('#navigation .level-one>li:visible:gt(8):not(".nav-home"):not(".nav-amazon"):not(".nav-ipad")').clone();
                        dsktplist = $('#navigation .level-one>li:visible:gt(8):not(".nav-home"):not(".nav-amazon"):not(".nav-ipad")');
                        $('#navigation ul.level-one li.nav-ipad').append('<ul class="drpdwn-nav-ipad"></ul>');
                        ipadlist.find('div.dropdown').remove();
                        $('#navigation ul.level-one li.nav-ipad .drpdwn-nav-ipad').append(ipadlist);
                        $('#navigation ul.level-one li.nav-ipad .drpdwn-nav-ipad').css('background', $('#navigation').css('background-color'));
                        $('#navigation ul.level-one').addClass('nooverflow');
                    }
                    dsktplist.hide();
                }
            }
            else {
                if (dsktplist != null) {
                    dsktplist.show();
                    $('#navigation ul.level-one').removeClass('ipadflow');
                }
            }
        }
    }

    var updateNavigation = getNavFn();

    $(window).resize(function () {
        updateNavigation();
    });
    $(document).ready(function () {
        if (!$("#pageType").val() || ( $("#pageType").val() && $("#pageType").val().indexOf("video") == -1 )) {
            $(".search-form").click(function () {
                $(".hover").removeClass("hover");
                $(this).addClass('hover');
                $('#nav_autosuggest_result').html('');
                $("#query").removeAttr("disabled");
                $("#query").focus();
            });
        }
        updateNavigation();
    });
    //************* END NAVIGATION *************
    return {};
});
/**
 * Created by rajan on 25/9/17.
 */

define( 'compatibility_toi',[], function () {return {};});

define("ajax", ["tiljs/ajax"], function (m) {
    return m;
});
define("event", ["tiljs/event"], function (m) {
    return m;
});
define("localstorage", ["tiljs/localstorage"], function (m) {
    return m;
});
define("preload", [],function(){});

define("util", ["tiljs/util"], function (m) {
    return m;
});
define("is", ["tiljs/is"], function (m) {
    return m;
});
define("ui", ["tiljs/ui"], function (m) {
    return m;
});
define("cookie", ["tiljs/cookie"], function (m) {
    return m;
});
define("event", ["tiljs/event"], function (m) {
    return m;
});
define("plugin/lazy", ["tiljs/plugin/lazy"], function (m) {
    return m;
});
define("load", ["tiljs/load"], function (m) {
    return m;
});
define("toicommonjs/rodate", ["rodate"], function (m) {
    return m;
});
define("logger", ["tiljs/logger"], function (m) {
    return m;
});
define("page", ["tiljs/page"], function (m) {
    return m;
});
define("user", ["tiljs/user"], function (m) {
    return m;
});
define("times/comments", ["comments"], function (m) {
    return m;
});
define("authorcomments", ["tiljs/apps/times/authorcomments"], function (m) {
    return m;
});
define('tiljs/apps/times/authorcomments',['jquery', 'event', 'plugin/lazy'], function ($, event, lazy) {
    var authorcomments = {};
    //authrcmnt.checkFlag = true;
    //authrcmnt._authorCommentIds = [];
    authorcomments.run = function () {
        event.subscribe("comments.loaded", function (c) {
            var root = $(c.config.main);
            if (!$('#' + $(root).attr('id') + ' [id="authComment"]').length) {
                //authrcmnt.checkFlag=false;
                var cmt = c.flagData ? c.flagData.authorsComment : null;
                if (cmt) {
                    var commentsResult = [];
                    for (var i = 0; i < cmt.length; i++) {
                        //authrcmnt._authorCommentIds.push(cmt[i].A_ID);
                        c.parseComment(cmt[i], commentsResult);
                    }
                    //authrcmnt._authorCommentIds = authrcmnt._authorCommentIds.filter(function(item,pos){ return authrcmnt._authorCommentIds.indexOf(item)==pos;});
                    //var root = $( c.config.main );
                    var str;
                    str = "<div id='authComment' style='border:1px solid #ccc;margin-bottom:10px;'><div class='authorTxt'>Author's Comment</div>";
                    for (var i = 0; i < commentsResult.length; i++) {
                        str = str + c.renderEach(i, commentsResult[i]);
                    }
                    str = str + '</div>';
                    root.prepend(str);
                    lazy.load();
                    $("#authComment .authorTxt:not(:first-child)").remove();
                }
            }
        });
    };
    return authorcomments;
});

define('nlwidget',[], function () {
    var nlwidget = {};
    nlwidget.run = function () {
        if ($('[data-id="newsletterWidgetDisplay"]').length) {
            var viewtype = $('[data-id="newsletterWidgetDisplay"]').data('viewtype') || '';
            var ajaxUrl = '/newnlwidget.cms?ver=12';
            
            if( viewtype ){
                ajaxUrl += '&viewtype=' + viewtype;
            }
            
            $.ajax({
                url: ajaxUrl,
                cache: true,
                dataType: "html",
                success: function (data) {
                    $('[data-id="newsletterWidgetDisplay"]').html(data);
                    var fileref = document.createElement('script');
                    fileref.setAttribute("type", "text/javascript");
                    fileref.setAttribute("src", "/newsletterwidget_js/version-35,minify-1.cms");
                    document.getElementsByTagName("head")[0].appendChild(fileref);
                    $(document).trigger('newsletterWidgetLoaded');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (window.console && console.log) {
                        console.log(errorThrown);
                    }
                }
            });
        }
        else  if ($('[data-id="caronanewsletterWidgetDisplay"]').length) {
            var viewtype = $('[data-id="caronanewsletterWidgetDisplay"]').data('viewtype') || '';
            var ajaxUrl = '/newnlwidget_carona.cms?ver=12';
            
            if( viewtype ){
                ajaxUrl += '&viewtype=' + viewtype;
            }
            
            $.ajax({
                url: ajaxUrl,
                cache: true,
                dataType: "html",
                success: function (data) {
                    $('[data-id="caronanewsletterWidgetDisplay"]').html(data);
                    var fileref = document.createElement('script');
                    fileref.setAttribute("type", "text/javascript");
                    fileref.setAttribute("src", "/newsletterwidget_carona_js/version-37,minify-1.cms");
                    document.getElementsByTagName("head")[0].appendChild(fileref);
                    $(document).trigger('newsletterWidgetLoaded');
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    if (window.console && console.log) {
                        console.log(errorThrown);
                    }
                }
            });
        }
    }
    return nlwidget;
});
define('tpwidget',["event", "tiljs/cookie", "tiljs/apps/times/usermanagement", "tiljs/apps/times/tpmodal", "tiljs/util"], function (event, cookie, userMgmt, tpmodal, util) {
    var tpwidget = {};
        var NP_DOMAIN = (window.location.host === 'toidev.indiatimes.com') ? 'https://nprelease.indiatimes.com': 'https://npcoins.indiatimes.com';
        
        var allActivitiesMapping = {
            read: "act4045258",
            watch_video: "act4115679",
            dailycheckin: "act5385770",
            listen_podcast: "act3054357",
            prime_free_trial: "act3306478"
        };
        
        // Adding this to for staging activity code
        if (window.location.host === 'toidev.indiatimes.com'){
            allActivitiesMapping = {
                read: "act1467057",
                watch_video: "act1716334",
                dailycheckin: "act3532482",
                listen_podcast: "act3112770",
                prime_free_trial: "act2777703"
            };
        }
        
        // initialise timespoint-widget
        tpwidget.init = function () {
            var initCallback = function(){
                tpwidget.ready =  true;
                if(typeof tpwidget.userstatusActionsCallback === 'function'){
                    tpwidget.userstatusActionsCallback();
                    tpwidget.userstatusActionsCallback = null;
                }
                //tpwidget.subscribeLoggedInStatus();
                tpwidget.bindEvents();
            }
            TimesApps.checkGdprAndCall(initCallback);
        },
        tpwidget.data = {


            'widgettypes': ['widget-head', 'widget-two', 'widget-banner'],
            'widget-head': 'tpwidget-one',
            'widget-two': 'tpwidget-two',
            'widget-banner': 'tpwidget-banner',
            'widgetsArray': [],
            'isUserLoggedIn': false,
            'isInitialised': false,
            'userInfo': [],
            'uemail': '',
            'url': escape(document.location.href),
            'pcode': 'TOI',
            'scode': 'News',
            'oid': '',
            'uid': '',
            'aname': '',
            'txnId': '',
            'firsttime': true

        },
        tpwidget.handleTPActivity = function (activity, txnId, scode) {
            
            var activityMap = allActivitiesMapping;
            
            if (txnId) {
                txnId = txnId.toString();
            }
            
            var request = {
                "aname": activityMap[activity] || activity,
                "apiVersion":"23",
                "pcode":"TOI",
                "scode":"TOI",
                "platform":"web",
                "clientId":"TOI",
                // "deviceId":"dv22782d2ui292",
                "txnId": txnId,
                "timeStamp": new Date().getTime()
            };
            
            var innerFn = function(deviceId) {
                request.deviceId = deviceId;
                tpwidget.sendActivityRequest(request);
            }
            
            if(tpwidget.data.uid) {
                request.uid = tpwidget.data.uid;
                tpwidget.sendActivityRequest(request);
            } else if (window.tpsdk) {
                window.tpsdk('getDeviceId', innerFn);
            }
        },
        tpwidget.saveActivityToLocalStorage = function(acode, msid) {
            if (typeof window.localStorage === 'undefined') {
                return;
            }
        
            try {
                var accrueObj = localStorage.getItem('achievedActConfig');
                accrueObj = JSON.parse(accrueObj);
        
                if (!accrueObj) {
                    accrueObj = {};
                }
                
                if (accrueObj[acode]) {
                    accrueObj[acode].push(msid);
                } else {
                    accrueObj[acode] = [];
                    accrueObj[acode].push(msid);
                }
                
                window.localStorage.setItem('achievedActConfig', JSON.stringify(accrueObj));
            } catch (e) {
                // console.log(e);
            }
        },
        tpwidget.checkAccrualStatusActivity = function(msid, acode) {
            if (typeof window.localStorage === 'undefined') {
                return true;
            }
        
            var activityMap = {};
            var achievedActConfig = {};
            var isValidActivity = false;
            try {
                activityMap = window.localStorage.getItem('allActivityConfig');
                achievedActConfig = localStorage.getItem('achievedActConfig');
                if (!activityMap) {
                    return true;
                }
        
                activityMap = JSON.parse(activityMap);
                achievedActConfig = JSON.parse(achievedActConfig);
                if (!activityMap || !activityMap[acode]) {
                    isValidActivity = true;
                } else {
                    var dateVal = achievedActConfig.date;
                    var currDate = new Date();
                    var curDate = [
                        currDate.getDate(),
                        currDate.getMonth(),
                        currDate.getFullYear(),
                    ];
                    var curDateStr = curDate.join('-');
                    if (curDateStr !== dateVal) {
                        dateVal = curDateStr;
                        isValidActivity = true;
                        achievedActConfig = {};
                        achievedActConfig.date = dateVal;
                        window.localStorage.setItem('achievedActConfig',JSON.stringify(achievedActConfig));
                    } else if (
                        !achievedActConfig || !achievedActConfig[acode] || (achievedActConfig[acode].length < activityMap[acode] && achievedActConfig[acode].indexOf(msid) === -1)) {
                        isValidActivity = true;
                    }
                }
            } catch (e) {
                isValidActivity = true;
            // console.log(e);
            }
        
            return isValidActivity;
        },
        tpwidget.sendActivityRequest = function (request) {
            //replacing server call with client call
            console.log(request);
            if (!tpwidget.checkAccrualStatusActivity(request.txnId, request.aname)) {
                return;
            }
            
            $.ajax({
                url: NP_DOMAIN + '/timespoint/submit/activity/toi',
                data: JSON.stringify(request),
                type: 'POST',
                // dataType: 'json',
                contentType: 'application/json; charset=utf-8'
            }).done(function(data){
                console.log(data);
                if (data && data.success) {
                    tpwidget.saveActivityToLocalStorage(request.aname, request.txnId);
                }
            }).fail(function(error) {
                console.log(error);
            })

            // $.get("https://tpapi.timespoints.com/v1/activity/logact" + request, function (data, status) {
            //     if (data.status == '"FAILURE"') {
            //         console.log(data.message);
            //     } else {
            //         console.log("TPActivity Post Login Activity URL -https://tpapi.timespoints.com/v1/activity/logact" + request)
            //     }


            // });
        },
        tpwidget.bindEvents = function () {
            $(document).on('VOD_EVENTS', function (event, data, eventType) {
                var msid = data.id ? data.id : Math.round((new Date()).getTime())
                if (typeof eventType != "undefined" && eventType.toUpperCase() == "VIDEOVIEW") {
                    var label = data.mediaType === 'AOD' ? "act3054357" : 'watch_video';
                    tpwidget.fireActivity(label, data.id, 'TOI');
                }
            });

            // Article Read
            $(document).on('article_read', function (event, data, eventType) {

                tpwidget.fireActivity('read', data.msid);

            });
            
            //View Photos 
            $(document).on('view_photo', function (event, data, eventType) {

                tpwidget.fireActivity('view_photo', data.msid);

            });
            
            $(document).on('listen_podcast', function (event, data, eventType) {

                tpwidget.fireActivity('listen_podcast', data.msid);

            });
            
            $(document).on('social.onBeforeShare', function (e) {
                if (!tpwidget.data.isUserLoggedIn) {
                    TPWidget.addPreLoginActivity('sh_tw')
                }

            });
            
            //On prime free trial activation
            $(document).on('prime_free_trial_activated', function (event, data, eventType) {
                tpwidget.fireActivity('prime_free_trial', data.orderId);
            });
        },
        tpwidget.fireActivity = function (aname, txnId, scode) {
            txnId = txnId || (new Date()).getTime();
            tpwidget.handleTPActivity(aname, txnId, scode);
            // if (!tpwidget.data.isUserLoggedIn) {
            //     console.log('TPActivity Activity- ' + aname + ', Transcation ID-' + txnId)
            //     TPWidget.addPreLoginActivity(aname)
            // } else {
            //     tpwidget.handleTPActivity(aname, txnId, scode);
            // }
        },
        tpwidget.initialisewidget = function (userloginInfo) {

            if (typeof TPWidget != 'undefined' && typeof TPWidget.init == 'function') {
                var widgettypes = [];
                $.each(tpwidget.data.widgettypes, function (i, val) {
                    if ($("#" + val).length) {

                        if (val === 'widget-banner') {
                            widgettypes.push({
                                'ele': val,
                                'widgetType': tpwidget.data[val],
                                'viewportId': 'TOI',
                                'platform': 'web',
                                'carousel': false
                            })
                        } else {
                            widgettypes.push({
                                'ele': val,
                                'widgetType': tpwidget.data[val],
                                callback: function (e) {
                                    // console.log(e);
                                    var $elem = $("#" + val);
                                    var category = 'Earn_TimesPoint';
                                    var action = window.location.href;
                                    var label;
                                    if ($elem.attr('data-tpwidget') === "widget-two" && window.toiprops._Tmpl_pg === 'articleshow') {
                                        label = 'articleshow';
                                    } else if($elem.attr('id') === 'widget-head') {
                                        label = 'topbar';
                                    }
                                    
                                    if (label && typeof window.ga === 'function') {
                                        ga('send', 'event', category, action, label);
                                        //typeof grx == "function" && grx('track', 'event', {category: category, action: action, label: label});
                                    }
                                    
                                    // tpmodal.open(userloginInfo != null && typeof(userloginInfo) != 'undefined');
                                }
                                
                                // tpmodal.open(userloginInfo != null && typeof(userloginInfo) != 'undefined');
                            // }
                        })

                    }
                }


                });


                if (userloginInfo != null && typeof(userloginInfo) != 'undefined') {

                    // TPWidget.init({

                    //     widgets: widgettypes,

                    //     userLoginInfo: {

                    //         "host": tpwidget.data.pcode,

                    //         "channel": tpwidget.data.scode,

                    //         "URL": escape(document.location.href),

                    //         "userId": tpwidget.data.uid,

                    //         "oid": "",

                    //         "email": tpwidget.data.email

                    //     }

                    // });
                } else {

                    // TPWidget.init({
                    //     widgets: widgettypes
                    // });
                }
                
                var showTpPopUp = util.getParam('tp');
                if (showTpPopUp === '1') {
                    tpmodal.open(userloginInfo != null && typeof(userloginInfo) != 'undefined');
                }

            }

            event.publish('tpinitated')


        },
        tpwidget.postLoginActionsAfterPointsSync = function() {
            TPWidget.PostLoginActions({
                "host": "TOI",
                "channel": "News",
                "URL": escape(document.location.href),
                "userId": tpwidget.data.uid,
                "oid": "",
                "email": tpwidget.data.email
            });  
        },
        tpwidget.PostLoginActions = function () {
            // TPWidget.PostLoginActions({
            //     "host": "TOI",
            //     "channel": "News",
            //     "URL": escape(document.location.href),
            //     "userId": tpwidget.data.uid,
            //     "oid": "",
            //     "email": tpwidget.data.email
            // });
            
            if (typeof window.tpsdk === 'function') {
                window.tpsdk('getDeviceId', tpwidget.mergeTpDataForLoggedInUser);   
            } else {
                tpwidget.postLoginActionsAfterPointsSync();
            }

        },
        tpwidget.mergeTpDataForLoggedInUser = function(deviceId) {
            if (!deviceId) {
                tpwidget.postLoginActionsAfterPointsSync();
                return;
            }
            var request = {
                uid: tpwidget.data.uid,
                pcode: "TOI",
                platform:"web", 
                clientId:"TOI",
                //action: "AUTH2",
                deviceId: deviceId
            };
            $.ajax({
                url: NP_DOMAIN + '/timespoint/init/toi',
                data: JSON.stringify(request),
                type: 'POST',
                contentType: 'application/json; charset=utf-8'
            }).done(function() {
                tpwidget.postLoginActionsAfterPointsSync();
            }).fail(function(){
                tpwidget.postLoginActionsAfterPointsSync();
            });
        },
        tpwidget.userstatusActions = function (user) {
            tpwidget.data.isUserLoggedIn = typeof user !== "undefined" && user !== null ? true : false;
                // For First time Activity
                if (!tpwidget.data.isInitialised) {
                    tpwidget.updateUserDetails();
                    tpwidget.initialisewidget(user)
                    tpwidget.data.isInitialised = true;
                    // Fire Visit activity for Home page only
                    // if (toiprops && toiprops["_Tmpl_pg"] && toiprops["_Tmpl_pg"].toLowerCase() == 'default') {   
                    //     tpwidget.fireActivity('visit', Math.round((new Date()).getTime()))
                    //     tpwidget.fireActivity('register', Math.round((new Date()).getTime()))
                    // }
                }
                
                tpwidget.fireActivity('dailycheckin');
                tpwidget.data.firsttime = false;
        },
        
        tpwidget.resetDailyCheckInEntries = function() {
            if (typeof window.localStorage !== 'undefined') {
            let achievedActConfig = {};
                try {
                    achievedActConfig = localStorage.getItem('achievedActConfig');
                    const dailyCheckInAName =   allActivitiesMapping && allActivitiesMapping.dailycheckin? allActivitiesMapping.dailycheckin : '';
                    if (!achievedActConfig || !dailyCheckInAName) {
                        return;
                    }
                    achievedActConfig = JSON.parse(achievedActConfig);
                    if (achievedActConfig && achievedActConfig[dailyCheckInAName] && achievedActConfig[dailyCheckInAName].length > 0){
                        achievedActConfig[dailyCheckInAName] = [];
                        window.localStorage.setItem('achievedActConfig' , JSON.stringify(achievedActConfig));
                    }
                }
                catch (e) {}
            }
        },
        
        /**
         * { subscribeLoggedInStatus - to subscribe user logged in ,logged out status and behave accordingly }
         */
        tpwidget.subscribeLoggedInStatus = function () {
            event.subscribe("user.status", function (user) {
                if(tpwidget.ready){
                    tpwidget.userstatusActions(user);    
                }
                else{
                    tpwidget.userstatusActionsCallback = tpwidget.userstatusActions.bind(tpwidget, user);
                }
            });
            //Logged in User
            event.subscribe("user.login", function (user) {
                if (user) {
                    tpwidget.data.isUserLoggedIn = true;
                    tpwidget.updateUserDetails(user.getEmail());
                    tpwidget.PostLoginActions();
                    typeof ga == "function" && ga('send', 'event', 'TPRedeem', 'login_success', window.location.href);
                    tpwidget.resetDailyCheckInEntries();
                    tpwidget.fireActivity('dailycheckin');
                }
            });
            event.subscribe("user.logout", function (user) {
                tpwidget.data.isUserLoggedIn = false;
                if (!tpwidget.data.firsttime) {

                    // Logged-in User logged out
                    if (typeof TPWidget != 'undefined' && typeof TPWidget.logoutAction == 'function') {
                        try{
                            // TPWidget.logoutAction();
                        }catch(e){};
                    }

                }

                tpwidget.data.isUserLoggedIn = false;
                tpwidget.fireActivity('dailycheckin');

            });

        },
        tpwidget.updateUserDetails = function (email) {
                tpwidget.data.email = email ? email : cookie && cookie.get('MSCSAuthDetails') && cookie.get('MSCSAuthDetails').split('=')[1];
                tpwidget.data.uid = cookie && cookie.get('ssoid')
        };
        TimesApps.checkGdprAndCall(tpwidget.subscribeLoggedInStatus);
    return tpwidget;
});

define('primeuserhandler',["tiljs/event", "tiljs/cookie", "tiljs/util"], function (event, cookie, util) {
    /*event.subscribe("user.logout", function(){
        window.location.reload();
    });*/
    var puser = {};
    /*For below array values, user is active prime user*/
    var config = {
        subscriptionStatusApi : '/prime_subscription_status.cms?feedtype=json',
        activePrimeUserPrcArr : [1,3,4,5,8],
        prcValueForFTU: 1,
        notPrimeStatus: {
            0: {
              status: 'not_a_times_prime_user',
              ctaText: 'Start Free Trial',
            },
        },
        subscriptionExpiredStatus: {
            2: {
              status: 'free_trial_expired',
              ctaText: 'Subscribe Now',
              headingMsg: 'Your free trial ended on',
            },
            4: {
              status: 'free_trial_with_payment_expired',
              ctaText: 'Subscribe Now',
              headingMsg: 'Your free trial ended on',
            },
            6: {
              status: 'subscription_expired',
              ctaText: 'Subscribe Now',
              headingMsg: 'Your subscription ended on',
            },
            7: {
              status: 'subscription_cancelled',
              ctaText: 'Subscribe Now',
              headingMsg: 'Your subscription ended on',
            },
        },
        alreadyFTUToastHTML: '<div data-prime="already-ftu-toast" id="alreadyPrimeToast"><span class="message">Your free trial is active!</span><span class="closeIcon">+</span></div>',
        alreadySubscribedToastHTML: '<div data-prime="already-subscribed-toast" id="alreadyPrimeToast"><span class="message">Your subscription is active!</span><span class="closeIcon">+</span></div>',
    };
    
    
    puser.setNativePrc = function(cb) {
            var prc = sessionStorage.getItem('nativePrc');
            var fetchfromServer = false;

            if (prc) {
                cookie.set("prc", prc, 1, "/", ".indiatimes.com");
                 if (cb) {
                            cb();
                        }
            } else {
                fetchfromServer = true;
            }

            if (fetchfromServer) {
                $.ajax({
                    url: 'https://pauth.indiatimes.com/prime-auth/prime/status/setCookies',
                    //url: 'https://stgpauth.indiatimes.com/prime-auth/prime/status/setCookies',
                    xhrFields: {
                        withCredentials: true
                    },
                    success: function(data) {
                        if(cookie.get("prc")){
                        sessionStorage.setItem('nativePrc', cookie.get("prc"));
                        if(window && window.activePlanName!=""){
    			             sessionStorage.setItem('planName', window.activePlanName);
    			             localStorage.setItem('planName', window.activePlanName);
    			        }
                        }
                        if (cb) {
                            cb();
                        }
                    },
                    error: function(XMLHttpRequest, textStatus, errorThrown) {
                        if(window && window.activePlanName!=""){
    			             sessionStorage.setItem('planName', window.activePlanName);
    			             localStorage.setItem('planName', window.activePlanName);
    			         }
                        if(cookie.get("prc")){
                        sessionStorage.setItem('nativePrc', cookie.get("prc"));
                        }
                        if (cb) {
                            cb();
                        }
                    }
                })
            }


        }
    puser.reloadRequired=function()
    {  
        if(typeof toiprops === 'object' && toiprops.directSubscribe == true && puser.getPrcVal()==1) {
            return false;
        }
        return true;
    }
    /*This is based on param set by server variable header_primetemplate*/
    puser.notAPrimeUser =  function(){
        if(typeof toiprops === 'object' && toiprops.toipr !== 1) {
            return true;
        }
        return false;
    };
    /*This is based on prime user cookie*/
    puser.isPrimeActiveUser =  function(prcVal){
        var val_prc = parseInt(prcVal, 10) || puser.getPrcVal();
        if((typeof val_prc != 'undefined') && (config.activePrimeUserPrcArr.indexOf(val_prc) > -1)){
            return true;
        }
        return false;
    };
    puser.isFTU = function(prcVal){
        var val_prc = parseInt(prcVal, 10) || puser.getPrcVal();;
        var _isFTU = (val_prc === config.prcValueForFTU)
        return _isFTU;
    };
    puser.isSubscriptionExpired = function(){
        var prc = puser.getPrcVal();
        return config.subscriptionExpiredStatus[prc] ? true : false;
    };
    puser.getSubscriptionStatus = function(){
        var prc = puser.getPrcVal();
        return config.subscriptionExpiredStatus[prc] ? config.subscriptionExpiredStatus[prc].status : undefined;
    };
    puser.getPrcVal =  function(){
        var cookie_prc = cookie.get("prc");
        if(!!cookie_prc){
            return parseInt(cookie_prc.split('#')[0]);
        }
        return 0;
    }
    puser.shouldShowVideoBlocker = function(){
        var prc = puser.getPrcVal();
        var shouldShowVideoBlocker  = config.notPrimeStatus.hasOwnProperty(prc) || puser.isSubscriptionExpired();
        return shouldShowVideoBlocker;
    };
    puser.isPrcNotSet = function(prc){
        /* Handling for undefined and Zero prc value - if prc is not set - return true*/
        return !prc;
    };
    puser.fetchUserSubscriptionStatusFromApi = function(callback){
        var prc = puser.getPrcVal();
        if(puser.isPrcNotSet(prc)){
            return typeof callback == 'function' && callback({});
        }
        else{
            var _uid = cookie.get("ssoid") || cookie.get("ssoId");
            $.ajax({
            url: config.subscriptionStatusApi,
            data: {
                uid: _uid
            }
            }).done(function(ajaxData){
                typeof callback == 'function' && callback(ajaxData);
            });
        }
        
    };
    
    puser.load_toiplus_verifymobile_screen_js = function(callback){
        require(['tiljs/load'], function(mod){
           mod.js('/toiplus_verifymobile_screen_js/version-8,minify-1.cms', function(){
               window.primePaymentFlow && primePaymentFlow.appendVerifyMobileScreenHTMLtoBody();
               typeof callback === 'function' && callback();
           });
        });
    };
    
    
    puser.updateIPR =  function(user, oldPrc){
        var val_prc = puser.getPrcVal();
        var val_ipr = cookie.get("ipr");
        
        if(val_ipr === '0' && puser.isPrimeActiveUser(val_prc)){
            puser.setiprcookieForPrime();
        }
        else if(val_ipr === '1' && !puser.isPrimeActiveUser(val_prc)){
            puser.setiprcookieForPrimeExpired();
        }
        if(oldPrc != val_prc){
            //event.publish("user.prcupdated", user);
            if(typeof primePaymentFlow != 'undefined' && !puser.isPrimeActiveUser(val_prc))
            {
                primePaymentFlow.showBlockerScreenInit();
            }
        }
    };
    
    puser.syncIPRHandler =  function(user){
        var val_prc = puser.getPrcVal();
        var val_ipr = cookie.get("ipr");
        
        var prcCookie = cookie.get("prc");
        var ssoid = cookie.get("ssoid");
        var ticketid = cookie.get("TicketId");
        

        if(val_ipr === '0' && puser.isPrimeActiveUser(val_prc)){
            var _label = val_ipr + '|' + prcCookie + '|' + ssoid + '|' + ticketid;
            ga('send', 'event', toiprops._Tmpl_pg , 'prime-PRCmismatch', _label);
            require(["tiljs/apps/times/usermanagement"], function(login){ 
                login.setPrcForUser(puser.updateIPR.bind(user, val_prc));
            });
        }
        else if(val_ipr === '1' && !puser.isPrimeActiveUser(val_prc)){
            var _label = val_ipr + '|' + prcCookie + '|' + ssoid + '|' + ticketid;
            ga('send', 'event', toiprops._Tmpl_pg , 'primeexpired-PRCmismatch', _label);
            require(["tiljs/apps/times/usermanagement"], function(login){ 
                login.setPrcForUser(puser.updateIPR.bind(user, val_prc));
            });
        }
        else if(typeof prcCookie != 'undefined' && typeof val_ipr == 'undefined'){
            var _label = val_ipr + '|' + prcCookie + '|' + ssoid + '|' + ticketid;
            ga('send', 'event', toiprops._Tmpl_pg , 'primeinvalid-PRCmismatch', _label);
        }
        else if(typeof prcCookie == 'undefined' && typeof val_ipr != 'undefined'){
            var _label = val_ipr + '|' + prcCookie + '|' + ssoid + '|' + ticketid;
            ga('send', 'event', toiprops._Tmpl_pg , 'primeInvalidIPR-PRCmismatch', _label);
        }
    };
    
    puser.actionPostMobileLogin = function (user, loginEventDataObj){
        var isPrimePaymentFlow = false;
        if(loginEventDataObj){
            isPrimePaymentFlow = loginEventDataObj.isPrimePaymentFlow || false;
        }
        if(!!user && puser.isPrimeActiveUser() && isPrimePaymentFlow){
            try{ 
                sessionStorage.setItem('already_prime_user', 1);
            }
            catch(e){}
        }
        
        puser.checkUserMobileStatus(user, true);
    };
    
    puser.userstatusHandler =  function(user){
        var val_prc = puser.getPrcVal();
        if(val_prc > 0){
            $('body').attr('data-primestatus', val_prc);
        }
        else{
            $('body').removeAttr('data-primestatus');
        }
        puser.checkUserMobileStatus(user);
    };
    
    puser.checkUserMobileStatus = function(user, isLoginEvent){
        require(['tiljs/cookie','tiljs/event', 'tiljs/login'],  function(cookie, event, login) {
            function setDimensionForGA(){
                var ckVal = cookie.get('usermn');
                if (ckVal){
                    var dimensionValue = ckVal == '1' ? 'Available' : 'Unavailable';
                    ga('set', 'dimension24', dimensionValue);
                }
            }
            
            setDimensionForGA();
            
            if (user && login && login.checkMobileInfo){
                login.checkMobileInfo(null, isLoginEvent, setDimensionForGA);
            }
        });
    }
    
    puser.loginHandler =  function(user, stopReload){
        var val_prc = puser.getPrcVal();
        //if((toiprops.toipr != 1) && puser.isPrimeActiveUser(val_prc)){
        if((puser.pageLoadPrcVal != 1) && puser.isPrimeActiveUser(val_prc)){
            puser.deleteiprcookie();
            if(!stopReload && puser.reloadRequired()){
            if (["toidev.indiatimes.com", "spmdev.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                window.location.href = getPrimeReloadUrl(true);
            }
            else{
                window.location.reload(true);
            }
            }
        }
    };
    
    puser.logoutHandler =  function(user){
        var val_prc = puser.getPrcVal();
        //if((toiprops.toipr == 1) && !puser.isPrimeActiveUser(val_prc)){
        if((puser.pageLoadPrcVal == 1) && !puser.isPrimeActiveUser(val_prc)){
            puser.deleteiprcookie();
            if (["toidev.indiatimes.com", "spmdev.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                window.location.href = getPrimeReloadUrl(false);
            }
            else{
                window.location.reload(true);
            }
        }
    };
    puser.deleteiprcookie = function() {
        var domain = util.getDomainOnly();
        cookie.remove('ipr', '/', domain);
    };
    
    puser.deleteprccookie = function() {
        var domain = util.getDomainOnly();
        cookie.remove('prc', '/', domain);
    };
    
    puser.setiprcookieForPrime = function() {
        var expiryInMinutes = 30;
        var expiry = expiryInMinutes/(60*24);
        var domainOnly = util.getDomainOnly();
        cookie.set("ipr", "1", expiry, "/", domainOnly);
    };
    
    puser.setiprcookieForPrimeExpired = function() {
        var expiryInMinutes = 30;
        var expiry = expiryInMinutes/(60*24);
        var domainOnly = util.getDomainOnly();
        cookie.set("ipr", "0", 1, "/", domainOnly);
    };
    
    puser.getPrimeCongratsPopup = function(isReloadRequired, showForce) {
        require(['localstoragec'], function(localstoragec) {
            congratsPopUp = localstoragec.get("congrats_popup");
            if(puser.isPrimeActiveUser() && (congratsPopUp !== '1' || !!showForce)) {
                var $body = $('body');
                 if(window.location.href.indexOf("scope=mp") !=-1){
                        require(["tiljs/login"], function(login) {
                                var name=login.getUser().getFirstName();
                                var url= window.location.href;
                                window.history.replaceState({}, '', window.location.href.replace('scope=mp',""));
                                $.get('/mp_text.cms?congratstoast=1&name='+name,function(data){
                                   $('[data-prime="meteredPaywall"]').html(data);
                                   $(".meteredPaywall .close_btn").on("click",function(){$('[data-prime="meteredPaywall"]').fadeOut();})
                                    require(["pgtrack"], function(pgtrack) {
                                       var utm_medium=sessionStorage.getItem("mp_utmmedium");
                                       var prcValue = puser.getPrcVal();
                                       var ga =sessionStorage.getItem("mp_conversion");
                                       pgtrack.track(utm_medium+'|Conversion#Success-'+ prcValue+ga);
                                    });
                                    
                              });
                         });
                }
                else
                {
                
                $.get('/prime_congrats_popup.cms?version=1',function(data){
                    $body.append(data);
                    $body.addClass('disable-scroll');
                    require(["pgtrack"], function(pgtrack) {
                        var prcValue = puser.getPrcVal();
                        pgtrack.track('unknownsource|Conversion#Success-'+ prcValue);
                    });
                });
                
                $body.on('click','.close-congrats-popup',function(){
                    $body.removeClass('disable-scroll');
                    $('#congrats_popup').remove();
                    localstoragec.set("congrats_popup", '1', 365, '/');
                    if(!!isReloadRequired){
                        puser.deleteiprcookie();
                        if (["toidev.indiatimes.com", "spmdev.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                            window.location.href = getPrimeReloadUrl(true);
                        }
                        else{
                            window.location.reload(true);
                        }
                    }
                });
                }
            }
        });
    };
    
    puser.showAlreadyPrimeToast =  function(user){
        if(!!user){
            try{
                var toastStorageExist = sessionStorage.getItem('already_prime_user');
                if ((parseInt(toastStorageExist, 10) === 1 && puser.isPrimeActiveUser())) {
                   var toastHTML = config.alreadySubscribedToastHTML;
                   var param="EXISTING_PRIME_USER"
                    if(puser.isFTU()){
                        param="FREE_TRIAL_USER"
                       toastHTML = config.alreadyFTUToastHTML;
                    }
                   
                   // $('body').append(toastHTML);
                //    var $alreadyPrimeToast = $("#alreadyPrimeToast");
                 //   var $alreadyPrimeToastCloseIcon = $alreadyPrimeToast.find('.closeIcon')
                    // $alreadyPrimeToast.addClass('active');
                    // $alreadyPrimeToastCloseIcon.click(function() {
                    //     $alreadyPrimeToast.remove();
                    //     sessionStorage.removeItem('already_prime_user');
                    // });
                    if(nativePayment){
                    require(['tiljs/cookie'], function(cookie){
                    var options = {}
                    options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
                    options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
                    
                     nativePayment.collectParametersforPopup(param,options).then(function(data) {
                                nativePayment.displayPopup(data);
                               
                      });
                     })
                    }
                    sessionStorage.removeItem('already_prime_user');
                    // setTimeout(function() {
                    //   nativePayment.closePopups();
                    //   sessionStorage.removeItem('already_prime_user');
                    // }, 10000);   
                }
            }catch(e){}
        }
    };
    
    var removeParam =  function(key, sourceURL) {
            var rtn = sourceURL.split("?")[0],
                param,
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString !== "") {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                    }
                }
                rtn = rtn + "?" + params_arr.join("&");
            }
            return rtn;
    };
    
    var getPrimeReloadUrl = function(user){
            var url = window.location.href;    
            var params = 'toipr=2&primetemplate=1';
            url = removeParam('toipr', url);
            url = removeParam('primetemplate', url);
            
            // Logout case, we should remove toipr=2
            if (user){
                if (url.indexOf('?') > -1){
                    url += '&';
                }
                else{
                    url += '?';
                }
                url += params;
            }
            return url;
    };
    event.subscribe("user.status", function(user){
        puser.userstatusHandler(user);
    });
    event.subscribe("user.login", function(user, stopReload){
    puser.setNativePrc(function(){puser.loginHandler(user, user.stopReload)});
        user.stopReload = false;
    });
    event.subscribe("user.logout", function(user){
        puser.logoutHandler(user);
    });
    event.subscribe("user.autologgedin", function(user){
         if(!sessionStorage.getItem('nativePrc')){
         require(["tiljs/login"], function(login) {
                                        login.setNativePrc();
        })
         }
        puser.pageLoadPrcVal = puser.getPrcVal();
        if(window.location.host === 'timesofindia.indiatimes.com'){
            puser.syncIPRHandler(user);
        }
        puser.showAlreadyPrimeToast(user);
    });
    return puser;
});



try{    
document.domain = "indiatimes.com";
}catch(ex){
    console.log(ex)
}
var TimesApps = window.TimesApps || {};
TimesApps.VideoCore = (function(){
    var config, fn, api;
    
    config = {
        iframeTemplateName : "vod_player.cms",
        iframeHtml: '<iframe allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true"></iframe>'
    }
    
    fn = {
        _generateIframeSrc : function(dataParams){
            var src =  "/" + config.iframeTemplateName + "?";
            var params = [];
            
            for(key in dataParams){
                if( !dataParams.hasOwnProperty(key) ){
                    return;
                }
                
                params.push(key + "=" + dataParams[key]);
            }
            
            src += params.join('&');
            
            return src;
        },
        
        _createVideoIframe : function(dataParams, attributes){
            var src = fn._generateIframeSrc(dataParams);

            var container = document.createElement("div");
            $(container).html(config.iframeHtml);
            $(container).find("iframe")
                            .attr("src", src)
                            .attr('data-msid', dataParams && dataParams.msid)
                            .attr('data-plugin', 'vodIframe');
            if(dataParams.classNames){
                $(container).find("iframe").addClass(dataParams.classNames);
            }
            if(dataParams.domId){
                $(container).find("iframe").attr('id', dataParams.domId);
            }
            for(key in attributes){
                if(!attributes.hasOwnProperty(key)){
                    return;
                }
                $(container).find("iframe").attr(key, attributes[key]);
            }
            return container.innerHTML;
        }
    }
    
    api = {
        generateIframeSrc : function(dataParams){ return fn._generateIframeSrc(msid, dataParams); },
        createVideoIframe : function(dataParams, attributes){ return fn._createVideoIframe(dataParams, attributes) }
    }
    
    return api;
}(window.jQuery));

/*
* this module takes care 
* of syncing play/pause
* b/w videos
*/
TimesApps.VideoGalleryApp = (function(){
	var util, fn, api, data, bindInitialEvents, config;

	data = {
		videoBoxMap : {},
		videoCount : 0
	}

	config = {
		PLAYING : 'PLAYING',
		PAUSED  : 'PAUSED',
		AUTOPLAY_LOCALSTORAGE_KEY : 'autoplay_userInitiated'
	}

	bindInitialEvents = function(){
		var appData = data;
		/*
		    *TODO - move events from dom to event bus
		*/
	
		$(document).on('videodash.invokeVideo', function(eventType, data){
		    //Event deprecated
		    //in use only in old videodash player
		    //TODO - remove once all videodash
		    //instances have been removed from site
			fn._playNext.call(null, [eventType, data, appData]);
		});

        $(document).on('videodash.userAction LIVE_TV_EVENTS', function(event, data , eventType){
			fn._playCurrentAndPauseOthers.call(null, [event, data , eventType]);
		});
		$(document).on('MINI_TV_EVENTS VOD_EVENTS', function(event, data , eventType){
		    require(["tiljs/event"], function(eventBus){
                eventBus.publish("VOD_EVENTS", [event, data , eventType]);
            });
			fn._playCurrentAndPauseOthers.call(null, [event, data , eventType]);
			if( eventType && eventType.toUpperCase() == "VIDEOIFRAMEREMOVED" ){
			    TimesApps.playingSubsequentVideo = false;
			}
		});
		$(document).on('GAANA_PLAYER_LOADED VOD_LOADED',function(event, eventData, eventType, pauseVideoCallBack){
			//eventData.source
			data.pageName = data.pageName ? data.pageName : ( $("body").data("page-name") || "" );
			if( eventType == "VOD_LOADED" && eventData.source == "MG_0" ){
			    //for HP, player is already loaded
			    //no need to load using VOD_LOADED
			    //TODO - load only using VOD_LOADED
			    return;
			}
			fn._processSystemInitiatedEvents.call(null, [event, eventData, eventType, pauseVideoCallBack]);
		});

        $(document).on('PLAYER_LOADED',function(event, eventData, eventType, pauseVideoCallBack){
			fn._processSystemInitiatedEvents.call(null, [event, eventData, eventType, pauseVideoCallBack]);
		});
    
		$(document).on('GAANA_PLAYER_EVENTS', function(event, data , eventType){
			fn._playCurrentAndPauseOthers.call(null, [event, data , eventType]);
		});
		
        $(document).on('videodash.videoEvents LIVE_TV_EVENTS MINI_TV_LOADED',function(event, eventData, eventType, pauseVideoCallBack){
			//eventData.source
			fn._processSystemInitiatedEvents.call(null, [event, eventData, eventType, pauseVideoCallBack]);
		});

		require(["event"], function(pubSub){
            pubSub.subscribe("MINI_TV_EVENTS", function(data){
                var event = {};
                var eventData = data[0];
                var eventType = data[1];
                fn._playCurrentAndPauseOthers.call(null, [event, eventData , eventType]);
            }); 
		});

		$(document).on('videodash.switchOffAutoPlay', function(event, eventData){
			fn._toggleAutoPlay.call(null, [event, eventData]);
		});

		$('.jMediaGalleryWidget').on('MG_EVENTS', function(event, eventData, eventType, pauseVideoCallBack){
			fn._processSystemInitiatedEvents.call(null, [event, eventData, eventType, pauseVideoCallBack]);
		});
	};

	util = {
		_createVideoObjForOtherTypePlayer : function(id, domSelector, pauseVideoCallBack, isAutoPlayOn, msid){
			return new TimesApps.OtherVideoBox(id, domSelector, pauseVideoCallBack, isAutoPlayOn, msid);
		}
	};

	fn = {
		_init : function(){
			bindInitialEvents();
		},
		_playCurrentAndPauseOthers : function(args){
			var event = args[0];
			var eventData = args[1];
			var eventType = typeof args[2] == "string"  && args[2].toUpperCase();

			var videoId = eventData.source.toUpperCase();
			//set status - playing for current video
			if( data.videoBoxMap[ videoId ] ){
				var videoBeingPlayed = data.videoBoxMap[ videoId ];
				videoBeingPlayed.setStatus(config.PLAYING);
				if(TimesApps.isDevMode){
                    console.log("VOD_STATUS_playing__"+videoId+"__videoMap-",data.videoBoxMap)
				}
				fn._pauseVideosNotInFocus.call(null, [event, eventData , eventType]);
			}
			/*fixed while liniting, check status*/
			if( event.type == "VOD_EVENTS" && eventType == 'VIDEOREADY' ){
			    var videoId = eventData.source.toUpperCase();
    			if( data.videoBoxMap[ videoId ] ){
    			    var video = data.videoBoxMap[ videoId ];
    			    if( video.markPlaying  ){
                        video.markPlaying(eventData.id);   
    			    }
    			    if( video.findNext ){
                        var nextVideo = video.findNext(video.domEle.find(".playing"));
    			        var iframeWindow = video.domEle.find("iframe")[0].contentWindow;
    			        var nextVideoMsid = nextVideo.attr("data-msid") || "";
    			        if( 
    			            iframeWindow.TimesApps
    			            && iframeWindow.TimesApps.Vod_Player
    			            && iframeWindow.TimesApps.Vod_Player.addNextVideoToList
    			        ){
    			            iframeWindow.TimesApps.Vod_Player.addNextVideoToList(nextVideoMsid);
    			        }
    			    }
    			}			
			}
		},
		_processSystemInitiatedEvents : function(args){
			var event = args[0];
			var eventData = args[1];
			var eventType = typeof args[2] == "string"  && args[2].toUpperCase();

			var videoId = eventData.source.toUpperCase();
			//VIDEOREADY - player is ready & interactive
			if( eventType == 'VIDEOREADY' ){
				//pause other video's & set status to paused
				fn._pauseVideosNotInFocus.call(null, [event, eventData, eventType]);
				if( fn._checkIfVideoShouldPause(videoId) ){
					fn._pauseVideo(videoId);
				}
			}else if( 
						eventType == 'LIVE_TV_LOADED' 
						|| eventType == 'MG_LOADED' 
						|| eventType == 'MINI_TV_LOADED'
						||  eventType == 'GAANA_PLAYER_LOADED'
						||  eventType == 'VOD_LOADED'
						|| eventType == 'PLAYER_LOADED'
					){
				var domSelector = eventData.domSelector;
				var pauseVideoCallBack = args[3];
				if( eventType == 'LIVE_TV_LOADED'
				    || eventType == 'MINI_TV_LOADED' 
				    ||  eventType == 'GAANA_PLAYER_LOADED' 
				    || eventType == 'VOD_LOADED' 
				    || eventType == 'PLAYER_LOADED'
				){
				    fn._turnOffAutoPlayForAll();
					//fn._playCurrentAndPauseOthers.call(null, [event, eventData , eventType]);
				}
				
				if( eventType == 'MINI_TV_LOADED' ){
				    //close overlay & dock
				    TimesApps.overlayModule && TimesApps.overlayModule.close();
				}
				
				
				var isAutoPlayOn = ( eventData.userInitiated  == true ) ? false : true;
				fn._registerOtherTypePlayers(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, eventData.msid);
			}
		},
		_checkIfVideoShouldPause : function(videoId){
			var video = data.videoBoxMap[videoId];
			if( video.getStatus() == config.PAUSED ){
				//pause current video
				return true;
			}
			return false;
		},
		_pauseVideo : function(videoId){
            var video = data.videoBoxMap[ videoId ];
            if( video && typeof video.pauseVideo == "function" ){
                video.pauseVideo();
            }
		},
		_pauseVideosNotInFocus : function(args){
			var event = args[0];
			var eventData = args[1];
			var eventType = typeof args[2] == "string"  && args[2].toUpperCase();

			var videoId = eventData.source.toUpperCase();
			if( eventType == 'PLAYING' || eventType == 'VIDEOREADY' ||eventType == 'START'  ){
				if( data.videoBoxMap[ videoId ] ){
					var videoBeingPlayed = data.videoBoxMap[ videoId ];
				}

				var videoIdList = Object.keys(data.videoBoxMap);
				for(var i=0; i < videoIdList.length; i++ ){
					var videoId = videoIdList[i].toUpperCase();
					var video = data.videoBoxMap[ videoId ];
					if( videoId != videoBeingPlayed.getId() ){
						video.setStatus(config.PAUSED);
						//TODO - *****************************************************************************
						//pause videos which are already ready
						fn._pauseVideo(videoId);
					}
				}
			}
		},
		_playNext : function(args){
			var eventType = args[0];
			var eventData = args[1];
			var data = args[2];
			var videoId = eventData.source.toUpperCase();
			if( data.videoBoxMap[ videoId ] ){
				var video = data.videoBoxMap[ videoId ];
				if( video && typeof video.playNext == "function" ){
                    video.playNext();
				}
			}
		},
		_toggleAutoPlay : function(args){
			var event = args[0];
			var eventData = args[1];
			localStorage.setItem( config.AUTOPLAY_LOCALSTORAGE_KEY, eventData.stxt);
		},
		_addNewVideo : function(options, domEle){
			var id = options.id;
			var video = new TimesApps.VideoBox(options, domEle);
			data.videoBoxMap[id] = video;
			data.videoCount++;
		},
		_addOtherTypeVideo : function(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, msid){
			var video = util._createVideoObjForOtherTypePlayer(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, msid);
			data.videoBoxMap[videoId] = video;
			data.videoCount++;
		},
		_turnOffAutoPlayForAll : function(){
			var videoIdList = Object.keys(data.videoBoxMap);
			for(var i=0; i < videoIdList.length; i++ ){
				var videoId = videoIdList[i].toUpperCase();
				var video = data.videoBoxMap[ videoId ];
				//set autoplay status to false
				if( typeof video.setAutoPlay == 'function' ){
					video.setAutoPlay(false);
				}
			}
		},
		//register other players
		_registerOtherTypePlayers : function(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, msid){
			videoId = videoId.toUpperCase();
			fn._addOtherTypeVideo(videoId, domSelector, pauseVideoCallBack, isAutoPlayOn, msid);
		}
	}

	api = {
		init : function(){ return fn._init(); },
		addNewVideo : function(options, domEle){ return fn._addNewVideo(options, domEle); },
		getVideoCount : function(){ return data.videoCount; },
		getVideoList : function(){ return data.videoBoxMap; },
		pauseVideo :  function(videoId){ return fn._pauseVideo(videoId); }
	}

	fn._init();

	return api;
}());

/*
* module - creates instances of VideoBox / scroller_gallery	
*/

TimesApps.OtherVideoBox = function(id, domSelector, pauseVideoCallBack, isAutoPlayOn, msid){
	this.id = id;
	this.domEle = $(domSelector).eq(0);
	this.status = "PLAYING";
	this.pauseVideoCallBack = pauseVideoCallBack;
	this.msid = msid;
	
	this.config = {
		autoplay : isAutoPlayOn || false
	};

	var self = this;
	this.domEle.on('click', function(event){
		self.setStatus('PLAYING');
	});
};

TimesApps.OtherVideoBox.prototype.getStatus = function(){
	return this.status;
};

TimesApps.OtherVideoBox.prototype.setStatus = function(status){
	this.status = status;
};

TimesApps.OtherVideoBox.prototype.getId = function(){
	return this.id;
};

TimesApps.OtherVideoBox.prototype.pauseVideo = function(){
	if( typeof this.pauseVideoCallBack == 'function' ){
		this.pauseVideoCallBack();
	}else{
		if( typeof this.domEle.prop('contentDocument') == 'undefined' ){
		return;
		}

		var videoControls = this.domEle.prop('contentDocument').embeds['myMovie'];
		if( typeof videoControls == 'undefined' ){
			return;
		}

		this.setStatus('PAUSED');
		videoControls.pauseVideo();
	}
};

TimesApps.overlayModule = (function($){
        var fn, api, data, defaults, templates, bindEvents;
        
        templates = {
            defaultHtml : '<div id="vcw" class="jOverlay video-overlay-wrapper"><div class="inner"><div class="buttonContainer"><span class="jToggleOverlay expand"></span><button type="button" class="closebtn"></button></div><div class="video-content"></div></div></div>'
        }
        
        defaults = {
                    html : "",
                    videosection: "toi",
                    source: "toi",
                    pg : "toi",
                    isFullscreen : false,
                    allowDock : false,
                    classString : ''
                };
                
        data = {
            isOverlayOpen : false,
            currentScrollPos: null,
            _onRenderCb: null
        }
                
        bindEvents = function(){
            $('#vcw .closebtn').off('click').on('click', fn._close);
            $('#vcw .jToggleOverlay').off('click').on('click', fn._toggleOverlayAndDock);
        }
        
        fn = {
            _init : function(){
                $(document).on('keyup', function(e){
                    if(e.keyCode == 27){ // on Esc key press
                       fn._close();
                    } 
                });
            },
            _create : function(options){
                data = $.extend( {},defaults,options);
                fn._render(data.html);
                bindEvents();
                
            },
            _render : function(html){
                if( !$("#vcw").length ){
                    var sidebar = ( $(".sidebar").length ? $(".sidebar") : $(".sidebar2") ).eq(0);
                    var wrapper = sidebar.closest('.wrapper').length ? sidebar.closest('.wrapper') : $(".wrapper");
                    wrapper.eq(0).append(templates.defaultHtml);
                }
                if( data.isFullscreen ){
                    $(".jOverlay")
                            .addClass("fullscreen")
                            .addClass(data.classString.length ? data.classString : '');
                    $("body")
                            .addClass("overflowHidden");
                    data.currentScrollPos = window.scrollY;
                }else{
                    $(".jOverlay")
                            .removeClass("fullscreen");
                }
                $("#vcw .video-content").html(html);
                $("#vcw").fadeIn(500).promise().done(function(){
                    typeof data._onRenderCb == 'function' && data._onRenderCb();
                });
                data.isOverlayOpen = true;

                if( !data.allowDock ){
                    $('.jToggleOverlay').addClass('hidden');
                }
            },
            _close : function(){
                $("body")
                    .removeClass("overflowHidden");
                $('#vcw').fadeOut(500,function(){$('#vcw').remove();});
                // $('body').css('overflow','auto');
                data.isOverlayOpen = false;
                require(["tiljs/event"], function(eventBus){
                    eventBus.publish("overlayClosed", {id : data.id});
                });
                require(['tiljs/is'], function(isMod){
                    isMod.tablet() ? $(window).scrollTop( data.currentScrollPos ) : null;
                });
            },
            _isOverlayOpen : function(){
                return data.isOverlayOpen;
            },
            _getSidebarDimenions : function(){
                var dimensions = {
                    leftOffset : 0,
                    width : 0
                };

                var sidebar = ( $(".sidebar").length ? $(".sidebar") : $(".sidebar2") ).eq(0);
                if( !sidebar.length ){
                    return dimensions;
                }
                
                dimensions.width = sidebar.width() + "px";
                
                var wrappperOffset = 0;
                var wrapper = sidebar.closest('.wrapper').length ? sidebar.closest('.wrapper') : $(".wrapper");
                if( wrapper.length ){
                    wrappperOffset = wrapper.offset().left + parseInt( wrapper.css("padding-left") );
                    wrappperOffset = Math.abs(wrappperOffset);
                }
                
                dimensions.leftOffset = ( sidebar.offset().left - wrappperOffset )  + "px";
                return dimensions;
            },
            _adjustnuge:function()
            {
              try{  if(TimesApps.ad_free_nudge==1){$(".jOverlay").addClass("adjust_nudge")}
                    else if(TimesApps.ad_free_nudge==0){$(".jOverlay").removeClass("adjust_nudge")} }catch(e){}
            },
            _positionDock : function(){
                var jOverlay = $(".jOverlay");
                var sidebarDimensions = fn._getSidebarDimenions();

                jOverlay
                    .css({'margin-left': sidebarDimensions.leftOffset, 'width': sidebarDimensions.width })
                    .addClass("belowHeader");
                    fn._adjustnuge();
                $('#gaanaplayer').addClass('shifttoleft');
                    
                    
                /*
                require("tiljs/event").subscribe("window.scroll", function(){
                    if( this.isOverlayOpen ){
                        return;
                    }
                    
                    var isHeaderVisible = require("tiljs/ui").inView( $('#header .sub-header'), true, 100);
                    if( isHeaderVisible ){
                        jOverlay
                            .addClass("belowHeader");
                        $('#gaanaplayer').addClass('shifttoleft');
                    }else{
                        jOverlay
                            .removeClass("belowHeader");
                    }
                }.bind({isOverlayOpen: data.isOverlayOpen}));                    
                */
            },
            _toggleOverlayAndDock : function(e){
                if( !data.allowDock ){
                    return;
                }
                var jOverlay = $(".jOverlay");
                jOverlay
                    .toggleClass('video-overlay-wrapper fullscreen dockedVideo fixed animateDock dockedVideoSize')
                    .removeClass("belowHeader")
                    .css({'margin-left':'', 'width':''});
                $('body')
                    .toggleClass('overflowHidden');

                if( data.isOverlayOpen ){
                    data.isOverlayOpen = false;
                    //TimesApps.dockVideo.close(true);
                    fn._positionDock();
                    require(["tiljs/event"], function(eventBus){
                        eventBus.publish("overlayClosed", {id : data.id});
                        eventBus.publish("onOverlayDock", {id : data.id});
                    });
                }else{
                    data.isOverlayOpen = true;
                    require(["tiljs/event"], function(eventBus){
                        eventBus.publish("overlayOpen", {id : data.id});
                    });
                }
            }
        }
        
        api = {
            init : function(){ fn._init(); },
            create: function(options){ fn._create(options); },
            close : function(){ fn._close(); },
            isOverlayOpen : function(){ return fn._isOverlayOpen(); },
            getSidebarPosition : function(){ return fn._getSidebarDimenions(); }
        }
        return api;
    }(jQuery));
TimesApps.overlayModule.init();

TimesApps.VideoListPlayer = (function(){
    var fn, api, cache, config, data;
    
    config = {
        iframeHtml: '<iframe allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" id="videosrc"></iframe>'
    }
    
    cache = {
        videoList : $(".jVideoList")
    };
    
    data = {
        currentVideo : undefined,
        pageUrl : undefined,
        playerType : "",
        isOverlayOpen : false,
        isDocked : false,
        vidSource : ""
    }
    
    bindEvents = function(){
        if( $("#container.articleshow").length ){
            /*
            * articleshow has infinite scroll
            * new elements are added on scroll
            */
            $("body").on("click",".jVideoList [data-plugin='vidPlay']", fn._handleClick);
            $("body").on("click",".jVideoList [data-plugin='vidOverlay']", fn._handleClick);
        }
        else if(window.location.href.includes("/sports") || window.location.href.includes("/india")){
            $("body").on("click",".jVideoList [data-plugin='vidPlay']", fn._handleClickSports);
            $("body").on("click",".jVideoList [data-plugin='vidOverlay']", fn._handleClickSports);
        }else{
            $(".jVideoList").on("click","[data-plugin='vidPlay']", fn._handleClickSports);
            $(".jVideoList").on("click","[data-plugin='vidOverlay']", fn._handleClickSports);
            // removed _handleClick
        }
        //video events
        $(document).on('VOD_EVENTS', fn._handlePlayerEvents);
        
        require(["tiljs/event"], function(eventBus){
            eventBus.subscribe("overlayClosed", fn._onOverlayClose);
            eventBus.subscribe("overlayOpen", fn._onOverlayOpen);
            
            eventBus.subscribe("onOverlayDock", fn._onOverlayDock);
        });
        
        require(["tiljs/event"], function(eventBus){
            //eventBus.subscribe("onVideoOverlayOpen", fn._triggerAnalytics);
            eventBus.subscribe("onVideoOverlayOpen", fn._updatePageUrl);
            eventBus.subscribe("onVideoOverlayOpen", fn._triggerAnalyticsForDockOverlayEvents);
            eventBus.subscribe("onVideoOverlayUpdate", fn._triggerAnalyticsForDockOverlayEvents);
            eventBus.subscribe("onVideoDock", fn._triggerAnalyticsForDockOverlayEvents);
            eventBus.subscribe("onVideoOverlayUpdate", fn._updatePageUrl);
            eventBus.subscribe("onVideoOverlayUpdate", fn._triggerAnalytics);
            eventBus.subscribe("onVideoOverlayUpdate", fn._markPlaying);
        });
    }
    
    fn = {
        _triggerAnalyticsForDockOverlayEvents : function(eventData){
            if( !eventData.vidSource ){
                return;
            }
            var ga = window.ga;
            
            var eventCat;
            if( TimesApps.dockVideo.getStatus('isDocked') || data.isDocked ){
                eventCat = 'Video-Dock_Player';
            }else if( TimesApps.dockVideo.getStatus('isOverlayOpen') || eventData.isOverlay ){
                eventCat = 'Video-Overlay_Player';
            }
            
            if( !(ga && eventCat) ){
                return;
            }
            
            var eventAction = toiprops.seoLocation || "";
            eventAction += '-' + eventData.vidSource || "";
            
            var eventLabel = 'Parent-' + ( data.pageUrl || '' );
            eventLabel += '-Child-';
            if( eventData.vidUrl ){
                eventLabel += eventData.vidUrl;
            }else{
                eventLabel += eventData.msid;
            }
            
            ga('send', {
                hitType: 'event',
                eventCategory: eventCat,
                eventAction: eventAction,
                eventLabel: eventLabel
            });
            
        },
        _savePageUrl : function(){
            //save page url
            //used to restore url on overlay close
            data.pageUrl = window.location.pathname;
        },
        _triggerAnalytics: function(details){
            var title = details.title;
            var url = details.url;
            if(typeof ga != "undefined"){
	            ga('send', {
                   'hitType': 'pageview',
                   'page': url,
                   'title': title,
                   'location': location.protocol + "//"+location.hostname + url
                });    
	        }
                
            // Comscore Call
            if (typeof(fireComscore) == "function") {
                fireComscore();
            }
            
            // ChartBeat Call
            if (typeof(pSUPERFLY) !="undefined" && typeof(pSUPERFLY.virtualPage) == "function") {
                pSUPERFLY.virtualPage(url, title);
            }
        },
        _updatePageUrl : function(details){
            if( !data.isOverlayOpen ){
                return;
            }
            
            if( !(details && details.url) ){
                return;
            }
            /*var relativeUrl = details.url;
            var url = "//" + window.location.hostname;
            var url = relativeUrl;
            */
            history.pushState(null,null, details.url);  
        },
        _updateTitle : function(){
            //todo - move to 1 place
        },
        _getVideoSrc : function(videoItem, isUserInitiated){
            var currentItem = $(videoItem);
            data.currentVideo = videoItem;
            var msid = currentItem.data("msid");
            var nextVideo = fn._getNextVideo(videoItem);
            var nextVideoMsid = nextVideo.data("msid") || "";
            var secId = currentItem.closest("[data-secid]").data("secid");
            if( !secId ){
                secId = currentItem.closest(".video-category").find("[data-secid]").data("secid") || "";
            }
            data.vidSource = currentItem.closest("[data-ga-source]").data("ga-source") || '';
            
            var src = '/vod_player.cms?msid=';
    		src += msid;
    		src += '&videosection=' + (currentItem.closest("[data-slike-sec]").data("slike-sec") || '');
    		src += '&source=' + data.vidSource;
    		src += '&nextid=' + nextVideoMsid;
    		src += '&audio=80';
    		src += '&secId=' + secId;
            src += '&autoplay=1';
            src += '&type=vidOverlay';
            src += '&utm_source=DesktopHome&utm_medium=LatestNews&utm_campaign=VideoPlug&pg=toihp';
            src += '&version=16';
            
            if( isUserInitiated && isUserInitiated != "false" ){
                src += '&userInitiated=1';
            }else{
                src += '&userInitiated=0';
            }
            
            return src;
        },
        _loadVideoInOverlay : function(videoItem, isUserInitiated){
            var currentItem = $(videoItem);
            var msid = $(currentItem).data("msid");
            var src = fn._getVideoSrc(videoItem, isUserInitiated);
            var container = document.createElement("div");
            $(container).html(config.iframeHtml);
            $(container).find("iframe").attr("src", src);
            
            var title = currentItem.find(".w_tle a").text();
            var titleHtml = $("<p>")
                                    .addClass("jTitle title")
                                    .text( title );
            $(container)
                    .append( titleHtml );  
            
            var allowDock = false;
            var isDesktop = require('tiljs/is').desktop();
            if( isDesktop && fn._getPlayerType() == "VIDOVERLAY" ){
                allowDock = true;
            }
            
            TimesApps.overlayModule.create({
                id : msid,
                html : container.innerHTML,
                isFullscreen: true,
                allowDock: allowDock
            })
            
            data.isOverlayOpen = true;
            
            var title = currentItem.find('a').attr("title");
            var url = currentItem.find('a').attr("href");
            fn._savePageUrl();
            
            var dataObj = {
                title: title, 
                url: url,
                vidSource: data.vidSource,
                vidUrl : url,
                msid: msid,
                isOverlay : true
            };
            require("tiljs/event").publish("onVideoOverlayOpen", dataObj);
        },
        _fetchPlaylist : function(event, clickedVideo, clickedVidMsid, secId, callBack, playlistUrl, gaSource){
            var defaultUrl = "/wdt_videolist.cms?v=1954&noads=1&msid=" + secId + "&config.perpage=10&tmpl=videoshow&img=200&tag=videopllist&pg=AS_RHS_Overlay~Videos!TopVideo&classname=vidOverlay";
            var url = playlistUrl ? playlistUrl : defaultUrl;
            $.ajax({
                url : url,
                contentType: "text/html",
                dataType: "html",
                type: "GET"
            }).done(function(htmlData){
                if( !( htmlData && htmlData.length ) ){
                    return;
                }

                var $sliderContainer = $("<div>").addClass("overlay-slider-container"),
                    videoPlaylistHtml = $("<div>").addClass("slideshowbox");
                videoPlaylistHtml
                            .append("<div>")
                            .addClass("jPlaylist playlist")
                            .attr("data-plugin", "videos_section_slider")
                            .html(htmlData);
                            
                if( !videoPlaylistHtml.find("ul li").length ){
                    return;
                }

                if( !videoPlaylistHtml.find("ul [data-msid='"+ clickedVidMsid +"']").length ){
                    var firstVideo = videoPlaylistHtml
                                                .find("ul li").eq(0)
                                                .clone();
                    var firstVideoMsid = firstVideo.data("msid");
                    
                    var regex = new RegExp(firstVideoMsid, 'g');
                    
                    var imgUrl = firstVideo
                                    .find("img")
                                    .attr("data-src")
                                    .replace(regex, clickedVidMsid);
                    
                    var clickedVidTitle = clickedVideo.find(".w_tle a").eq(0).text();
                    firstVideo
                            .attr("data-msid", clickedVidMsid)
                            .find("img")
                            .attr("data-src", imgUrl);
                    firstVideo        
                            .find(".w_tle a").eq(0).text(clickedVidTitle);
                            
                    
                    videoPlaylistHtml
                            .find("ul")
                            .prepend(firstVideo);
                }else{
                    var playingVid = videoPlaylistHtml.find("ul [data-msid='"+ clickedVidMsid +"']");
                    var video = playingVid.clone();
                    playingVid.remove();
                    videoPlaylistHtml
                            .find("ul")
                            .prepend(video);
                }
                //mark video active
                videoPlaylistHtml
                            .attr('data-ga-source', gaSource || "")
                            .find("[data-msid='"+ clickedVidMsid +"']")
                            .addClass("active");
                if( typeof callBack == "function" ){
                    $sliderContainer.append(videoPlaylistHtml);
                    callBack($sliderContainer);
                }
                
            });
        },
        _addPlaylist : function(event){
            var vidContainer = $(".video-content");
            var addPlaylist = function(videoPlaylistHtml){
                if( fn._getPlayerType() == "VIDOVERLAY" ){
                    vidContainer.find('.jPlaylist').remove();
                    vidContainer.append(videoPlaylistHtml);
                }else if( fn._getPlayerType() == "VIDPLAY" ){
                    vidContainer.find('.jPlaylist').remove();
                    vidContainer.append(videoPlaylistHtml);
                }
                 
                var playlist = vidContainer.find(".jPlaylist");   
                playlist.off().on("click", "[data-plugin='vidOverlay']",fn._changeVideo);
                videos_section_slider.init(playlist);
                setTimeout(function(){
                    require('tiljs/plugin/lazy').load();
                }, 1000);
            }
            var clickedVideo = $(event.target).closest("[data-plugin='vidOverlay']");
            var clickedVidMsid = clickedVideo.data('msid');
            var secId = clickedVideo.closest(".video-category").find("[data-secid]").data("secid") || "";
            var gaCat = TimesApps.GA.getGACategory();
            gaCat = gaCat.indexOf('/') >= 0 ? gaCat.replace('/','$slash$') : gaCat;
            var gaSource = gaCat + '_overlay_playlist';
            var playlistUrl = clickedVideo.closest("[data-source-url]").data("source-url") || "";
            if( !secId ){
                secId = clickedVideo
                        .closest("[data-secid]")
                        .data("secid") || "";
            }
            fn._fetchPlaylist(event, clickedVideo, clickedVidMsid, secId, addPlaylist, playlistUrl, gaSource);
        },
        _changeVideo : function(e){
            e.preventDefault();
            var currentVideo = this;
            data.currentVideo = currentVideo;
            var src = fn._getVideoSrc(currentVideo, true);
            $(".jOverlay").find("iframe").attr("src", src);
            
            var title = $(currentVideo).find('a').attr("title");
            var url = $(currentVideo).find('a').attr("href");
            require("tiljs/event").publish("onVideoOverlayOpen", {title : title, url : url});
        },
        _onOverlayClose : function(eventData){
            fn._updatePageUrl( { url: data.pageUrl } );
            data.isOverlayOpen = false;
        },
        _onOverlayOpen : function(eventData){
            var currentVideo = $(data.currentVideo);
            var title = $(currentVideo).find('a').attr("title");
            var url = $(currentVideo).find('a').attr("href");
            data.isOverlayOpen = true;
            data.isDocked = false;
            var dataObj = {
                                title : title,
                                url : url,
                                'isOverlay' : true,
                                vidSource: data.vidSource
                                
                            };
            require("tiljs/event").publish("onVideoOverlayOpen", dataObj);
        },
        _onOverlayDock : function(){
            var currentVideo = $(data.currentVideo);
            var msid = $(currentVideo).data("msid");
            var url = $(currentVideo).find('a').attr("href");
            data.isOverlayOpen = false;
            data.isDocked = true;
            var dataObj = {
                    vidSource: data.vidSource,
                    vidUrl : url,
                    msid: msid,
                    isDocked : true
            };
            require("tiljs/event").publish("onVideoDock", dataObj);
        },
        _handleClick : function(e){
            e.preventDefault();
            //cache.videoList = $(this).closest(".jVideoList");
            var jOverlay = $(".jOverlay");
            jOverlay
                .find(".jToggleOverlay")
                .trigger('click');
            TimesApps.dockVideo && TimesApps.dockVideo.close();
            var currentVideo = this;
            var type = $(this).data('plugin') || "";
            data.playerType = type.toUpperCase();
            fn._loadVideoInOverlay(currentVideo, true);
            if( fn._getPlayerType() == "VIDOVERLAY" || fn._getPlayerType() == "VIDPLAY" ){
                fn._addPlaylist(e);
            }
        },
        _handleClickSports : function(e){
            e.preventDefault();
            window.open($(e.currentTarget).find('a').attr('href'), '_blank')
        },
        _handlePlayerEvents : function(event, data , eventType){
            event.preventDefault();
            var videoSource  = data.source || "";
            videoSource = videoSource.toUpperCase();
            switch( eventType.toUpperCase() ){
                case "ONNEXTVIDEOPLAY" :
                    if( fn._getPlayerType() == "VIDPLAY" ){
                        fn._playNext(data.userInitiated);   
                    }
                    break;
                case "VIDEOREADY" :
                    if( fn._getPlayerType() == "VIDOVERLAY" ){
                        fn._updateUi(data);
                    }
                    break;
                case "PLAYING" :
                    if( videoSource == "ABOVEARTICLE" && !TimesApps.dockVideo.getStatus('isOverlayOpen') ){
                        TimesApps.dockVideo.setStatus("overlayClosedByUser",false);
                    }
            }
        },
        _getNextVideo : function(currentVideo){
            var currentVideo = $(currentVideo);
            var nextVideo = currentVideo.next();
            if( nextVideo.length == 0 ){
                nextVideo = currentVideo.siblings().eq(0);
            }
            
            return nextVideo;
        },
        _playNext : function(isUserInitiated){
            if( !data.currentVideo ){
                return;
            }
            var currentVideo = $(data.currentVideo);
            data.currentVideo = currentVideo;
            var nextVideo = fn._getNextVideo(currentVideo);
            fn._updatePageUrl( { url: $(nextVideo).find("a").attr("href") } );
            fn._loadVideoInOverlay(nextVideo, isUserInitiated);
        },
        _updateUi : function(dataObj){
            var playlistDom = $(".jOverlay")
                .find(".jPlaylist");
            //fn._markPlaying(playlistDom, data);
            var video = $("ul [data-msid='" + dataObj.id + "']").eq(0);
            data.currentVideo = video;
            var title = video.find(".w_tle a").eq(0).text() || "";
            var jOverlay = $(".jOverlay");
            jOverlay
                .find(".jTitle")
                .text(title);
            var url = video.find("a").attr("href") || "";
            require("tiljs/event").publish("onVideoOverlayUpdate", {url : url, obj: dataObj, playlistDom: playlistDom, title: title});
        },
        _markPlaying : function(data){
            if( !( data && data.playlistDom && data.obj ) ){
                return;
            }
            var playlistDom = data.playlistDom;
            var obj = data.obj;
            var msid;
            if( obj && obj.id ){
                msid = obj.id;
            }else if( data.currentVideo ){
                msid = data.currentVideo.attr("msid");
            }

            playlistDom
                .find("li")
                .removeClass("active");
            playlistDom
                .find("ul [data-msid='"+ msid +"']")
                .addClass("active");
        },
        _getPlayerType : function(){
            return (data.playerType || "").toUpperCase();
        },
        _init : function(){
            if( 
                !(
                    cache.videoList.find("[data-plugin='vidPlay']").length 
                    || cache.videoList.find("[data-plugin='vidOverlay']").length 
                )
            ){
                return;
            }

            bindEvents();
            fn._savePageUrl();
        }
    };
    
    api = {
        init : function(){ return fn._init(); },
        savePageUrl : function(){ fn._savePageUrl(); },
        getVideoSrc : function(videoItem, isUserInitiated){ return fn._getVideoSrc(videoItem, isUserInitiated); },
        fetchPlaylist : function(event, clickedVideo, clickedVidMsid, secId, callBack, playlistUrl, gaSource){ return fn._fetchPlaylist(event, clickedVideo, clickedVidMsid, secId, callBack, playlistUrl, gaSource); }
    };
    
    fn._init();
    return api;
})();

TimesApps.dockVideo = (function($){
    var fn, api, config, state, bindEvents;
    
    config = {
        validSourceList : [
                'ABOVEARTICLE',
                //'PRIME_TOPVOD0'
            ]
    };
    
    state = {
        //isListeningToScroll : false,
        isDocked : false,
        isDragged : false,
        isOverlayOpen : false,
        overlayClosedByUser : false,
        msid : undefined,
        vidContainer : undefined,
        vidSource : undefined
    }
    
    data = {
        vidUrl : ''
    }
    
    bindEvents = function(){
        require(["tiljs/event"], function(eventBus){
            eventBus.subscribe("VOD_EVENTS", function(eventData){
                if( !eventData instanceof Array ){
                    return;
                }
                var data = eventData[1] || {};
                var source = (data.source || "").toUpperCase();
                var eventType = ( eventData[2] && typeof eventData[2] == "string" ) ? eventData[2].toUpperCase() : "";
                if( ( config.validSourceList.indexOf(source) > -1 || source.indexOf("ABOVEARTICLE") > -1 ) && eventType == "VIDEOREADY" ){
                    //state.isListeningToScroll = true;
                    if( !state.vidContainer ){
                        //first time
                        //bcoz dom not cached
                        state.vidSource = source;
                        var videoDomEle = $('[data-msid=' + data.id + '][data-plugin="vodIframe"]');
                        if( videoDomEle.length ){
                            state.vidContainer = videoDomEle;
                        }else{
                            state.vidContainer = $(".articlevideo[data-msid='" + data.id + "']").find(".vidContainer");
                        }
                        state.vidScrollContainer = state.vidContainer.closest('.articlevideo');
                        //attach events
                        require("tiljs/event").subscribe("window.scroll", fn._handleVideoPosition);
                    }else if( state.vidSource != source ){
                        //different video
                        //slot started playing
                        //close old video
                        fn._close(true);
                        //update state to new video
                        state.vidSource = source;
                        state.vidContainer = $(".articlevideo[data-msid='" + data.id + "']").find(".vidContainer");
                        state.vidScrollContainer = state.vidContainer.closest('.articlevideo');
                    }else if( !fn._getStatus('isOverlayOpen') ){
                        state.overlayClosedByUser = false;
                        state.vidContainer = $(".articlevideo[data-msid='" + data.id + "']").find(".vidContainer");
                    }
                    
                    if( fn._getStatus('isOverlayOpen') ){
                        fn._updateOverlay(data);
                    }else if( state.isDocked ){
                        fn._updateDock(data);
                    }
                    
                    state.vidContainer.off().on("click", ".jToggleOverlay", fn._expandCollapseOverlay);
                    state.vidContainer.on("click", ".jClose", fn._close);
                }else if( source.indexOf("ABOVEARTICLE") > -1 && eventType == "PLAYING" ){
                    state.overlayClosedByUser = false;
                }
                
                $(document).on('keyup', function(e){
                    if(e.keyCode == 27){ // on Esc key press
                       fn._close();
                    } 
                });
            });
        });
    }
    
    fn = {
        _makePlayerDraggable : function(){
            //$(".vidContainer").dragit();
        },
        _handleVideoPosition : function(){
            if( state.isOverlayOpen ){
                return;
            }
            var vidScrollContainer = state.vidScrollContainer;
            var skew = $("#skew").val() || 50;
            var isHeaderVisible = require("tiljs/ui").inView( $('#header .sub-header'), true, 100);
            var isVideoVisible = require("tiljs/ui").inView( vidScrollContainer, true, -280);
            if( isVideoVisible && state.isDocked ){
                fn._closeDock();
                state.isDragged = false;
            }else if( 
                    !isVideoVisible 
                    && !state.isDragged 
                    && !state.isDocked 
                    && !isHeaderVisible
                ){
                    fn._dockPlayer();
                    //fn._makePlayerDraggable();
            }
        },
        _dockPlayer : function(e){
        	var vidContainer = state.vidContainer;
            if( !state.isDocked && !state.overlayClosedByUser ){
                if( !vidContainer.find(".buttonContainer").length  ){
                    //if not in dom, add dock buttons
                    var dockHtml = '<div class="buttonContainer jDockButton"><span class="jToggleOverlay expand"></span>';
                    dockHtml += '<span class="jClose close"></span></div>';
                    vidContainer.prepend(dockHtml);
                }else{
                    //show dock buttons
                    vidContainer.find(".buttonContainer").removeClass("hidden");
                }
                state.isDocked = true;
                state.msid = vidContainer
                					.find("iframe")
                					.data("videomsid");
                
                var title = vidContainer
                                .closest("#container.articleshow #content")
                                .find(".title_section .heading1").text();

                var sidebarDimensions = TimesApps.overlayModule.getSidebarPosition();
                
                if( !vidContainer.find(".jTitle").length ){
                    var titleHtml = $("<p>")
                                    .addClass("jTitle title")
                                    .text( title );
                    vidContainer
                                .addClass("dockedVideo fixed animateDock dockedVideoSize belowHeader")
                                .css({'margin-left': sidebarDimensions.leftOffset, 'width': sidebarDimensions.width })
                                .append( titleHtml );
                }else{
                    vidContainer
                            .addClass("dockedVideo fixed animateDock dockedVideoSize belowHeader")
                            .css({'margin-left': sidebarDimensions.leftOffset, 'width': sidebarDimensions.width })
                            .find(".jTitle")
                            .text(title)
                            .removeClass("hidden");
                }
                
                $('#gaanaplayer').addClass('shifttoleft');
                TimesApps.overlayModule.close();
                    

                vidContainer.one("animationend webkitTransitionEnd transitionend webkitAnimationEnd oAnimationEnd MSAnimationEnd", function(event){
                    event.stopPropagation();
                    event.stopImmediatePropagation();
                    //console.log("transition end");
                    vidContainer.addClass("animationEnd");
                });
                
                vidContainer.removeClass("animationEnd");
                var msid = $(".articlevideo").attr("data-msid") || window.msid;
                var imgUrl = "/photo/" + msid + ".cms";
                $(".vidbox").css("background-image","url("+imgUrl+")");
                
                var dataObj = {
                    vidSource: state.vidSource,
                    vidUrl : data.vidUrl,
                    msid: state.msid,
                    isDocked : true
                };
                require("tiljs/event").publish("onVideoDock", dataObj);
            }
            
            /*vidContainer.on("mousedown", function(){
                if( !state.isDragged ){
                    $(this).removeClass("dockedVideo animateDock").animate({top: "1px", left:"840px"}, 200);
                }
                state.isDragged = true;
            })*/
        },
        _expandToOverlay : function(){
            state.isOverlayOpen = true;
            state.isDocked = false;
            var vidContainer = $(".vidContainer");
            vidContainer
                        .addClass("expand-overlay")
                        .removeClass("dockedVideo fixed animateDock dockedVideoSize belowHeader")
                        .css({'margin-left':'', 'width':''})
                        .off("mousedown");
                        //.find(".buttonContainer").addClass("hidden");
            if( vidContainer.parent().find(".expand-overlay-box").length ){
                $("<div>").addClass("expand-overlay-box").insertBefore(vidContainer);
            }
            $("body")
                    .addClass("overflowHidden");
            
            TimesApps.VideoListPlayer.savePageUrl();
            var dataObj = {
                vidSource: state.vidSource,
                vidUrl : data.vidUrl,
                msid: state.msid,
                isOverlay : true
            };
            require("tiljs/event").publish("onVideoOverlayOpen", dataObj);
        },
        _collapseToDock : function(){
            state.isOverlayOpen = false;
            state.isDocked = true;
            var vidContainer = $(".vidContainer");
            
            $("body")
                    .removeClass("overflowHidden");
            
            var sidebarDimensions = TimesApps.overlayModule.getSidebarPosition();
            
            vidContainer
                        .removeClass("expand-overlay")
                        .addClass("dockedVideo fixed animateDock dockedVideoSize belowHeader")
                        .css({'margin-left': sidebarDimensions.leftOffset, 'width': sidebarDimensions.width })
                        .off("mousedown");
                        //.find(".buttonContainer").addClass("hidden");
            
            var dataObj = {
                    vidSource: state.vidSource,
                    vidUrl : data.vidUrl,
                    msid: state.msid,
                    isDocked : true
                };
            require("tiljs/event").publish("onVideoDock", dataObj);
        },
        _expandCollapseOverlay : function(event){
            if( state.isDocked ){
                state.isDocked = false;
                fn._expandToOverlay();

                var addPlaylist = function(videoPlaylistHtml){
                    var vidContainer = $(".vidContainer");
                    vidContainer.find('.jPlaylist').remove();
                    vidContainer.append(videoPlaylistHtml);
                        
                    vidContainer.find(".jPlaylist").off().on("click", "[data-plugin='vidOverlay']",fn._changeVideoInOverlay);
                    //init slider
                    videos_section_slider.init(vidContainer.find(".jPlaylist"));
                    setTimeout(require('tiljs/plugin/lazy').load(), 1000);
                }
                
                var clickedVideo = state.vidScrollContainer;
                var clickedVidMsid = state.vidScrollContainer.find("iframe").contents().find('#msid').val() || "";
                var secId = state.vidScrollContainer.find("iframe").contents().find('#sectionId').val() || "";
                var gaCat = TimesApps.GA.getGACategory();
                gaCat = gaCat.indexOf('/') >= 0 ? gaCat.replace('/','$slash$') : gaCat;
                var source = gaCat + '_overlay_playlist';
                TimesApps.VideoListPlayer.fetchPlaylist(event, clickedVideo, clickedVidMsid, secId, addPlaylist, null, source);
            }else{
                fn._collapseToDock();
            }
        },
        _changeVideoInOverlay : function(e){
            e.preventDefault();
            var currentVideo = $(this);
            var src = TimesApps.VideoListPlayer.getVideoSrc(currentVideo, true);
            state.vidContainer.find("iframe").attr("src", src);
            
            var title = currentVideo.find('a').attr("title");
            var url = currentVideo.find('a').attr("href");
            state.vidContainer
                .find(".jPlaylist li")
                .removeClass("active");
            currentVideo.addClass("active");
            
            state.vidContainer
                    .find(".jTitle")
                    .text(title);
            data.vidUrl = url;
            var dataObj = {
                url : url, 
                obj: undefined, 
                playlistDom: state.vidContainer, 
                title: title,
                vidSource: state.vidSource,
                vidUrl : data.vidUrl,
                isOverlay : true
            };
            require("tiljs/event").publish("onVideoOverlayUpdate", dataObj);
        },
        _removePlaylist :  function(){
            $('.jPlaylist').remove();
        },
        _closeDock : function(){
            $(".vidbox").css("background-image","")
                        .css("background-color","black");
            
            $(".vidContainer")
                        .removeClass("dockedVideo animateDock dockedVideoSize fixed belowHeader")
                        .css({'margin-left':'', 'width':''})
                        .find(".jTitle")
                        .addClass("hidden");
            state.isDocked = false;
            fn._removeButtons();
        },
        _closeOverlay : function(){
            state.isOverlayOpen = false;
            fn._removePlaylist();
            $(".vidContainer")
                        .removeClass("expand-overlay")
                        .find(".jTitle")
                        .addClass("hidden");
            $("expand-overlay-box").addClass("hidden");
            fn._removeButtons();
            $("body")
                    .removeClass("overflowHidden");
            
            require(["tiljs/event"], function(eventBus){
                eventBus.publish("overlayClosed", {});
            });
        },
        _close :  function(closedByNonUserInteraction){
            if( !state.vidScrollContainer ){
                return;
            }
            if( closedByNonUserInteraction === true ){
                state.overlayClosedByUser = false;
            }else{
                state.overlayClosedByUser = true;
            }
            if( state.isDocked ){
                fn._closeDock();
            }else{
                fn._closeOverlay();
            }

            var vidIframe = state.vidScrollContainer.find("iframe");
            //pause video
            if( vidIframe
                && vidIframe[0]
                && vidIframe[0].contentWindow
                && vidIframe[0].contentWindow.TimesApps.VideoPlayer2.getPlayer("VOD")
                && vidIframe[0].contentWindow.TimesApps.VideoPlayer2.getPlayer("VOD").pause
            ){
                vidIframe[0].contentWindow.TimesApps.VideoPlayer2.getPlayer("VOD").pause();   
            }
            /*
            var videoList = TimesApps.VideoGalleryApp.getVideoList();
            if( 
                videoList 
                && videoList["ABOVEARTICLE"] 
                && videoList["ABOVEARTICLE"].pauseVideoCallBack )
            {
                videoList["ABOVEARTICLE"].pauseVideoCallBack();
            }*/
        },
        _removeButtons : function(){
            $(".vidContainer").find(".buttonContainer").addClass("hidden");
        },
        _getStatus : function(flag){
            return state[flag];
        },
        _setStatus : function(flag, value){
            state[flag] = value;
        },
        _isVideoDocked : function(){
            var status = {
                status : false,
                id : undefined
            }
            if( state.isDocked ){
                status = {
                    status : true,
                    id : state.msid
                };
            }
            
            return status;
        },
        _updateTitle : function(data){
            var title = data.title || "";
            state.vidContainer
                    .find(".jTitle")
                    .text(title);
        },
        _updateOverlay : function(data){
            fn._updateTitle(data);
            var playlistDom = state.vidContainer
                        .find('.jPlaylist');
            var video = state.vidContainer
                                .find(".jPlaylist ul [data-msid=" + data.id + "]");

            if( ! (video && video.length) ){
                return;
            }
            
            var url =   video
                        .eq(0).find("a")
                        .attr("href") || "";
                        
            var eventDataParams = {
                                    url : url,
                                    obj: data,
                                    playlistDom: playlistDom,
                                    title: title,
                                    isOverlay : true
                                };
            require("tiljs/event").publish("onVideoOverlayUpdate", eventDataParams);
        },
        _updateDock : function(data){
            fn._updateTitle(data);
        },
        _init : function(){
            bindEvents();
        }
    }
    
    api = {
        getStatus : function(flag){ return fn._getStatus(flag); },
        setStatus : function(flag, value){ fn._setStatus(flag, value); },
        isVideoDocked : function(){ return fn._isVideoDocked(); },
        close : function(closedByNonUserInteraction){ return fn._close(); } 
    }
    
    fn._init();
    
    return api;
}(jQuery));

define('gaanaplayer', ['jquery', "tiljs/logger", "tiljs/is"], function($, logger,is) {
    var mod_gaanaplayer = {};
    
    var onbeforeventfired =false;


    mod_gaanaplayer.api = {

        init: function() {
            TimesApps.checkGdprAndCall && TimesApps.checkGdprAndCall(mod_gaanaplayer.fn._init, null);

        }
    };

    mod_gaanaplayer.utils = {

        checkIfIE: function() {

            var ua = window.navigator.userAgent;
            var msie = ua.indexOf("MSIE ");
            if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) { // If Internet Explorer, return version number

                return true;
            } else { // If another browser, return 0
                return false;
            }

        }


    }

    // Private Functions
    mod_gaanaplayer.fn = {

        _bindEvents: function() {

            $('#gaanaplayer .box_head').on('click', function(e) {
                e.preventDefault();
                e.stopImmediatePropagation()
                /* Act on the event */

                if ($(this).closest('#gaanaplayer').hasClass('active')) {
                    
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Minimize',window.location.href);
                    mod_gaanaplayer.fn._removeCloseBtn();
                    $("#gaanaplayer").removeClass("active");
                    

                } else {
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Open',window.location.href);
                    
                    $("#gaanaplayer").addClass('active');
                    mod_gaanaplayer.fn._addCloseBtn();
                    mod_gaanaplayer.fn._setIframeLink();
                }
                
            });

            $(document).on('videodash.userAction videodash.videoEvents LIVE_TV_EVENTS MINI_TV_EVENTS', function(event, data, eventType) {
                mod_gaanaplayer.fn._handleVideodashEvents(event, data, eventType);


            });
             $(window).on('beforeunload', function(eventObject) {
                 onbeforeventfired = true;
                 if(document.getElementById('gaanatvplayer') && document.getElementById('gaanatvplayer').contentWindow){
                        var frame = document.getElementById('gaanatvplayer');
                        frame.contentWindow.postMessage('close_browser','*') 
                 }
                
                         
            }); 
            $( window ).unload(function() {
                if(!onbeforeventfired){
                    
                  var frame = document.getElementById('gaanatvplayer');
                frame.contentWindow.postMessage('close_browser','*')
                }
                
                });


            $('.gaanaplayer_box .box_head').on('click', '.close_gaanaplayer', function(event) {
                event.preventDefault();
                
                var frame = document.getElementById('gaanatvplayer');
                frame.contentWindow.postMessage('close_gaanawidget','*')
                mod_gaanaplayer.fn._analyticsFire('Gaana widget','Close',window.location.href);
                mod_gaanaplayer.fn._closeGaanaplayer();
            });



            window.addEventListener('message', mod_gaanaplayer.fn._messageHandler, false);


        },
        _createUI: function() {


            var $container = $('<div class="gaanaplayer_box" id ="gaanaplayer_box"></div>')
            var $header = $('<div class="box_head"><span class="gaanaplayer_title"><img src="/photo/58243404.cms" alt="gaana icon" /> of the Day</span></div>');
            var $iframe = $('<iframe frameborder="0" width="100%" allow="autoplay" height="310px" id="gaanatvplayer" class="jLivePlayer"></iframe>');
            $container.append($header).append($iframe);

            $('#gaanaplayer').append($container);

        },
        _analyticsFire : function(catg, action, label){
	    
	    
	    
	    if(window.ga){
	        ga('send', 'event', catg, action, label, {'nonInteraction': 1});
	    }else{
	        setTimeout(function () {ga('send', 'event', catg, action, label, {'nonInteraction': 1});},5000);
	    }
	    return true;
	},

        _init: function() {

            
            $("#gaanatvplayer").attr('src', '');

            if (
                typeof is.IE== 'function' &&
                is.IE()
            ) {
                // Hide for IE as we Gaana is not supported in IE
                $('#gaanaplayer').hide();

            } else {

                if ($('#minitv #streaming_box') && $('#minitv #streaming_box').is(':visible')) {
                    // Shift Gaana to Left if Minitv is visible
                    $('#gaanaplayer').addClass('shifttoleft');

                }
                
                mod_gaanaplayer.fn._createUI();
                $('#gaanaplayer').show();
                mod_gaanaplayer.fn._bindEvents();


            }

        },
        _addCloseBtn: function() {

            var $closeBtn = $('<a class="close_gaanaplayer"></a>');
            $('.gaanaplayer_box .box_head').append($closeBtn);
        },
        _removeCloseBtn: function() {
            $('.gaanaplayer_box .box_head .close_gaanaplayer').remove();
        },
        _messageHandler: function(message) {

            var trusteddomain = "https://gaana.com";

            //inspect the origin property of the message event to ensure the message originates from the same domain)
            if ( message.origin == trusteddomain ) {
                var status = message.data.status.replace(/\s/g,'').toLowerCase();
                if (status== 'play') {
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Play',message.data.title);
                    mod_gaanaplayer.fn._gaanaplayed();

                } else if (status == 'pause') {
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Pause',message.data.title);
                    mod_gaanaplayer.fn._gaanapaused();

                }
                else if (status=='languagedropdownopen'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Drop down open',window.location.href);
                    
                }
                else if (status=='languagechange'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Language',message.data.value);
                    
                }
                else if (status=='loading'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Loading',message.data.title);
                    mod_gaanaplayer.fn._gaanaplayed();
                    
                }
                else if (status=='seekbackward'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Seek backward',message.data.title);
                    
                }
                else if (status=='seekforward'){
                    mod_gaanaplayer.fn._analyticsFire('Gaana widget','Seek forward',message.data.title);
                    
                }
                


            }

        },


        _pauseGaanaplayer: function() {

            document.getElementById('gaanatvplayer').contentWindow && document.getElementById('gaanatvplayer').contentWindow.postMessage('pause', '*')

        },

        _closeGaanaplayer: function() {

            // document.getElementById('gaanatvplayer').contentWindow && document.getElementById('gaanatvplayer').contentWindow.postMessage('pause', '*')
            // $('#gaanaplayer').hide();
            // $('#gaanatvplayer').attr('src','');
            $('#gaanaplayer').remove();

        },
        
        _pauseAndMinimizePlayer: function(){
            mod_gaanaplayer.fn._pauseGaanaplayer();
            $('#gaanaplayer')
                        .removeClass("active");
            mod_gaanaplayer.fn._removeCloseBtn();
        },

        _gaanaplayed: function() {

            $(document).trigger('GAANA_PLAYER_EVENTS', [{'source' :'GAANA_PLAYER'}, 'playing']);


        },
        _gaanapaused: function() {
            
            $(document).trigger('GAANA_PLAYER_EVENTS', [{'source' :'GAANA_PLAYER'}, 'paused']);


        },
        _triggerPlayerLoaded:function(){
            
            $(document).trigger('GAANA_PLAYER_LOADED', [{'source' : 'GAANA_PLAYER'},'GAANA_PLAYER_LOADED' , mod_gaanaplayer.fn._pauseAndMinimizePlayer]);
        },

        _playGaanaplayer: function() {

            document.getElementById('gaanatvplayer').contentWindow && document.getElementById('gaanatvplayer').contentWindow.postMessage('play', '*')

        },

        _setIframeLink: function() {


            if (!$("#gaanatvplayer").attr("isloadedfirsttime")) {
                mod_gaanaplayer.fn._triggerPlayerLoaded();
                
                var src = mod_gaanaplayer.data.iframeurl;
                $("#gaanatvplayer").attr("src", src).attr('isloadedfirsttime', 'true');
                $("#gaanatvplayer").on('load',function(){
                    document.getElementById('gaanatvplayer').contentWindow && document.getElementById('gaanatvplayer').contentWindow.postMessage('open_gaanawidget', '*')    
                })
                
            }

        },

        _handleVideodashEvents: function(event, eventData, eventType, pauseVideoCallBack) {


            if (eventType.toUpperCase() == 'START') {
                mod_gaanaplayer.fn._pauseGaanaplayer();
            }

        }



    };

    
    mod_gaanaplayer.data = {

        iframeurl: $("#gaanatvplayer").attr('data_src') || 'https://gaana.com/gaanawidget-v7'


    };

    




    return mod_gaanaplayer.api;

});


	
// 
 
    define('onetapsignin',[
        "tiljs/cookie",
        "tiljs/ui",
        "tiljs/login",
        "tiljs/event" ],
    function (cookie, ui, login, event) {
        var constants = {
            clientId : "103703403489-b4t4lt8mr05brqpcdrmsu0di54cmjv4f.apps.googleusercontent.com",
            //get your domain whitelisted in authorised javascript origin domains
            scriptURL : "https://accounts.google.com/gsi/client",
            jssoAPIru : "bchjqhklhblchbhjglh1wbfbv",
            jssoAPIGetURL : "https://jsso.indiatimes.com/sso/services/gponetaplogin/verify",
            nextShowTimeInDays : 15,
            nextShowCookieName : "oneTapNextShow",
            sessionDuration : 100,
            doNotInitiateOneTapByDefault: typeof __initializeOneTapForTOI !== 'undefined' && __initializeOneTapForTOI === false,
            module_name : 'onetapsignin',
            yoloTimeout: 5000
        };
        
        var moduleData = {
            didPromiseReturn: false,
            didOneTapPopUpShow: false
        };
        
        var mod_onetapsignin = {};
        
        mod_onetapsignin.jssoCallback= function(result, textStatus, xhr) {
                    console.log('OneTapSign result', result);
                    require(["tiljs/login", "tiljs/event", "tiljs/user"], function(loginObject, event, userUtils) {
                       
                        // ga('send', 'event', 'Login', 'One_Tap', 'Success_google');
                        loginObject.isLoggedIn(function(user) {
                            console.log('OneTapSign user loggedin',user);
                            if (user) {
                                event.publish("user.login", user);
                                //attention !! show post login popup here
                                mod_onetapsignin.attachPostLoginHTML(user);
                            } else {
                                // call from login module.
                                loginObject.check_user_status(function(user){
                                    if (user){
                                        loginObject.setUser(user);
				                        mod_onetapsignin.attachPostLoginHTML(user);
                                    }else{
                                        loginObject.removeUser();
                                    }
                                });
                            }
                        },true);
                    })
                };
        mod_onetapsignin.googleCallBack =function(response) {
                console.log('OneTapSign googleCallBack',response);
                if (typeof response.credential !== 'undefined') {
                  const currentDate = new Date();
                  // set session for 12 hours
                  window.localStorage.setItem(
                    'onetap_session',
                    currentDate.getTime() + 12 * 60 * 60 * 1000,
                  );
            
                  // Send the token to your auth backend.
                  const googleLongToken = response.credential;
                  const getTicketUrl = `https://jsso.indiatimes.com/sso/services/gponetaplogin/verify?token=${googleLongToken}&channel=toi&ru=${constants.jssoAPIru}`;
            
                //   jsonp(getTicketUrl, null, (err, res) => {
                //     if (err) {
                //       console.error(err.message);
                //     } else if (res && res.code === 200) {
                //       this.setUserLoginSession();
                //     }
                //   });
                 var request = $.ajax({
                      url:getTicketUrl,
                      method: "GET",
                      data: { token: googleLongToken,channel:'toi',ru:constants.jssoAPIru},
                      dataType: "jsonp",
                      success:mod_onetapsignin.jssoCallback
                    });
                  moduleData.didPromiseReturn = true;
                  moduleData.didOneTapPopUpShow = true;
                }
              };
        mod_onetapsignin.initiateAPI = function(callback) {
            
                console.log("OneTapSign initiate API called",google.accounts)
                
                google.accounts.id.initialize({
                    client_id:  constants.clientId,
                    callback:   mod_onetapsignin.googleCallBack,
                    cancel_on_tap_outside: false,
                    auto_select: true,
                    use_fedcm_for_prompt: true,
                });
                console.log("OneTapSign google.accounts", google.accounts.id);
                google.accounts.id.prompt(mod_onetapsignin.handleGoogleNotificationResponses);

        };
        mod_onetapsignin.handleGoogleNotificationResponses = function(notification){
                var getNotDisplayedReason = notification.getNotDisplayedReason();
                var getSkippedReason = notification.getSkippedReason();
                var getDismissedReason = notification.getDismissedReason();
                
                if (getNotDisplayedReason || getSkippedReason ||  (getDismissedReason != 'credential_returned' || typeof getDismissedReason != 'undefined') ) {
                    console.log('OneTapSign notification', notification);
                     if (notification && notification.g === 'display' && notification.h) {
                          setTimeout ( mod_onetapsignin.setTimerToClosePopup, 90000 );
                          window.addEventListener("click",  mod_onetapsignin.closeOneTap);
                        }
                   
                }
        };
        mod_onetapsignin.closeOneTap = function(e)  {
            // cancel if popup available.
            const el =e.target && typeof e.target.closest === 'function' && e.target.closest('#credential_picker_iframe');
            if (!el) {
              mod_onetapsignin.setTimerToClosePopup();
            }
        };
        mod_onetapsignin.setTimerToClosePopup= function(){
                if (
                      window.google &&
                      window.google.accounts &&
                      window.google.accounts.id &&
                      typeof window.google.accounts.id.cancel === 'function'
                    ) {
                      window.google.accounts.id.cancel();
                      window.removeEventListener("click",  mod_onetapsignin.closeOneTap , true);
                    }
        };
        
        mod_onetapsignin.checkIfOneTapPromiseReceived = function(){
            console.log("OneTapSign checkIfOneTapPromiseReceived called");
            var popup_callbacks = moduleData[constants.module_name];
            popup_callbacks && popup_callbacks.onShowCallback && popup_callbacks.onShowCallback(true);
        };
        
        mod_onetapsignin.attachPostLoginHTML = function(user) {
            var loginHTML = 
                '<div class="ontap-background id_postLogin hide">'+
                    '<div class="tap-message">'+
                        '<span class="success"></span>'+
                        '<span class="text">Successfully signed in as '+user.getEmail()+'</span>'+
                        '<span class="close id_onetapclose"></span>'+
                    '</div>'+
                '</div>';
            var $topArea = $('.top-area .row');
            if($topArea.length === 1) {
                $topArea.append(loginHTML);
            } else {
                $('body').append(loginHTML);   
            }
            
            $('.id_postLogin').slideToggle();
            $('.id_onetapclose').on('click',function(){
                $('.id_postLogin').slideToggle();
            });
            
            // Auto hide success login pop up after 10 seconds
            setTimeout(function() {
                var $postLogin = $('.id_postLogin');
                if($postLogin.is(':visible')) {
                    $postLogin.slideToggle();
                }
            }, 10000);
        };
        
        mod_onetapsignin.bindFunction = function() {
            // window.onGoogleYoloLoad = mod_onetapsignin.setGoogleYoloLoadObj;
            console.log("OneTapSign bind fn called",window.onGoogleLibraryLoad)
             //window.onGoogleLibraryLoad = function () {
                //mod_onetapsignin.initiateAPI();
            //}
        };
        
        mod_onetapsignin.loadjs = function() {
            console.log("OneTapSign loadjs called")
            //append the google oneTap API script to dom
            try{
            (function(d, s, id){
                 var js, fjs = d.getElementsByTagName(s)[0];
                 if (d.getElementById(id)) {return;}
                 js = d.createElement(s); js.id = id;
                 js.src = "https://accounts.google.com/gsi/client";
                 js.onload = mod_onetapsignin.initiateAPI;
                 fjs.parentNode.insertBefore(js, fjs);
               })(document, 'script', 'onetap-jssdk');
            }catch(e){
                console.log("*** error loading onetap.js");
            }
              
              console.log("mod_onetapsignin.checkIfOneTapPromiseReceived",mod_onetapsignin)
              mod_onetapsignin.checkIfOneTapPromiseReceived();
        };
        
        mod_onetapsignin.loadAssets = function(){
            setTimeout(mod_onetapsignin.loadjs, constants.sessionDuration);
        };
        
        mod_onetapsignin.registerWithPopupManager = function(){
            moduleData[constants.module_name] = TimesApps.PopUpManager.registerPopup(constants.module_name, mod_onetapsignin.loadAssets);
        };

        mod_onetapsignin.bindEvents = function(){
            if( window.TimesApps && TimesApps.PopUpManager ){
                mod_onetapsignin.registerWithPopupManager();
            }else{
                require(['tiljs/event'], function(pubSub){
                    pubSub.subscribe('popUpManagerLoaded', mod_onetapsignin.registerWithPopupManager);
                });
            }
        }
        
        mod_onetapsignin.init = function() {
            mod_onetapsignin.bindEvents();
            var onetapInitCallback = function() {
                var nextShowCookieName = cookie.get(constants.nextShowCookieName);
                var isOnetapSessionShown = false;
                var ssoid = cookie.get("ssoid") || cookie.get("ssoId");
                var currentDate = new Date();
                var sessionDate;
                if(!ssoid){
                    //mod_onetapsignin.bindFunction();
                    
                    // do not initiate if on newsletter page
                    if(constants.doNotInitiateOneTapByDefault) {
                        return;
                    }
                    
                    try {
                        if(typeof window.localStorage !== 'undefined') {
                            sessionDate = window.localStorage.getItem('onetap_session');
                            if(sessionDate && sessionDate > currentDate) {
                                isOnetapSessionShown = true;
                                // window.localStorage.setItem('onetap_session', currentDate.setHours(23,59,59,999));
                            }
                        }
                    } catch(e) {}
                    
                    var popup_callbacks = moduleData[constants.module_name];
                    // load js after non logged in user is on page for specified seconds and onetapcookie is expired
                    if(!nextShowCookieName && !isOnetapSessionShown) {
                        popup_callbacks && popup_callbacks.onReadyCallback(1);
                    }else{
                        popup_callbacks && popup_callbacks.onReadyCallback(3);
                    }
                    
                }
            }
            
            TimesApps.checkGdprAndCall(onetapInitCallback);
        };
    
        return mod_onetapsignin;
    });




(function(win, doc, $, require){
    
    
    function isMobile(agentString = '') {
  let check = false;
  (function(a) {
    if (
      /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(
        a,
      ) ||
      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(
        a.substr(0, 4),
      )
    )
      check = true;
  })(agentString || navigator.userAgent || navigator.vendor || window.opera);
  return check;
}

    
    
    window.permission = '';
    window.plsObj = {}
     window.prcNames={
        "TOI_PLUS": {
        "1": "TOIPlusFreeTrial",
        "3": "TOIPlusFreeTrial",
        "5": "TOIPlusPAID",
        "8": "TOIPlusPAID"
      },
      "TIMESPRIME": {
        "1": "TOIPlusFreeTrial_TimesPrime",
        "3": "TOIPlusFreeTrial_TimesPrime",
        "5": "TimesPrimePaid_TimesPrime",
        "8": "TOIPlusPAID_TimesPrime"
        }
     }
     window.activePlanName="";
    window.currencyCode= 'INR';
    window.toiplusCountryConfig = {};
    window.translationFeedVersion = (new URLSearchParams(window.location.search).get("fv") == 745) ? 745 : 745;
    
    //window.isPayperWidgetActive = [84753978,84754325,84753930,84754243,81909665,84754087,84966997,84755055,88203361,88101093,88108217,88076366,88128458,88026999,88012896].includes(window.msid); 
    window.isPayperWidgetActive = true;
    
    var  loadAssetsFeed = function() {
                            return new Promise(function(resolve, reject) {
                                var domain_json=window.location.host === 'toidev.indiatimes.com'?'https://nprelease.indiatimes.com':'https://plus.timesofindia.com';
                                 fetch(domain_json+'/toi-feed/config/toiw/trans/master?fv=725')
                            .then(
                                function(response) {
                                  if (response.status !== 200) {
                                    console.log('Looks like there was a problem. Status Code: ' + response.status);
                                    return;
                                  }
                            
                                  // Examine the text in the response
                                  response.json().then(function(data) {
                                            window.toiplusCountryConfig = data;
                                            //console.log('resolved loadAssetsFeed data');
                                            resolve(data) ;
                                  });
                                }
                              )
                              .catch(function(err) {
                                console.log('Fetch Error :-S', err);
                              });
                                
                                
                                });
                        }
    async function isFeedReuest() {
        console.log('isFeedData before');
        var isFeedData =  await loadAssetsFeed();
          //console.log('isFeedData After');
          console.log('isFeedData output', isFeedData);
       return isFeedData;
     }
     
    
    
 var toiPlusConfigRunner = function () {
                        
                        
                     //   { "CountryCode":"US","region_code":"VA","city":"HERNDON", "Continent":"NA" }
                       
                            var currentCountry =  (window.geoinfo && window.geoinfo.CountryCode) || comgetCookie('geo_country') || 'IN';
                            var currentregion =   (window.geoinfo && window.geoinfo.region_code) || comgetCookie('geo_region') || 'DL';
                            var currentcontinent =  (window.geoinfo && window.geoinfo.Continent) || comgetCookie('geo_continent') || 'AS';
                            
                            if(window.geoinfo && window.geoinfo.CountryCode != comgetCookie('geo_country') ){
                                setCookie('geo_country',window.geoinfo.CountryCode);
                                setCookie('geo_region',window.geoinfo.region_code);
                                setCookie('geo_continent',window.geoinfo.Continent);
                            }
                            
                        
                            var isLegalDisabledCountries = false;
                            var isAllowedReadAccessCountries = false;
                    
                        try{
                            
                            if(toiplusCountryConfig.toiPlusAllowReadOnly.countries.includes(currentCountry)||toiplusCountryConfig.toiPlusAllowReadOnly.region.includes(currentregion)){
                                isAllowedReadAccessCountries = true;
                            }
                            
                            else if (toiplusCountryConfig.legalDisabledCountries.continent.includes(currentcontinent) && !toiplusCountryConfig.legalDisabledCountries.region.includes(currentregion)) {
                                isLegalDisabledCountries = true;
                            } else if (!toiplusCountryConfig.legalDisabledCountries.continent.includes(currentcontinent) && toiplusCountryConfig.legalDisabledCountries.region.includes(currentregion)) {
                                isLegalDisabledCountries = true;
                            } else {
                                isLegalDisabledCountries = false;
                            }

                            }catch(e){}
                            
                            window.plsObj.isLegalDisabledCountries = isLegalDisabledCountries;
                            window.plsObj.isAllowedReadAccessCountries = isAllowedReadAccessCountries;
                            window.plsObj.isToiPlusUser = isUserPrc(); //prc=1,5  is prime user
                            //window.plsObj.isToiPlusEnabledInCountry = window.toiplusCountryConfig && window.toiplusCountryConfig.toiPlusEnabledCountries && (window.toiplusCountryConfig.toiPlusEnabledCountries).includes(currentCountry);
                            window.plsObj.isToiPlusEnabledInCountry = window.toiplusCountryConfig && window.toiplusCountryConfig.toiPlusDisabledCountries && !(window.toiplusCountryConfig.toiPlusDisabledCountries).includes(currentCountry);
                            
                            window.plsObj.isToiPPSUser = false;
                            var _paidstories_arr = (sessionStorage.getItem("paidstories") && sessionStorage.getItem("paidstories") != null ) ? sessionStorage.getItem("paidstories").split(",") : [];
                            if(typeof window.msid != 'undefined' && typeof _paidstories_arr !='undefined' && _paidstories_arr.length >0)
                            {
                                if(_paidstories_arr.includes(window.msid.toString())) window.plsObj.isToiPPSUser = true;
                            }
                            
                            window.plsObj.isCredPPSUser = false;
                            var _credstories_arr = (sessionStorage.getItem("credstories") && sessionStorage.getItem("credstories") != null ) ? sessionStorage.getItem("credstories").split(",") : [];
                            if(typeof window.msid != 'undefined' && typeof _credstories_arr !='undefined' && _credstories_arr.length >0)
                            {
                                if(_credstories_arr.includes(window.msid.toString())) window.plsObj.isCredPPSUser = true;
                            }
                            
                                const urlSearchParams = new URLSearchParams(window.location.search);
                               const params = Object.fromEntries(urlSearchParams.entries());
                               if(sessionStorage.getItem("geFlag") && JSON.parse(sessionStorage.getItem("geFlag")) && Object.keys(params).length !== 0 && params.utm_source === 'newsshowcase'){
                                    googleExtendedAccessFlow();
                               }
                            
                           return  updatePlsObj();
                    };
    var updatePlsObj = function () {
                
                         
                        console.log('======= Start =========  ');
                        console.log('plsObj = ', window.plsObj);
                        console.log('toiPlusConfig before= ',window.toiPlusConfig);
                         
                          if(comgetCookie('geo_country') == 'IN'){
                              
                               if(window.plsObj.isToiPlusUser){
                                   console.log(' (YNN) =  Show TOI+ entry points & nudges/ regular TOI+ story blocker for india location for Prime User');
                                    window.toiPlusConfig.showToiPlusEntryPoints = true;
                                    window.toiPlusConfig.showToiPlusBlocker = false;
                                    window.toiPlusConfig.showToiPlusNudges = false;
                                   
                               }else{
                                   console.log(' (YNN) =  Show TOI+ entry points & nudges/ regular TOI+ story blocker for india location for non Prime');
                                    window.toiPlusConfig.showToiPlusEntryPoints = true;
                                    window.toiPlusConfig.showToiPlusBlocker = false;
                                    window.toiPlusConfig.showToiPlusNudges = true;
                                   
                               }
                               
                                
                               
                                
                                
                                
                                
                          }else if (window.plsObj.isToiPlusEnabledInCountry && !window.plsObj.isToiPlusUser && !window.plsObj.isLegalDisabledCountries && !window.plsObj.isAllowedReadAccessCountries) {
                            <!--//    (YNN)  Show TOI+ entry points & nudges/ regular TOI+ story blocker -->
                                
                                console.log(' (YNN) =  Show TOI+ entry points & nudges/ regular TOI+ story blocker');
                                
                                window.toiPlusConfig.showToiPlusEntryPoints = true;
                                window.toiPlusConfig.showToiPlusBlocker = false;
                                window.toiPlusConfig.showToiPlusNudges = true;
                            }else if (window.plsObj.isToiPlusEnabledInCountry && !window.plsObj.isToiPlusUser && window.plsObj.isLegalDisabledCountries) {
                                <!--//    (YNY) Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region".-->
                                
                                 console.log(' (YNY) =  Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region"');
                                
                                 window.toiPlusConfig.showToiPlusEntryPoints = false;
                                 window.toiPlusConfig.showToiPlusBlocker = true;
                                 window.toiPlusConfig.showToiPlusNudges = false;
                             } 
                            else if (window.plsObj.isToiPlusEnabledInCountry && window.plsObj.isToiPlusUser && !window.plsObj.isLegalDisabledCountries) {
                                  <!--//    (YYN) Show TOI+ entry points after user logs in. User can read TOI+ stories. Show welcome back popup too.  No nudges/blockers. -->
                                  
                                  console.log(' (YYN) =  Show TOI+ entry points after user logs in. User can read TOI+ stories. Show welcome back popup too.  No nudges/blockers.');
                                  
                                window.toiPlusConfig.showToiPlusEntryPoints = true;
                                window.toiPlusConfig.showToiPlusBlocker = false;
                                window.toiPlusConfig.showToiPlusNudges = false;
                                
                            }else if (window.plsObj.isToiPlusEnabledInCountry && window.plsObj.isToiPlusUser && window.plsObj.isLegalDisabledCountries) {
                                
                                <!--//    (YYY) Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region" -->
                                
                                
                                 console.log(' (YYY) =  Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region');
                                
                                window.toiPlusConfig.showToiPlusEntryPoints = false;
                                window.toiPlusConfig.showToiPlusBlocker = true;
                                window.toiPlusConfig.showToiPlusNudges = false;
                                
                                
                            }else if (!window.plsObj.isToiPlusEnabledInCountry && !window.plsObj.isToiPlusUser && !window.plsObj.isLegalDisabledCountries) {
                                <!--//    (NNN) Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region" -->
                                
                                
                                console.log(' (NNN) =  Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region"');
                                
                                window.toiPlusConfig.showToiPlusEntryPoints = false;
                                window.toiPlusConfig.showToiPlusBlocker = true;
                                window.toiPlusConfig.showToiPlusNudges = false;
                                
                            }else if (!window.plsObj.isToiPlusEnabledInCountry && !window.plsObj.isToiPlusUser && window.plsObj.isLegalDisabledCountries) {
                                
                                 <!--//    (NNY)  Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region" -->
                                 
                                console.log(' (NNY) =  Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region"');  
                                  
                                window.toiPlusConfig.showToiPlusEntryPoints = false;
                                window.toiPlusConfig.showToiPlusBlocker = true;
                                window.toiPlusConfig.showToiPlusNudges = false;
                            }else if (!window.plsObj.isToiPlusEnabledInCountry && window.plsObj.isToiPlusUser && !window.plsObj.isLegalDisabledCountries) {
                                
                                 <!--//    (NYN) Show TOI+ entry points  after user logs in. User can read TOI+ stories. Show welcome back popup too.  No nudges/blockers.-->
                                 console.log(' (NYN) =  Show TOI+ entry points  after user logs in. User can read TOI+ stories. Show welcome back popup too.  No nudges/blockers.');  
                                window.toiPlusConfig.showToiPlusEntryPoints = true;
                                window.toiPlusConfig.showToiPlusBlocker = false;
                                window.toiPlusConfig.showToiPlusNudges = false;
                                
                            }else if (!window.plsObj.isToiPlusEnabledInCountry && window.plsObj.isToiPlusUser && window.plsObj.isLegalDisabledCountries) {
                                
                                <!--//    (NYY) Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region"-->
                                 console.log(' (NYY) =  Dont show TOI+ entry points & nudges. TOI+ Story blocker says "not available in region"');
                                 
                                window.toiPlusConfig.showToiPlusEntryPoints = false;
                                window.toiPlusConfig.showToiPlusBlocker = true;
                                window.toiPlusConfig.showToiPlusNudges = false;
                             }else if (window.plsObj.isAllowedReadAccessCountries) {
                                
                                <!--//    (Y) Show TOI+ entry points. dont show nudges. TOI+ new Story blocker-->
                                 console.log(' (Y) =  Show TOI+ entry points. dont show nudges. TOI+ new Story blocker');
                                 
                                window.toiPlusConfig.showToiPlusEntryPoints = false;
                                window.toiPlusConfig.showToiPlusBlocker = false;
                                window.toiPlusConfig.showToiPlusNudges = false;
                             }
                             
                            console.log('toiPlusConfig after = ',window.toiPlusConfig);
                             console.log('======= End ========= ');
                        return true;     
                    }
    var getPrcCookieValue = function () {
                        var __prc;
                        __prc = document.cookie.match(new RegExp(' prc=([^#]+)'));
                        if (!__prc) {
                            __prc = document.cookie.match(new RegExp('prc=([^#]+)'));
                        }
                        return parseInt(__prc && __prc[1] ? __prc[1] : 0);
                    }
    var isUserPrc = function () {
                        var __prc = getPrcCookieValue();
                        var validPrc = [1, 5];
                        return validPrc.includes(__prc) ? true : false;
                    }
                    
    var setNudgeClickInfo = function (event){
            var obj = {};
            obj.nudgeName = event;
            if(window.tn == 'toiplusarticleshow' || window.tn == 'toiplusphotostory' || window.tn == 'toiplusvideoshow' || window.tn == 'newslettertoi'){
                obj.storyTitle = toiprops?.articleTitle;
                obj.msid = (!!window.msid)? window.msid.toString() : null;
                obj.initiationPage = 'STORY'
            }else{
                obj.initiationPage = 'NON_STORY'
            }
            localStorage.setItem('nudgeClickInfo', JSON.stringify(obj));
        }
        

    var comgetCookie = function(cname) {
                          var name = cname + "=";
                          var decodedCookie = decodeURIComponent(document.cookie);
                          var ca = decodedCookie.split(';');
                          for(var i = 0; i <ca.length; i++) {
                            var c = ca[i];
                            while (c.charAt(0) == ' ') {
                              c = c.substring(1);
                            }
                            if (c.indexOf(name) == 0) {
                              return c.substring(name.length, c.length);
                            }
                          }
                          return "";
                    }
    var setCookie = function(cname, cvalue, exdays) {
                          var d = new Date();
                          d.setTime(d.getTime() + (exdays*24*60*60*1000));
                          var expires = "expires="+ d.toUTCString();
                          document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
                        }
                        
    var throttleFunction = function(func, delay) {
            var prev = 0;
            return (...args) => {
                
                var now = new Date().getTime();
                
                if (now - prev > delay) {
                    prev = now;
                    return func(...args);
                }
            }
        }


    var isfrmApp = function(){
        console.log("isfrmApp function");
        function getParameterByName(name, url = window.location.href) {
            name = name.replace(/[\[\]]/g, '\\$&');
            var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                results = regex.exec(url);
            if (!results) return null;
            if (!results[2]) return '';
            return decodeURIComponent(results[2].replace(/\+/g, ' '));
        }
        
        return (getParameterByName('frmapp') && getParameterByName('frmapp') ==  'yes')? true : false;
    }
    
     var openPlanPagefrmApp = function(containerObj){
         console.log("openPlanPagefrmApp function");
         console.log(containerObj);
         
         if(isfrmApp()==true){
             console.log(containerObj.find('a'));
             alert('change nudge text here');
             containerObj.find('a').attr("href", "toiapp://open-$|$-id=1-$|$-type=planPage");
            // containerObj.find('a').removeAttr("data-prime");
             containerObj.find('a').removeAttr("data-prime");
         }
         
    }
    
    
           function sendDataToGAWithGRX (passedData={}){
            return new Promise(function(resolve, reject) {
                require(["tiljs/login"], function(login) {
                var user = login.getUser();
               
               console.log("sendDataToGAWithGRX start")
               
             var data = passedData;
             
             data.ProductName = 'TOI'
             
             var pushGaData = 'https://etpwaapi.economictimes.com/pushGaData' ;
            // var getGaData =  'https://etpwaapipre.economictimes.com/getGaData?merchantType=<merchantType>&grxId=<3242342>';
             var TypeofPRC = [
                                 { prc:'-1',prctype:''},
                                 { prc:'0',prctype:''},
                                 { prc:'1',prctype:''},
                                 { prc:'2',prctype:''},
                                 { prc:'3',prctype:''},
                                 { prc:'4',prctype:''},
                                 { prc:'5',prctype:''},
                                 { prc:'6',prctype:''},
                                 { prc:'7',prctype:''},
                                 { prc:'8',prctype:''}
                            ];
             
             var getTypeOfPrc = function (key, TypeofPRC) { return TypeofPRC.filter(function(itm){ return itm.prc === key }); }
             var __ssoid = comgetCookie("ssoid") || comgetCookie("ssoId");
             
             var prcValue = getPrcCookieValue();
                    data.UserLoginStatus = false
                    var prcValue = getPrcCookieValue();
                    data.UserSubscriptionStatus = (getTypeOfPrc(`${prcValue}`, TypeofPRC).length > 0 )? ((getTypeOfPrc(`${prcValue}`, TypeofPRC)[0]).prctype) : '';
                    data.featurePermission = window.permission || '' ;
                    data.initiateFrom=`TOI_${data.UserSubscriptionStatus}`;
                
                if(user){
                    data.UserLoginStatus = true
                   var prcValue = getPrcCookieValue();
                   data.UserSubscriptionStatus = (getTypeOfPrc(`${prcValue}`, TypeofPRC).length>0 ) ? ((getTypeOfPrc(`${prcValue}`, TypeofPRC)[0]).prctype) : '';
                   data.featurePermission = window.permission || '' ;
                   data.initiateFrom=`TOI_${data.UserSubscriptionStatus}`;
                }
                
           
             
             //var analyticsData = 
            
            // CD61 Product Name
            // CD63 User Login Status - Hit
            // CD68 User Subscription Status - User
            // CD31 msid
            // CD97 Feature permission
            // CD85 {ET_value/TOI_value/ePaper_value}
            
//             Custom Dimension 8
// Custom Dimension 9 ---- toiplusplans
// Custom Dimension 10 --- 5
// Custom Dimension 21 ---- 1
// Custom Dimension 22 ----- 42o4mwn4u10tdn99ovf6q7bzg
// Custom Dimension 33 --- TOIPlusPAID_1 year
// Custom Dimension 58
             
             var pasdata = {
                            dimension8:'',
                            dimension9:'toiplusplans',
                            dimension10:prcValue,
                            dimension21: data.UserLoginStatus ? '1' :'0',
                            dimension22: __ssoid || '',
                            dimension31: window.msid || '',
                            dimension33: window.planName || '',
                            dimension143: data.featurePermission || '',
                            dimension58: window.planSource || ''
                         };
                        
             
             
             var logdata = JSON.stringify({
                TOI: pasdata,
                analytics_cdp: data?.analytics_cdp,
                objUserData: data?.objUserData,
                ga4Items: data?.ga4Items,
              });
             var merchantType = "TOI";
             var grxId = comgetCookie("_grx") || '';
             
             
                var analyticsData = {
                      "logdata": logdata,
                      "merchantType": merchantType,
                      "grxId": grxId
                 }
                 
                //  if(window.navigator && window.navigator.sendBeacon){
                //      console.log("sendDataToGAWithGRX sendBeacon",pushGaData,  analyticsData)
                //     return navigator.sendBeacon(pushGaData, JSON.stringify(analyticsData));
                     
                //  }else{
                
                            setTimeout(function(){
                              resolve(true);
                            }, 3000);
                
                     var finalanalyticsData = JSON.stringify(analyticsData);
                      $.ajax({
                            type: 'POST',
                            url: pushGaData,
                            data: analyticsData, // or JSON.stringify ({name: 'jonas'}),
                            success: function(data) {
                                console.log("navigator.sendBeacon not found  - Data: " + reps + "\nStatus: " + status);
                                resolve(true); },
                            error: function (err) {
                                // check the err for error details
                                resolve(true); },
                    
                        });
                    //  $.post(pushGaData, finalanalyticsData , function( reps, status){
                    //     console.log("navigator.sendBeacon not found  - Data: " + reps + "\nStatus: " + status);
                    //     resolve(true);
                    //   });
                //  }
                 
                   console.log("sendDataToGAWithGRX end");
                 
             }); 
                
            });

     }

        
    
    
    // Added precautionary to avoid double execution, file is loaded twice anywhere
    if (win.primePaymentFlow){
        return;
    }
    var primePaymentFlow = (function() {
        var utm_campaign_var = window.location.href.indexOf('articleshow')>0 || window.location.href.indexOf('videoshow')>0 || window.location.href.indexOf('photostory')>0?window.msid:'Referral_Wap_TOI';
        var constants = {
            autoinit: true,
            isGetUserDetails: false,
            initshowTopBand:true,
            cookie_ipr: 'ipr',
            prcValueForFTU : 1,
            prcValuesAllowed : [1,3,4,5,8],
            // prod activity code- act3306478, act5196561
            subscribe_tp_error:200,
            freeTrialActivationActivityCode: (window.location.host === 'toidev.indiatimes.com') ? 'act2777703': 'act3306478',
            paidSubscriptionActivityCode: (window.location.host === 'toidev.indiatimes.com') ? 'act1149461': 'act1326237',
            subscriptionContainersTMPL : ['Prime-Home','Prime-HPListing'], //'Prime-Home',
            isArchived:['articleshow'],
            listOrShow:['Prime-Home','Prime-articleshow','Prime-HPListing', 'Prime-photoshow', 'Prime-videoshow','newslettertoi'],
            subscriptionContainersClosingDuration : 2,
            freeTrialAPIURL: '/primefree_trial_activate_post.cms',
            primeSavingAPIURL: '/primesavingapi.cms',
            primeHooksTextAPIURL: '/prime_hooks_text.cms',
            adFreeNudgeAPIURL: '/ad_free_nudge_text.cms',
            topBandAPIURL: '/ad_free_nudge_text.cms',
            tband_session_cookie_name : 'tbsc',
            tband_post_dismiss_cookie_name : 'tbpdsn',
            tband_post_dismiss_cookie_expiry : 3, // expiery in days
            // user clicks on subscribe btn but did not complet payment 
            tband_subscribe_fail_cookie_name : 'tbsf',
            tband_subscribe_fail_cookie_expiry : 3, // expiery in days
            inlineWidgetAPIURL: '/prime_inline_widget.cms',
            freeTrialTopAPIURL: '/prime_free_trial_top_text.cms',
            toiplusVerifymobileScreenAPIURL: '/toiplus_verifymobile_screen.cms',
            primeLoginHooksCSS:'/prime_login_hooks_css/version-107,minify-1.cms',
            successScreenType : 'successScreen',
            failureScreenType : 'failureScreen',
            //timesPrimeSubscribeNowAPIURL: "https://staging.timesprime.com/times_prime/payments?channel=TOI&merchantId=TOI&clientSecret=MlF5N0ZKYVRrMjZ4Qko0Uw==&showVp=false",
            //timesPrimeLearnMoreAPIURL: "https://staging.timesprime.com/times_prime/?channel=TOI&merchantId=TOI&clientSecret=MlF5N0ZKYVRrMjZ4Qko0Uw==&showVp=true",
            timesPrimeSubscribeNowAPIURL: "https://www.timesprime.com/times_prime/payments?channel=TOI&merchantId=TOI&clientSecret=MlF5N0ZKYVRrMjZ4Qko0Uw==&showVp=false",
            timesPrimeLearnMoreAPIURL: "https://www.timesprime.com/times_prime/?channel=TOI&merchantId=TOI&clientSecret=MlF5N0ZKYVRrMjZ4Qko0Uw==&showVp=true",
            selector_close_ad_free:'.close_ad_free',
            selector_login_popup:'#login-popup',
            selector_sso_login_form: '#sso-login-form',
            selector_user_sign_in: '#user-sign-in',
            /*
            selector_close_verifymobile_screen : '.close_verifymobile_screen',
            selector_sso_resend_otp : '#sso-resend-otp',
            selector_resend_box_deafultmsg : '.resend-box [data-defaultmsg]',
            selector_resend_box_resendmsg : '.resend-box [data-resendmsg]',
            selector_sso_change_mobile : '#sso-change-mobile',
            selector_toiplus_verifymobile_popup: '#toiplus-verifymobile-popup',
            selector_toiplus_verifymobile_blk: '#toiplus-verifymobile-blk',
            selector_toiplus_enter_mobile_content: '#toiplus-enter-mobile-content',
            selector_toiplus_enter_otp_content: '#toiplus-enter-otp-content',
            selector_toiplus_congrats_content: '#toiplus-congrats-content',
            selector_toiplus_congrats_content_box: '#toiplus-congrats-content-box',
            selector_toiplus_learnmore_content: '#toiplus-learnmore-content',
            selector_toiplus_payment_content: '#toiplus-payment-content',
            selector_sso_verifymobile_input_mobileNumber: '#sso-verifymobile-input-blk input[name="mobileNumber"]',
            selector_sso_verifymobile_input_submit: '#sso-verifymobile-submit-blk input[type="submit"]',
            selector_toiplus_enter_otp_content_mobileNumTxt: '#toiplus-enter-otp-content .mobileNumTxt',
            selector_input_otpCodeInput: 'input.otpCodeInput',
            selector_sso_verifyotp_input_blk: '#sso-verifyotp-input-blk',
            selector_sso_verifyotp_input_otpCodeInput: '#sso-verifyotp-input-blk input.otpCodeInput',
            selector_sso_verifyotp_input_submit: '#sso-verifyotp-submit-blk input[type="submit"]',
            */
            /*Below pop up div is added as part of AJAX HTML*/
            selector_blockerPopUp: '[data-prime="blocker"]',
            selector_subcription_swingIcon: '[data-prime="blocker"] .swing_icon',
            selector_slick_content_list: "[data-prime='blocker'] .slickContent",
            /*Below container must be HTML to have blocker in place.*/
            selector_ad_free_nudge_Container: '[data-prime="add-free-nudge-container"]',
            selector_top_band_Container: '[data-prime="top-band-container"]',
            ad_free_nudge_wait_time:5000,
            ad_free_nudge_displayed:0,
            selector_blockerContainer: '[data-prime="blocker-container"]',
            selector_ad_free_top_Container: '[data-prime="free-trial-top"]',
            selector_subscriptionNudge: '[data-prime="subscription-nudge"]',
            selector_inlineWidget: '[data-prime="inline-widget"]',
            selector_mp:'[data-prime="meteredPaywall"]',
            selector_inlineShowTopnudge:'[data-prime="inlineShowTopnudge"]',
            initiated_via_meterdpaywall:false,
            subscribeDirect:false,
            utmparams_mapping: {
                'head-subscribe-now': {
                    'prime-home': '&utm_source=TOI&utm_medium=TOIplus_home_ATF_Button&utm_campaign='+utm_campaign_var,
                    'prime-hplisting': '&utm_source=TOI&utm_medium=TOIplus_listing_ATF_Button&utm_campaign='+utm_campaign_var,
                    'default': '&utm_source=TOI&utm_medium=Article_ATF_Button&utm_campaign='+utm_campaign_var,
                },
                'head-subscribe-now-free': {
                    'prime-home': '&utm_source=TOI&utm_medium=TOIplus_home_ATF_Button&utm_campaign=Referral_Web_TOI',
                    'prime-hplisting': '&utm_source=TOI&utm_medium=TOIplus_listing_ATF_Button&utm_campaign=Referral_Web_TOI',
                    'default': '&utm_source=TOI&utm_medium=Article_ATF_Button&utm_campaign='+utm_campaign_var,
                },
                 'blocker_subscribe_now': {
                    'prime-home': '&utm_source=TOI&utm_medium=TOIplus_home_blocker&utm_campaign='+utm_campaign_var,
                    'prime-hplisting': '&utm_source=TOI&utm_medium=TOIplus_listing_blocker&utm_campaign='+utm_campaign_var,
                    'default': '&utm_source=TOI&utm_medium=Article_Unlock&utm_campaign='+utm_campaign_var,
                },
                 'blocker_subscribe_now_free': {
                    'prime-home': '&utm_source=TOI&utm_medium=TOIplus_home_blocker&utm_campaign=Referral_Web_TOI',
                    'prime-hplisting': '&utm_source=TOI&utm_medium=TOIplus_listing_blocker&utm_campaign=Referral_Web_TOI',
                    'default': '&utm_source=TOI&utm_medium=Article_Unlock&utm_campaign='+utm_campaign_var,
                },
                 'adfreenudge_subscribe_now': {
                    'default': '&utm_source=TOI&utm_medium=Ads_Free_Nudge&utm_campaign=Referral_Web_TOI',
                },
                'topband_subscribe_now': {
                    'default': '&utm_source=TOI&utm_medium=TopBand&utm_campaign=Referral_Web_TOI',
                },
                 'adfreenudge_subscribe_now_free': {
                    'default': '&utm_source=TOI&utm_medium=Ads_Free_Nudge&utm_campaign=Referral_Web_TOI',
                },
                'timespoint_activity_list_free': {
                    'default': '&utm_source=TOI&utm_medium=Article_ATF_Button&utm_campaign=Referral_Web_TOI',
                },
                'prime_inline_widget': {
                    'default': '&utm_source=TOI&utm_medium=InlineWidget&utm_campaign=Referral_Web_TOI',
                },
                'metered_paywall_top_band_article': {
                    'default': '&utm_source=TOI&utm_medium=Article_ATF_Button&utm_campaign='+utm_campaign_var,
                },
                'metered_paywall_bottom_band_article': {
                    'default': '&utm_source=TOI&utm_medium=Article_Unlock_BottomNudge&utm_campaign='+utm_campaign_var,
                },
                'metered_paywall_blocker_article': {
                    'default': '&utm_source=TOI&utm_medium=Article_Unlock&utm_campaign='+utm_campaign_var,
                },
                'metered_paywall_learn_article': {
                    'default': '&utm_source=TOI&utm_medium=redirect_to_learnmore&utm_campaign='+utm_campaign_var,
                },
                'metered_paywall_top_band_home': {
                    'default': '&utm_source=TOI&utm_medium=TOIplus_home_ATF_Button&utm_campaign=Referral_Web_TOI',
                },
                'metered_paywall_bottom_band_home': {
                    'default': '&utm_source=TOI&utm_medium=TOIplus_home_BottomNudge&utm_campaign=Referral_Web_TOI',
                },
                'metered_paywall_top_band_list': {
                    'default': '&utm_source=TOI&utm_medium=TOIplus_listing_ATF_Button&utm_campaign=Referral_Web_TOI',
                },
                'metered_paywall_bottom_band_list': {
                    'default': '&utm_source=TOI&utm_medium=TOIplus_listing_BottomNudge&utm_campaign=Referral_Web_TOI',
                },
                'SubscribeNudge':{
                    'default': '&utm_source=TOI&utm_medium=SubscribeNudge-Loginuser&utm_campaign=Referral_Web_TOI'
                }, 
                'adfreePopup_loyalusrers': {
                    'default': '&utm_source=TOI&utm_medium=defaultadfree&utm_campaign=Referral_Web_TOI',
                } 
            },
        };
       
        var popup_callbacks, timesPointsOnFreeTrialActivation, timesPointsOnPaidSubscription;
        
        var errorConfig = {
            congratsScreen: "There is some error, Please try again.",
            serverError: "Something went wrong, Please try again. ",
            incorrectOTP: "Incorrect OTP, Please enter correct OTP. ",
            unknown_error: "Unknown error has occurred. Please try again."
        };
        
        var config = {
            uioption: 'group3'
        };
        /*Below added just for testing purpose*/
        try{
            if (["toidev.indiatimes.com", "toistg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                var urlParams = new URLSearchParams(window.location.search);
                var qprimeSubsUIoption = urlParams.get('primeSubsUIoption');
                if(!!qprimeSubsUIoption){
                    config.uioption = qprimeSubsUIoption.toLowerCase();
                }
            }
        }
        catch(e){
            //console.log(e);
        }
        /*Above added just for testing purpose*/
        var jssoCrosswalkObj, user_details, prcValue, resendOTPClickCounter = 0, isUserStatusChanged = false, reloadPageOnClosePaymentFlow= false;
        
        var setGACustomDimension = function(){
            if(typeof window.ga !== 'function'){
                return;
            }
            var dim18ValObj = {
                'group1' : 'Old_Side_Blocker',
                'group2' : 'New_Side_Blocker',
                'group3' : 'New_Bottom_Blocker',
                'group5' : 'New_Bottom_Blocker_group5'
            }
            var dim18Val = dim18ValObj[config.uioption];
            window.ga('set', 'dimension18', dim18Val);
        };
        
        var fireCustomDimemsntion=function (nudgetype,setCountryCode=0){
            // if(nudgetype.indexOf("|")>-1 && nudgetype.indexOf('View') === -1){
            //     nudgetype=nudgetype.split('|')[0];
            //     ga('set', 'dimension34', nudgetype)
            // }
            
        console.log("nudgetype | setCountryCode",nudgetype,setCountryCode) ;   
        if(setCountryCode==1){
            console.log("setting dimesnion 38");
             var currencyCode = comgetCookie("currencyCode") || window.currencyCode;
             ga('set', 'dimension38', currencyCode);
        }
        if(nudgetype !='prime-login_blocker|cta')
        {
                    if(nudgetype.indexOf("|")>-1 && nudgetype.indexOf('View') === -1){
                 nudgetype=nudgetype.split('|')[0];
                 ga('set', 'dimension34', nudgetype)
             }
            
        }
        else
        {if(sessionStorage.getItem('mp_nudgetype')){
               ga('set', 'dimension34', "NudgeType-"+sessionStorage.getItem('mp_nudgetype'))
        }
            
        }
            
            
        }
    
        var fireGAEvent = function(_action, _label,setCountryCode=0) {
           
                 fireCustomDimemsntion(_action,setCountryCode);
            if(typeof times.mobile !== 'undefined' && typeof times.mobile.gatrack !== 'undefined'){
                times.mobile.gatrack.trackUa({category: 'WAP-' + $('#pageName').val(), action: _action, label: _label});
            }
            else{
                require(["pgtrack"], function(pgtrack) {
                    pgtrack.track('#' + _label + '~' + _action);
                });
            }
                
           
        };
        
        var getSsoid = function() {
            require(["tiljs/cookie"], function(cookie) {
                var uid = cookie.get("ssoid") || cookie.get("ssoId");
                return (uid || '');
            });
        };
            
        var deleteCookie = function(name, path, domain) {
            require(["tiljs/cookie"], function(cookie) {
                if(typeof path !== 'undefined'){
                    cookie.remove(name, path, domain);    
                }
                else{
                    cookie.remove(name);
                }
            });
        };
        
        var delete_ipr_cookie = function() {
            require(["tiljs/util"], function(util) {
                var domain = util.getDomainOnly();
                deleteCookie(constants.cookie_ipr, '/', domain);
            });
        };
        
        /*
        var allowNumber = function(event) {
            var keyCode = getKeyCode(event);
            if (event.target.value.length >= 10 || 
                $.inArray(keyCode, [0, 32]) > -1 || 
                (keyCode != 8 && isNaN(String.fromCharCode(keyCode)))) {
                event.preventDefault(); //stop character from entering input
                return false;
            }
            return true;
        };
    
        var closeModalOnEscapeKeyPress = function(e) {
            if (!$(constants.selector_toiplus_verifymobile_popup).hasClass("active")) {
                return;
            }
            var keyCode = getKeyCode(event);
            if (keyCode === 27) {
                closeBtnHandler(e);
            }
        };
        */
    
        var init = function(init_config) {
            if (typeof jssoCrosswalkObj == "undefined") {
                setAndGetJssoCrosswalkObj();
            }
            initActions();
            prcValue = getPrcCookieValue();
            /*Below added just for testing purpose*/
            try{
                if (["toidev.indiatimes.com", "toistg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                    var urlParams = new URLSearchParams(window.location.search);
                    var qshowcongratsscreen = urlParams.get('showcongratsscreen');
                    if(!!qshowcongratsscreen){
                        test_showcongratsscreen();
                    }
                }
            }
            catch(e){
                //console.log(e);
            }
            /*Above added just for testing purpose*/  
        };
        
        var test_showcongratsscreen =  function(){
            handleFreeTrialSubscription({success: true});
        };
        
        var setPrcForUser = function(callback, forceSet){
            if (!!forceSet) {
                if (typeof jssoCrosswalkObj == "undefined") {
                    setAndGetJssoCrosswalkObj();
                }
                getValidLoggedInUser(callback);
            }
            else if(typeof callback === 'function'){
                callback();
            }
        };
        
      var generateTempTicket = function(cb) {
            require(["tiljs/cookie"], function(cookie) {
                var _uid = cookie.get("TicketId")
                var path = '/gettickettp.cms?ticketId=' + _uid;
                $.ajax({
                    "url": path,
                    "method": "GET",
                    "cache": false,
                }).done(function(tempticket) {
                    cb(tempticket)
                }).fail(function(error) {
                    cb(false)
                })
            })
        }
        
         var createKeyValue = function(_string){
            var keyValue = {};
            _string.split('&').forEach(function(item){
              var [ key, value ] = item.split( '=' );
                    if(key.length){
                        Object.assign(keyValue, {[key]: value})
                    }
                });
                
            return keyValue
        }
        
        var subscribeNow = function(_redirectUri, e) {
            if(window.plsObj.isToiPPSUser || window.plsObj.isCredPPSUser){return false;}
            delete_ipr_cookie();
            var _ru = _redirectUri || encodeURIComponent(document.location.href);
            var utmParams = getUtmParams(e);
            var originalUTM = decodeURIComponent(_ru).split('?')[1]
            if(originalUTM){
                var utmKeyValue = createKeyValue(originalUTM);
            }
            if(constants.initiated_via_meterdpaywall==true){
            _ru = _redirectUri || encodeURIComponent(document.location.href+"?scope=mp");
               var paramArr = utmParams && utmParams.match(/(?:\s)?utm_medium=(\w+);?/);
                if(paramArr && paramArr[1]){
                    utm_medium = paramArr[1] || utm_medium;
                    sessionStorage.setItem("mp_utmmedium",utm_medium);
                    
                }
                
            }
           try{
               
           
            var _redirectUri = constants.timesPrimeSubscribeNowAPIURL + '&redirectUri=' + _ru;
            //console.log("utmKeyValue['utm_medium'] ",utmKeyValue['utm_medium'] )
           
            if (utmKeyValue && utmKeyValue['utm_source'] == 'TOI' && (utmKeyValue['utm_medium'] == 'Article_Unlock_CTN' || utmKeyValue['utm_medium'] == 'Article_Unlock_DFP' )){
               utmParams =  'utm_source=' + utmKeyValue['utm_source'] + '&'+ 'utm_medium=' + utmKeyValue['utm_medium'] + '&' + 'utm_campaign=' + utmKeyValue['utm_campaign'];
            }
           
            if(utmParams){
                _redirectUri = _redirectUri + utmParams;
            }
           }
           catch(e){}
           
            //console.log("****************gotopayment",nativePayment.config_native)
            nativePayment.choosePlan(nativePayment.config_native.planid);
            // generateTempTicket(function(tempticket){
            //     // &tickeId=
            //     if(tempticket){
            //      _redirectUri = _redirectUri + '&ticketId='+tempticket;
            //     }
            //   // window.location.href = _redirectUri;
            //   // nativePayment.choosePlan(nativePayment.config_native.planid);
            // });
        
         
        };
        
        var startPrimeActivationFlow = function() {
            var _prc=getPrcCookieValue();
           
            if (typeof jssoCrosswalkObj == "undefined") {
                setAndGetJssoCrosswalkObj();
                
            }
            if(!isPrimeActiveUser()){
                getUserDetails();    
            }
            else if(_prc==1 && constants.subscribeDirect==true)
            {
                getUserDetails();    
            }
        };
        
        var learnMoreHandler = function(_redirectUri, e) {
            
            require(["tiljs/apps/times/mobilelogin"], function(login) {
                    var user = login.getUser();
                    nativePayment.openPlanPage_2(user)
                   
                });
            
           
            // delete_ipr_cookie();
            // var cta =  e && e.currentTarget && e.currentTarget.getAttribute('data-case'); 
            // var _ru = _redirectUri || encodeURIComponent(document.location.href);
            // var _openUri = constants.timesPrimeLearnMoreAPIURL + '&redirectUri=' + _ru;
            // if (cta && cta=='subscribe'){
            //     _openUri += '&ft=0';
            // }
            
            // var utmParams = getUtmParams(e);
            // if(utmParams){
            //     _openUri = _openUri + utmParams; 
            // }
            // generateTempTicket(function(tempticket) {
            //     if(tempticket){
            //         _openUri = _openUri + '&ticketId='+tempticket;
            //         }
            //     window.open(_openUri, '_blank');
            // })
        };
        
        var getUtmParams = function(evt){
            var utmParam;
            if(evt){
                var utmKey =  evt.target.getAttribute('data-frmpge') ?  evt.target.getAttribute('data-frmpge'): evt.target.getAttribute('data-frmsrc');
                if(utmKey){
                    var pagename = (toiprops._Tmpl_pg || '').toLowerCase();
                    var utmParam;
                    var utmParamObj = constants.utmparams_mapping[utmKey];
                    if(pagename && utmParamObj){
                        utmParam = utmParamObj[pagename];
                    }
                    //If utmParam is empty, we will consider default
                    if(!utmParam && utmParamObj){
                        utmParam = utmParamObj['default'];  
                    }
                  return utmParam;
                }
            }
        };
        
        var getUserDetails = function() {
          
            jssoCrosswalkObj.getUserDetails(getUserDetailsCallback);
            
        };
        
        var getValidLoggedInUser = function(callback) {
            jssoCrosswalkObj.getValidLoggedInUser(callback);
        };
                
        var getUserDetailsCallback = function(response) {
            user_details = response.data;
           
            if (response.code === 200 && response.status === "SUCCESS") {
                checkAndUpdateMobile(user_details);
            }else if (response.code === 404 && response.status === "FAILURE" && !constants.isGetUserDetails) {
                constants.isGetUserDetails = true;
                getValidLoggedInUser(getUserDetails);
            }else {
            }
        };
    var getGraceEndDate = function (endDatems){
        var monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
              "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
            ];
        var date = new Date(endDatems);
        console.log(`${date.getDate()} ${monthNames[date.getMonth()]}`);
        return `${date.getDate()} ${monthNames[date.getMonth()]}`;
    }
    
    
    var storeRenewNudgeCloseTime = function () {
      if (typeof window !== 'undefined' && localStorage) {
        localStorage.setItem('renewNudgeCloseTime', new Date());
      }
    };
    
    var timeDifference = function (dt1, dt2,hours = 24){
        var diff = (dt2.getTime() - dt1.getTime()) / 1000;
        diff /= 60 * 60;
        return Math.abs(Math.round(diff)) > hours;
      };
    
    var isUserPreExpiry = function (endDatems, renewNudgePeriod) {
        var renewNudgePeriod = parseInt(sessionStorage.getItem('renewNudgePeriod'),10) || 30;
      if (!endDatems || !renewNudgePeriod) {
        return false;
      }
      var endDate = new Date(endDatems);
      if (endDate > new Date()) {
        if ((endDate - new Date()) / 86400000 < renewNudgePeriod) {
          return true;
        }
        return false;
      }
      return false;
    };
    var getRemainingDays = function (endDatems){
        var enddate = new Date(endDatems);
        var date = new Date();
        var diffTime = Math.abs(enddate - date);
        var diffHours = Math.ceil(diffTime / (1000 * 60 * 60));
        sessionStorage.setItem('remainingHours', diffHours);
        var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
    }
    
     var expiryDate = function() {
    return new Promise(function(resolve, reject) {
    var endate = sessionStorage.getItem('expirydate');
    var planName=sessionStorage.getItem('planName');
          if(sessionStorage.getItem('inGracePeriod')){
              ga('set', 'dimension33',planName )
          }
           if(sessionStorage.getItem('inPreExpirePeriod')){
              ga('set', 'dimension33',planName )
          }
          if(sessionStorage.getItem("userPurchaseType")){
              ga('set', 'dimension58',sessionStorage.getItem("userPurchaseType") );
          }
            
        
    require(["tiljs/cookie"], function(cookie) {
            var options = {}
            const ssoid = cookie.get('ssoid') || cookie.get('ssoId') || '';
            const grxid = cookie.get('_grx') || ''
            options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
            options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
           if(options.ssoId!=''){ 
            nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                var endate = "";
                var planName='';
                window.userPrcData = data;
                var prc = cookie.get('prc');
                sessionStorage.setItem(`prime_${prc}`, JSON.stringify(data));
                if(data){
                    nativePayment.setPrcCookieInSession(data);
                }
                if(data.accessibleFeatures){
                                    window.permission = data.accessibleFeatures.join(',');
                                }
                // window.permission = (data.accessibleFeatures!='')? data.accessibleFeatures.join('_'):'';
                 if(window.prcNames[data.accessType] && window.prcNames[data.accessType][data.planStatus]){
                                      window.activePlanName=window.prcNames[data.accessType][data.planStatus];
                                     sessionStorage.setItem('planName', window.prcNames[data.accessType][data.planStatus]);
                                }
                                
                    if(data.accessType === 'TIMESPRIME'){
                        var _primeid=$("body").attr("primeid");
                        var checkIfPrimeArticle = function(){
                           return _primeid === '100' ||  _primeid === '500';
                        }
                        nativePayment.savingCallIfTimesPrime(true, checkIfPrimeArticle(), window.msid)
                    }
                    if(data.planStatus === 5){
                            window.plsObj.isToiPlusUser = true
                        }
                        else if(data.otps && data.otps.length > 0){
                            for(i=0;i<data.otps.length;i++){
                                if(data.otps[i].source && data.otps[i].source=="cred" && data.otps[i].msids){
                                    sessionStorage.setItem('credstories', data.otps[i].msids.toString());
                                    if(data.otps[i].msids.includes(window.msid.toString())){window.plsObj.isCredPPSUser = true}
                                }
                                if(data.otps[i].source && data.otps[i].source=="others" && data.otps[i].msids){
                                    sessionStorage.setItem('paidstories', data.otps[i].msids.toString());
                                    if(data.otps[i].msids.includes(window.msid.toString())){window.plsObj.isToiPPSUser = true}
                                }
                            }
                        }
                    if(data.accessType){
                       if(data.accessType==="PAY_PER_ARTICLE"){
                                planName="PAY_PER_ARTICLE";
                            }
                            else if(data.accessType==="TOI_PLUS"){
                                planName="TOIPlusPAID";
                            }
                            else if(data.accessType==="TIMESPRIME"){
                                sessionStorage.setItem('accessType', JSON.stringify(data.accessType));
                                planName="TOIPlus_TimesPrimePaid";
                            } 
                            
                        }
                        window.planName = planName;
                        window.planSource = data.source || '';
                        if(data.mobile){
                           sessionStorage.setItem('userMobile', data.mobile); 
                        }else{
                            require(["tiljs/login"], function(login) {
                                var user = login.getUser();
                                if(user && typeof user.getMobileNumber === 'function' && user.getMobileNumber()){
                                    sessionStorage.setItem('userMobile', user.getMobileNumber());
                                }
                            });
                        }
                        if(data.email){
                           sessionStorage.setItem('userEmail', data.email); 
                        }
                        if(data.credBalance > -1){
                            sessionStorage.setItem('credBalance', data.credBalance);
                        }
                        if(data.credUnlockDatems){
                            var credDate = getGraceEndDate(data.credUnlockDatems);
                            sessionStorage.setItem('credDate', credDate);
                        }
                    if(data.source){
                        sessionStorage.setItem('userPurchaseType', data.source);
                        ga('set', 'dimension58',data.source);
                    }
                    var remainingDays = getRemainingDays(data.endDatems);
                    if(remainingDays >= 0){
                        sessionStorage.setItem('remainingDays', remainingDays);
                    }
                    if(data.inGracePeriod){
                        ga('set', 'dimension33',planName );
                        sessionStorage.setItem('inGracePeriod', data.inGracePeriod);
                        var EndTimeStamp = getGraceEndDate(data.endDatems);
                        sessionStorage.setItem('EndTimeStamp', EndTimeStamp);
                    }
                    var isPreExpiry = !data.inGracePeriod && isUserPreExpiry(data.endDatems);
                    if(isPreExpiry){
                        ga('set', 'dimension33',planName );
                        sessionStorage.setItem('inPreExpirePeriod', isPreExpiry);
                    }
                try {
                    endate = new Date(data.endDate.replace(' IST', '')).toDateString().replace(" ",", ");
                    sessionStorage.setItem("expirydate", endate);
                    resolve({endate})
                } catch (e) {}
           })
            .catch(() => {
                resolve({})
            })
           }
           else
           {resolve({})
               
           }
        })
        
    })
}
        var checkAndUpdateMobile = function(user_details) {
              if(constants.subscribeDirect){
                      subscribeNow('', constants.subscribeEvent);  
                    }
                    else{
                      activeFreeTrial(handleFreeTrialSubscription);
                    }
           
        };
        
        /*
        var activateVerifyMobileScreen = function($activeScreen) {
            if($activeScreen.is($(constants.selector_toiplus_verifymobile_blk))){
                $(constants.selector_toiplus_enter_otp_content).slideUp('fast');
                $(constants.selector_toiplus_enter_mobile_content).slideDown('fast');
            }
            $(constants.selector_toiplus_verifymobile_popup).find('[data-screen]').hide();
            $activeScreen.removeClass('hide').slideDown();
        };
        
        var showVerifyMobilePopup = function() {
            if(!$(constants.selector_toiplus_verifymobile_popup).hasClass("active")){
                $(constants.selector_toiplus_verifymobile_popup).addClass("active");
                $("body").addClass("disable-scroll");
            }
        };
        var hideVerifyMobilePopup = function() {
            $(constants.selector_toiplus_verifymobile_popup).removeClass("active");
            $("body").removeClass("disable-scroll");
        };
        */
        
        var showLoginPopup = function() {
            if(!$(constants.selector_login_popup).hasClass("active")){
                $(constants.selector_login_popup).addClass("active");
            }
            
        };
        
        var hideLoginPopup = function() {
            $(constants.selector_login_popup).removeClass("active");
        };
        
        var initActions = function() {
            $(constants.selector_ad_free_nudge_Container)
                .off("click",  constants.selector_close_ad_free)
                .on("click", constants.selector_close_ad_free, function(e) {
                    hide_ad_free_nudge();
                    var data_action=$(constants.selector_ad_free_nudge_Container).find('[data-prime="close-ad-free-nudge"]').attr("data-action");
                    if(data_action && data_action!=""){fireGAEvent(data_action, '');}
                });
            /*
            $(document).on("keyup", closeModalOnEscapeKeyPress);
    
            $(constants.selector_toiplus_verifymobile_popup)
                .off("click")
                .on("click", function(e) {
                    if (e.srcElement && e.srcElement.id === "toiplus-verifymobile-popup") {
                        closeBtnHandler(e);
                    }
                });
            
            $(constants.selector_sso_verifyotp_input_otpCodeInput).bind('copy paste cut',function(e) { 
                e.preventDefault(); //disable cut,copy,paste
            });
            
            $(constants.selector_sso_verifymobile_input_mobileNumber).bind('copy paste cut',function(e) { 
                e.preventDefault(); //disable cut,copy,paste
            });
            
                
            $(constants.selector_toiplus_verifymobile_popup)
                .off("click",  constants.selector_close_verifymobile_screen)
                .on("click", constants.selector_close_verifymobile_screen, function(e) {
                    closeBtnHandler(e);
                    fireGAEvent('prime-login_blocker|close', 'verify_mobile-'+ prcValue);
                })
                .off(
                    "keypress",
                    constants.selector_sso_verifymobile_input_mobileNumber
                )
                .on(
                    "keyup",
                    constants.selector_sso_verifymobile_input_mobileNumber,
                    handleMobileNumberKeyUp
                )
                .off(
                    "keypress",
                    constants.selector_sso_verifymobile_input_mobileNumber
                )
                .on(
                    "keypress",
                    constants.selector_sso_verifymobile_input_mobileNumber,
                    handleMobileNumberKeyPress
                )
                .off("click", constants.selector_sso_verifymobile_input_submit)
                .on(
                    "click",
                    constants.selector_sso_verifymobile_input_submit,
                    handleMobileNumberSubmit
                )
                .off("keypress", constants.selector_sso_verifyotp_input_otpCodeInput)
                .on(
                    "keypress, input",
                    constants.selector_sso_verifyotp_input_otpCodeInput,
                    handleOTPCodeKeyPress
                )
                .off("keyup", constants.selector_sso_verifyotp_input_otpCodeInput)
                .on(
                    "keyup",
                    constants.selector_sso_verifyotp_input_otpCodeInput,
                    handleOTPCodeKeyUp
                )
                .off("click", constants.selector_sso_verifyotp_input_submit)
                .on(
                    "click",
                    constants.selector_sso_verifyotp_input_submit,
                    handleOTPSubmit
                ).off("click", constants.selector_sso_resend_otp)
                .on(
                    "click",
                    constants.selector_sso_resend_otp,
                    handleResendOTP
                ).off("click", constants.selector_sso_change_mobile)
                .on(
                    "click",
                    constants.selector_sso_change_mobile,
                    handleChangeMobile
                );
                */
        };        
        
        var getPrcCookieValue = function(){
            var __prc;
            __prc= document.cookie.match(new RegExp(' prc=([^#]+)'));
            if(!__prc)
            {
                __prc= document.cookie.match(new RegExp('prc=([^#]+)'));
            }
            return parseInt((__prc && __prc[1]) ? __prc[1] : 0);
        };
        
        var isPrcNotSet = function(prc) {
            /* Handling for undefined and Zero prc value - if prc is not set - return true*/
            return !prc;
        };
        
        var hitPrimeSavingAPI = function(callback){
            return ;
            $.get(constants.primeSavingAPIURL, function(data) {
                if(typeof callback === 'function'){
                    callback(data);
                }
            });
        };
        
        var insertContentInsideScreen=function(res_html){
            if ($(constants.selector_sso_login_form).length > 0) {
                $(res_html).insertBefore(constants.selector_sso_login_form);
            } else {
                // if ($(constants.selector_user_sign_in).is(':empty')) 
                //         {
                            $(constants.selector_user_sign_in).html('<div id="toi-login" data-login-type="mobile"><div class="signin-section">' + res_html + '</div></div>')
                        // }
                    }
            $("#sso-login-form").hide();
            $('#login-popup').addClass("active");
            require(["tiljs/login"], function(login) {
                var user = login.getUser();
                try {
                    $("#prime_user_name").html(user.getName())
                } catch (e) {}
            });
            
        }
        
         var getUserExpireDate = function(prc, cb){
            if (prc > 0){
                require(["tiljs/cookie",'tiljs/event'],function(cookie, event) {    
                    var _uid = cookie.get('ssoid');
                    var dataToBePassed = {
                        uid : _uid,
                        prc : prc,
                        type : 'ExpiryDate',
                    }
                     // Only allowed PRC cookies will trigger a ajax.
                         primePaymentFlow.expiryDate().then(function(date){
                        
                        cb(date.endate);
                         })
                        
                        
                   
                });
            }else{
                cb(null)
            }
        }
        
        var showFreeTrialCongrats = function(res_html, statusClassName) {
            statusClassName = statusClassName || '';
            insertContentInsideScreen(res_html);
            showLoginPopup();
            // publish success screen event.
            require(['tiljs/event'],function(event) {
                event.publish("prime.freetrialSuccess", true) ;
            });
        };
            
        var handleFreeTrialSubscription = function(response, request) {
            var utm_medium = 'prime-login_blocker';
            if(typeof request !== 'undefined'){
                var paramArr = request && request.match(/(?:\s)?utm_medium=(\w+);?/);
                if(paramArr && paramArr[1]){
                    utm_medium = paramArr[1] || utm_medium;
                }
            }
            
            if(!!response){
                setPrcForUser(function(){           
                    require(["tiljs/cookie"], function(cookie) {
                        var _prc = prcValue = getPrcCookieValue();
                        var _uid = cookie.get("ssoid") || cookie.get("ssoId");
                    
                        var dataToBePassed = {
                            uid : _uid,
                            prc : _prc,
                            tponprimetrial: timesPointsOnFreeTrialActivation,
                            tponpaidsubcription: timesPointsOnPaidSubscription,
                            type : response['success'] ? constants.successScreenType : constants.failureScreenType,
                        }
                        var _statusClassName = (response['success'] ? 'success-screen-' : 'failure-screen-') + _prc;
                        
                        // Only allowed PRC cookies will trigger a ajax.
                        if(_statusClassName=="success-screen-1"){
                            showLoginPopup();
                        }
                        showLoader();
                        if(constants.initiated_via_meterdpaywall==true){Object.assign(dataToBePassed,{meteredpaywall:1})}
                        $.get(constants.primeHooksTextAPIURL,  dataToBePassed , function(data) {
                            hideLoader();
                            //Update congrats meessage
                            showFreeTrialCongrats(data, _statusClassName);
                        });
                        
                        if(!!response['success']){
                            $(document).trigger('prime_free_trial_activated', [{'orderId' :response.orderId}]);
                             require(["tiljs/login"], function(login) {
                               if(login.getGa()!=""){
                                  fireGAEvent('Login_screen_Congrats_Screen_View', 'Congrats_Screen'+  '/'+login.getGa());
                               }
                               else
                               {
                                  fireGAEvent(utm_medium + '|Conversion', 'Succcess-'+ prcValue);       
                               }
                             });
                            reloadPageOnClosePaymentFlow = true;
                            require(['localstoragec'], function(localstoragec) {
                                localstoragec.set("congrats_popup", '1', 365, '/');
                            });
                            delete_ipr_cookie();
                            //Hit saving API in case of success
                            //hitPrimeSavingAPI();
                        }
                        else{
                            fireGAEvent(utm_medium + '|Conversion', 'Fail-'+ prcValue + '-' + response['responseCode']);
                        }
                    });
                }, response['success']);
            }
            else{
                showFreeTrialCongrats(errorConfig.congratsScreen, 'error-screen');
                fireGAEvent(utm_medium + '|Conversion', 'Fail-'+ prcValue + '-' + response['responseCode']);
            }
        };
        
        /*
        var handleMobileNumberKeyPress = function(event) {
            var $this = $(this);
            var keyCode = getKeyCode(event);
            if((keyCode == 8) || !allowNumber(event)){
                return;
            }
        };
        
        var handleMobileNumberKeyUp = function(event) {
            var $this = $(this);
            var keyCode = getKeyCode(event);
            setTimeout(function(event) {
                    var val = $this.val(),
                        enableVerify = false,
                        _checkIsMobile = checkIsMobile(val),
                        $sso_verifymobile_submit_btn = $(constants.selector_sso_verifymobile_input_submit);
    
                    if (_checkIsMobile && getValidMobileNumber(val).length > 0) {
                        enableVerify = true;
                    }
                    $sso_verifymobile_submit_btn.prop("disabled", !enableVerify);
                    //handleError($errorElement);
                    if (enableVerify) {
                        $sso_verifymobile_submit_btn.removeClass("disabled");
                    } else {
                        $sso_verifymobile_submit_btn.addClass("disabled");
                    }
            }, 0);
        };
    
        var handleMobileNumberSubmit = function(e) {
            e.preventDefault();
            resetOTPScreen();
            $(constants.selector_sso_verifyotp_input_blk).val('');
            var mobileNumber = $(constants.selector_sso_verifymobile_input_mobileNumber).val();
            var _checkIsMobile = checkIsMobile(mobileNumber);
            if (_checkIsMobile && getValidMobileNumber(mobileNumber).length > 0) {
                if (typeof jssoCrosswalkObj.updateMobile === "function") {
                    showLoader();
                    getValidLoggedInUser(function(){
                        jssoCrosswalkObj.updateMobile(mobileNumber, function(response){
                            updateMobileCallback.call(e, response);
                        });    
                    });
                } else {}
            }
        };
        
        var resetOTPScreen =  function(){
            $(constants.selector_input_otpCodeInput).val('');
            handleError($(constants.selector_sso_verifyotp_input_blk));
            $(constants.selector_sso_verifyotp_input_submit).prop("disabled", true).addClass('disabled');
        }
        
        var handleResendOTP = function(e) {
            resendOTPClickCounter++;
            fireGAEvent('prime-login_blocker|resend_otp', 'attempt_number'+ resendOTPClickCounter);
            handleMobileNumberSubmit(e);
            $(constants.selector_resend_box_resendmsg).each(function(index, element) {
                $(element).text($(element).data('resendmsg'));
            });
        };
        
        var handleChangeMobile = function(){
            $(constants.selector_toiplus_enter_otp_content).slideUp();
            $(constants.selector_toiplus_enter_mobile_content).slideDown();
            $(constants.selector_resend_box_deafultmsg).each(function(index, element) {
                $(element).text($(element).data('defaultmsg'));
            });
        };
        
        var updateMobileCallback = function(response) {
            hideLoader();
            
            var isResendOTP = false;
            try{
            if ('#' + this.toElement.id == constants.selector_sso_resend_otp){
                isResendOTP = true;
            }
            }catch(e){}
            switch (response.code) {
                case 200:
                    var mobileNumber = $(constants.selector_sso_verifymobile_input_mobileNumber).val();
                    $(constants.selector_toiplus_enter_otp_content_mobileNumTxt).text(mobileNumber);
                    $(constants.selector_toiplus_enter_mobile_content).slideUp();
                    $(constants.selector_toiplus_enter_otp_content).slideDown();
                    if (!isResendOTP){
                        fireGAEvent('prime-login_blocker|mobile_submit', 'success');
                    }
                    break;
                // case 415:
                //     handleError($errorElementOtp, errorConfig.expiredOTP);
                //     break;
                default:
                    if (!isResendOTP){
                        fireGAEvent('prime-login_blocker|mobile_submit', 'failure-'+ response.message);
                    }
                    //handleError($errorElementPass, errorConfig.serverError);
            }
        };
        
        var getKeyCode = function (event) {
            var keyCode = event.keyCode || event.which;
            if (keyCode == 0 || keyCode == 229) { //for android chrome keycode fix
                var value = event.target.value;
                keyCode = value.charCodeAt(value.length - 1);
            }
            return keyCode;
        }
        
        //This is to handle enter valid OTP keys
        var handleOTPCodeKeyPress = function(event) {
            var $this = $(this);
            var input_flds = $this.closest('form').find(constants.selector_input_otpCodeInput);
            var index = input_flds.index(this);
            var keyCode = getKeyCode(event);
            
            if((keyCode == 8) || !allowNumber(event)){
                return;
            }
            else if($this.val().length >= 1) {
                input_flds.eq(input_flds.index(this) + 1).focus();
            }
            else{
                input_flds.eq(input_flds.index(this) + 1).focus();
            }
        };
        
        //This is handle back space functionality
        var handleOTPCodeKeyUp = function(event) {
            var newValue = "";
            var $this = $(this);
            var input_flds = $this.closest('form').find(constants.selector_input_otpCodeInput);
            var index = input_flds.index(this);
            var keyCode = getKeyCode(event);
            
            
            if(keyCode == 8) {
                  if(index > 0){
                    input_flds.eq(input_flds.index(this) - 1).focus();
                }
            }
            else{}
            setTimeout(function(event) {
                $(constants.selector_input_otpCodeInput).each(function(index, value) {
                    newValue += $(value).val().toString();
                });
                var enableVerify = false,
                    _checkIsOTP = checkIsOTP(newValue),
                    $sso_verifyotp_submit_btn = $(constants.selector_sso_verifyotp_input_submit);
                    if (_checkIsOTP) {
                    enableVerify = true;
                }
                $sso_verifyotp_submit_btn.prop("disabled", !enableVerify);
                if (enableVerify) {
                    $sso_verifyotp_submit_btn.removeClass("disabled");
                } else {
                    $sso_verifyotp_submit_btn.addClass("disabled");
                }
            }, 0);
        };
        
        var checkIsMobile = function(mobileNumber){
            return (!isNaN(mobileNumber) && mobileNumber.length >= 10);
        };
        
        var checkIsOTP = function(otpCode){
            return (!isNaN(otpCode) && otpCode.length == 6);
        };
        
        var handleOTPSubmit = function(e) {
            e.preventDefault();
            var otpCode = "";
            $(constants.selector_input_otpCodeInput).each(function(index, value) {
                otpCode += $(value).val().toString();
            });
            var mobileNumber = $(constants.selector_sso_verifymobile_input_mobileNumber).val();
            var _checkIsMobile = checkIsMobile(mobileNumber);
            var _checkIsOTP = checkIsOTP(otpCode);
            if(_checkIsMobile && _checkIsOTP){
                if (typeof jssoCrosswalkObj.verifyMobile === "function") {
                    showLoader();
                    jssoCrosswalkObj.verifyMobile(mobileNumber, otpCode, verifyMobileCallback);
                } else {
                    //Close verify flow and show try later message
                }
            }
            else{
                //Handle invalid otp code
            }
        };
        */
                
        var verifyUserMobileCallback = function(response) {
            //console.log('verifyUserMobileCallback');
            switch (response.code) {
                /*case 200 is verifided and 433 is already verified number*/
                case 433:
                case 200:
                    // Invoke Payment flow
                    fireGAEvent('prime-login_blocker|verify_otp', 'success');
                     if(constants.subscribeDirect){
                      subscribeNow('', constants.subscribeEvent);  
                    }
                    else{
                    setPrcForUser(activeFreeTrial.bind(null, handleFreeTrialSubscription), true);
                    }
                    break;
                case 414:
                    fireGAEvent('prime-login_blocker|verify_otp', 'failure-'+ response.message);
                    break;
                default:
                    fireGAEvent('prime-login_blocker|verify_otp', 'failure-'+ response.message);
            }
        };
        /*
        
        var verifyMobileCallback = function(response) {
            hideLoader();
            var $element = $(constants.selector_sso_verifyotp_input_blk);
            switch (response.code) {
                case 200:
                    // Invoke Payment flow
                    fireGAEvent('prime-login_blocker|verify_otp', 'success');
                    setPrcForUser(activeFreeTrial.bind(null, handleFreeTrialSubscription), true);
                    break;
                case 414:
                    fireGAEvent('prime-login_blocker|verify_otp', 'failure-'+ response.message);
                    handleError($element, errorConfig.incorrectOTP);
                    break;
                default:
                    fireGAEvent('prime-login_blocker|verify_otp', 'failure-'+ response.message);
                    handleError($element, errorConfig.serverError);
            }
        };
    
        // withoutPrefix parameter is needed to check for valid number without +91 or 0 appended
        var getValidMobileNumber = function(mobile, withoutPrefix) {
            var regMobile = withoutPrefix ? /^[789654321]\d{9}$/ : /^(\+91)?[0]?[789654321]\d{9}$/;
            var notAllowedNumbers = ["7777777777", "8888888888", "9999999999"];
            var mobileNo = "";
            var length = mobile.length;
            if (regMobile.test(mobile)) {
                mobileNo = mobile.substring(mobile.length - 10, mobile.length);
            }
    
            if (notAllowedNumbers.indexOf(mobileNo) !== -1) {
                mobileNo = "";
            }
    
            return mobileNo;
        };
        */
        
        var showLoader = function() {
            try{
                require('login').showLoader();    
            }
            catch (e) {}
            //$(constants.selector_toiplus_verifymobile_popup).addClass("loader");
        };
    
        var hideLoader = function() {
            try{
                require('login').hideLoader();
            }
            catch (e) {}
            //$(constants.selector_toiplus_verifymobile_popup).removeClass("loader");
        };
        
        var hide_ad_free_nudge=function(){
            $(constants.selector_ad_free_nudge_Container).addClass("mid-animation")
            try{TimesApps.ad_free_nudge=0;
                $(".jOverlay").removeClass("adjust_nudge");
                $(".streaming_box").removeClass("adjust_nudge");
                $("#articlelist.articlelist_container").show("fast");
                 $("body").removeClass("cube-with-ad-free-nudge");
            }catch(e){}
        }
        var load_css=function(cssfile){
            var styles = document.createElement('link');
            styles.rel = 'stylesheet';
            styles.type = 'text/css';
            styles.media = 'screen';
            styles.href = cssfile;
            document.getElementsByTagName('head')[0].appendChild(styles);
        }
        var load_css_nudge=function()
        {
            load_css(constants.primeLoginHooksCSS);
        }
        var nudge_visible=function(dataToBePassed){
            // console.log("*****nudge_visibble");
            if(constants.ad_free_nudge_displayed!=2){
                load_css_nudge();
                setTimeout(function(){$(constants.selector_ad_free_nudge_Container).removeClass("mid-animation").show()},900);
                
                if(dataToBePassed && dataToBePassed.topband && dataToBePassed.topband==1){
                    // console.log("*****top band");
                    try{sessionStorage.setItem(constants.tband_session_cookie_name, true);}catch(e){}
                    fireGAEvent('TOIPlus_TOPBand|CTA-View', 'PS_'+dataToBePassed.prc);
                }
                else{
                    //fireGAEvent('Widget_Adsfree|View', '',1);
                    
                }
                try{TimesApps.ad_free_nudge=1;}catch(e){}
                 $(".jOverlay").addClass("adjust_nudge");
                 $(".streaming_box").addClass("adjust_nudge");
                 $("#articlelist.articlelist_container").hide("fast");
                 $("body").addClass("cube-with-ad-free-nudge");
                 constants.ad_free_nudge_displayed=2;      /* displayed nudge */
            }
        }
        var show_ad_free_nudge=function(adscallbackflag,dataToBePassed){
            if(adscallbackflag){ /*callback from ads and popup logic manager*/
                // console.log("*****ads callback");
                if(constants.ad_free_nudge_displayed==1){
                    popup_callbacks && popup_callbacks.onShowCallback(true);
                    setTimeout(function(){
                        nudge_visible(dataToBePassed);
                        $(constants.selector_ad_free_nudge_Container).find('[data-prime="close-ad-free-nudge"]').attr("data-action","Widget_Adsfree_snackbar|Dismiss");
                        $(constants.selector_ad_free_nudge_Container).find('.adnude_btn').find(".button1").attr("data-action","Widget_Adsfree_snackbar|CTA");
                    },0);
                }
                constants.ad_free_nudge_wait_time=0;   
            }
            else
            { 
                // console.log("*****show_ad_free_nudge called by pop up manager");
                constants.ad_free_nudge_displayed=1;     /*this is called by popup manager but nudge not displayed yet*/
                popup_callbacks && popup_callbacks.onShowCallback(true);
                setTimeout(function(){
                    nudge_visible(dataToBePassed);
                },constants.ad_free_nudge_wait_time);
            }
        }
        
        /*
        var closeBtnHandler = function(e) {
            var $activeVisibleScreen = $(constants.selector_toiplus_verifymobile_popup).find('[data-screen]:visible');
            if($activeVisibleScreen.is($(constants.selector_toiplus_congrats_content)) && reloadPageOnClosePaymentFlow){
                closeAndReload();
            }
            else{
                closePopUp(e);
            }
        };
               
        var closePopUp = function(e) {
            // this is important if we want to remove hash in url so that user will not land on #--- page.
            //$(constants.selector_toiplus_verifymobile_popup).removeClass('disblePopupHide');
            history.pushState("", document.title, window.location.pathname + window.location.search);
            hideVerifyMobilePopup();
        };
        
        var handleError = function($errorElement, msg) {
            if (msg) {
                $errorElement.addClass("error");
                $errorElement.find(".errorMsg").html(msg).show();
            } else {
                $errorElement.removeClass("error");
                $errorElement.find(".errorMsg").html("").hide();
            }
        };      
        */
        
        var setAndGetJssoCrosswalkObj = function() {
            var jssoObj = {};
            if (typeof jssoCrosswalkObj === "object") {
                jssoObj = jssoCrosswalkObj;
            } else if (typeof JssoCrosswalk === "function") {
                jssoCrosswalkObj = new JssoCrosswalk("toi", "web");
                jssoObj = jssoCrosswalkObj;
            }
    
            return jssoObj;
        };
        
        var activeFreeTrial =  function(callback){
            var _prc = getPrcCookieValue();
            require(["tiljs/cookie"], function(cookie) {
                if(isPrcNotSet(_prc)){
                    $('#user-sign-in.toggle').addClass("toi-user-login");
                    showLoader();
                    
                    var utmParams = getUtmParams(constants.freeTrialEvt);
                    constants.freeTrialEvt = '';
                    
                    var _uid = cookie.get("TicketId") || cookie.get("TicketId");
                    var _url = constants.freeTrialAPIURL + '?TicketId=' + _uid +'&content=TOI';
                    
                    if(utmParams){
                       _url = _url + utmParams;
                    }
                    
                    $.ajax({url: _url, cache: false}).done(function( json ) {
                       callback(json, _url)  
                    }).fail(function( jqXHR, textStatus ) {
                       callback({success: false, 'responseCode': 'Ajax Fail at TOI.'})
                    }).always(function(){
                        hideLoader();
                    });
                }
                else if(isPrimeActiveUser()){
                    delete_ipr_cookie();
                    hideLoginPopup();
                    require(["tiljs/login"], function(login) {
                        var user = login.getUser();
                        refreshPage(user);
                    });
                }
                else{
                    hideLoginPopup();
                    console.log('activeFreeTrial showBlockerScreenInit')
                    showBlockerScreenInit();
                }
            });
        };
        
        var showSubscriptionNudge = function(user){
            // Only allowed PRC cookies will trigger a ajax.
            require(["tiljs/cookie"], function(cookie) {
                var _type = 'subscriptionNudgeForFTU';
                
                var dataToBePassed = {
                    type: _type
                }
                $.get(constants.primeHooksTextAPIURL,  dataToBePassed , function( data ) {
                    var $container = $(constants.selector_subscriptionNudge);
                    $container.html(data).removeClass('hide').show();
                    isUserStatusChanged = false;
                });
            });
        };
         
        var storageDaysCheck = function(key,days)
        {
            if(localStorage.getItem(key)){
                    if((parseInt(localStorage.getItem(key)) + (days)*24*60*60*1000) < ((new Date()).getTime())){
                        // console.log("******show top band")
                    }else{
                        // console.log("******do not show top band")
                       return false;
                    }
            }
        }
        var callAdFreeNudge =  function(dataToBePassed){
            //if(window._geo != 1){return;
            //}
            var topband=false;
            var $container = $(constants.selector_ad_free_nudge_Container);
            if(dataToBePassed.prc==0 && $container.hasClass("top-band")){$container.hide()}
            if(dataToBePassed.topband && dataToBePassed.topband==1 && $container.hasClass("check-top-band")){topband=true;} 
            if(topband==true){
                // console.log("*****topband");
                //if(constants.initshowTopBand==false){return;}
                if(storageDaysCheck(constants.tband_post_dismiss_cookie_name,constants.tband_post_dismiss_cookie_expiry)==false){return;}
                if(storageDaysCheck(constants.tband_subscribe_fail_cookie_name,constants.tband_subscribe_fail_cookie_expiry)==false){return;}
           
            } //check for dismiss and subscribed days limit
            if ($(constants.selector_ad_free_nudge_Container).length > 0) {
                $.get(constants.adFreeNudgeAPIURL, dataToBePassed, function(data) {
                    primePaymentFlow.renderJson(data,'script_adfreenudge',$container,dataToBePassed,nativePayment.config_native.toi_json).then(function(response){
                    if(topband){showtopBand(dataToBePassed);}   
                    //$container.html(response);
                    })
                    
                });
            constants.initshowTopBand=false; //to prevent it from viewing when user signs in
            }
        };
        var showtopBand=function(dataToBePassed)
        {
            var $container = $(constants.selector_ad_free_nudge_Container);
            $container.removeClass("stickybottom").addClass("top-band wrapper") //if prc=1 and topband then show top band
            primePaymentFlow.show_ad_free_nudge(0,dataToBePassed)   //not throught ads and //top band is not controlled through pop up manager
            $container.on('click','[data-prime="close-ad-free-nudge"]', function () {
                fireGAEvent('TOIPlus_TOPBand|CTA-Dismiss', 'PS_'+dataToBePassed.prc);
                //try {localStorage.setItem(constants.tband_post_dismiss_cookie_name, constants.tband_post_dismiss_cookie_expiry* 24 * 60 * 60 * 1000);} catch (e) {}
                try {localStorage.setItem(constants.tband_post_dismiss_cookie_name, new Date().getTime());} catch (e) {}
            })
            $container.on('click','[data-prime="subscribe-now"]', function () {
                fireGAEvent('TOIPlus_TOPBand|CTA-SUBSCRIBE NOW-Click', 'PS_'+dataToBePassed.prc);
                try {localStorage.setItem(constants.tband_subscribe_fail_cookie_name, new Date().getTime());} catch (e) {}
            })
        }
        

        var callInlineWidget =  function(dataToBePassed){
            //console.log("callInlineWidget");
            var $inlineWidgetContainer = $(constants.selector_inlineWidget),
                inViewGASent = false;
                
            var tpAcessType=sessionStorage.getItem("accessType") && sessionStorage.getItem("userPurchaseType")?
                JSON.parse(sessionStorage.getItem("accessType")) === 'TIMESPRIME' && sessionStorage.getItem("userPurchaseType") === 'tp' && window.geoinfo.CountryCode === 'IN': false;
            
            if ($inlineWidgetContainer.length > 0) {
                var paramsToBePassed = {
                    uid : dataToBePassed.uid,
                    prc : getPrcCookieValue(),
                    tponprimetrial: dataToBePassed.tponprimetrial,
                    tponpaidsubcription: dataToBePassed.tponpaidsubcription,
                    format: $inlineWidgetContainer.data('format'),
                    v: 5,
                    isGracePeriod: dataToBePassed.inGracePeriod ?  dataToBePassed.inGracePeriod : false,
                    inPreExpiredPeriod: dataToBePassed.inPreExpiredPeriod ? dataToBePassed.inPreExpiredPeriod : false,
                    isfrmapp: window.window.location.href.indexOf('frmapp=yes')>-1 ? true:false,
                    tpAcessType: tpAcessType,
                }
                
                
               
                
                // run only on india geolocation 
                // if(window._geo != 1){
                //     $inlineWidgetContainer.remove();
                //     return;
                // }
                
                var iscountryDisabled = window.toiPlusConfig && !window.toiPlusConfig.showToiPlusNudges;
                //console.log("remove prime inline widgets", window.toiPlusConfig.showToiPlusNudges, iscountryDisabled)
                if(iscountryDisabled && !dataToBePassed.inGracePeriod && !dataToBePassed.inPreExpiredPeriod && !paramsToBePassed.tpAcessType){
                    $inlineWidgetContainer.remove();
                    return;
                }
                if(dataToBePassed.inPreExpiredPeriod){
                    var closedDateInStorage = localStorage.getItem('renewNudgeCloseTime');
                    var renewNudgeCloseDuration = parseInt(sessionStorage.getItem('renewNudgeCloseDuration'),10) || 24;
                    var closedDate = closedDateInStorage ? new Date(closedDateInStorage) : '';
                        // to-do Neelmani
                    if (closedDate && !timeDifference(closedDate, new Date(),renewNudgeCloseDuration)) {
                        $inlineWidgetContainer.remove();
                        return;
                    }
                }
                
               // console.log("callInlineWidget constants.inlineWidgetAPIURL", constants.inlineWidgetAPIURL);
                $.get(constants.inlineWidgetAPIURL, paramsToBePassed, function(data) {
                    primePaymentFlow.renderJson(data,'script_inline',$inlineWidgetContainer,dataToBePassed, nativePayment.config_native.toi_json).then(function(response){
                    if(!response){
                        $inlineWidgetContainer.remove();
                        return;
                    }
                    $('[data-prime="inline-widget"]').addClass('showoldflow');
                    //$inlineWidgetContainer.html(response);
                    if($inlineWidgetContainer.attr("data-sendga") == 1){
                        require(["tiljs/ui", "tiljs/event"], function(ui, event) {
                             //console.log("in ga event view");
                            event.subscribe("window.scroll", function () {
                                if (!inViewGASent && ui.inView($inlineWidgetContainer, true)) {
                                    // fireGAEvent('TOIPlus_InlineWidgets|View', 'PS_' + dataToBePassed.prc);
                                   // console.log("in ga event view1");
                                     var currencyCode = comgetCookie("currencyCode") || window.currencyCode;
                                    ga('set', 'dimension38', currencyCode);
                                    ga("send", "event", "WEB-Default", "TOIPlus_InlineWidgets|View", 'PS_' + dataToBePassed.prc, {'nonInteraction': 1});
                                    $inlineWidgetContainer.removeAttr("data-sendga");
                                    inViewGASent = true;
                                    return true;
                                }
                            });
                        });
                    }
                    })
                    
                });
            }
        };
        
        var callFreeTrialOnTop =  function(dataToBePassed){
            if ($(constants.selector_ad_free_top_Container).length > 0) {
                
                //console.log("constants.freeTrialTopAPIURL=== ",constants.freeTrialTopAPIURL)
                
                
                $.get(constants.freeTrialTopAPIURL, dataToBePassed, function(data) {
                    var $container = $(constants.selector_ad_free_top_Container);
                    //$container.html(data);
                 primePaymentFlow.renderJson(data,'script_mp',$container,dataToBePassed,nativePayment.config_native.toiplus_json).then(function(){
                    if($("[data-prime='free-trial-top-button']").length>0){
                        $(".main-sociable").addClass("adjustctabutton");
                        $("[data-prime='free-trial-top-button']").html($("[data-prime='free-trial-top']").find("span.cta_button").html());
                        
                        $("[data-prime='free-trial-top-button']").find('.timespointsOffer').remove();
                        if(timesPointsOnFreeTrialActivation > 0){
                         //   var _tpOnFreeTrailBtn = '<span class="timespointsOffer">Also, earn<strong> +'+ timesPointsOnFreeTrialActivation +' </strong> TimesPoints</span>'
                         var _tpOnFreeTrailBtn = ''
                            $("[data-prime='free-trial-top-button']").append(_tpOnFreeTrailBtn);
                        }
                        if(timesPointsOnPaidSubscription > 0){
                           // var _tpOnPaidSubscriptionBtn = '<span class="timespointsOffer">Subscribe and get<strong> +'+ timesPointsOnPaidSubscription +' </strong> TimesPoints</span>'
                             var _tpOnFreeTrailBtn = ''
                            $("[data-prime='free-trial-top-button']").append(_tpOnFreeTrailBtn);
                        }
                        $("[data-prime='free-trial-top-button'] a").attr("data-action","prime-login_blocker|cta|ATF_Onscroll")
                    }
                    
                 })
                });
            }
        };
      
        var showBlockerScreen = function(user){
             var iscountryDisabled = window.toiPlusConfig && window.toiPlusConfig.showToiPlusBlocker && toiprops && (toiprops._Tmpl_pg=="newslettertoi" || toiprops._Tmpl_pg=="Prime-Home" || toiprops._Tmpl_pg == "Prime-photoshow" || toiprops._Tmpl_pg=="Prime-HPListing" || toiprops._Tmpl_pg=="Prime-articleshow" || toiprops._Tmpl_pg=="Prime-videoshow" ||toiprops._Tmpl_pg=="Prime-photoshow" || window.location.href.indexOf('toi-plus') !== -1);
            // var prc = getPrcCookieValue();
            // console.log(window.toiPlusConfig);
            if(iscountryDisabled){
                return false; 
            }
            if(!!window.__primeSubsUIoption){
                config.uioption = window.__primeSubsUIoption.toLowerCase();    
            }
            var prc = getPrcCookieValue();
            prc = !!user ? prc : 0;
            var _listorshow=constants.listOrShow.indexOf(toiprops._Tmpl_pg)==0?'list':'show';
           	//console.log("*****showBlockerScreen");
           	//console.log("*****prc",prc);
           	//try{sessionStorage.setItem("primeblockerhtml", "");}catch(e){}
            
            /*Returning from flow - not to showcase subscription containrs on home/ list pages - as interval is not done after closing container*/
            /*if ( (constants.subscriptionContainersTMPL.indexOf(toiprops._Tmpl_pg) > -1) && (!isSCClosingIntervalDone()) )
            {
                return;
            }*/
            
            // Only allowed PRC cookies will trigger a ajax.
            require(["tiljs/cookie", "tiljs/event"], function(cookie, event) {
                var _type = (constants.subscriptionContainersTMPL.indexOf(toiprops._Tmpl_pg) > -1) ? 'subscriptionContainer' : undefined;
                var _uid = cookie.get("ssoid") || cookie.get("ssoId");
                var _archived=constants.isArchived.indexOf(toiprops._Tmpl_pg)==0?1:0;
                var _primeid=$("body").attr("primeid");
                var _pagename="";
                 if (typeof toiprops != "undefined"){_pagename=toiprops._Tmpl_pg;}
                
                var _expirydate=sessionStorage.getItem("expirydate");
                var date=new Date();
                var expdate=new Date(_expirydate);
                var diffTime = Math.abs(expdate - date);
                var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); 
                var days= diffDays;
                 var _inGracePeriod = sessionStorage.getItem("inGracePeriod") ? sessionStorage.getItem("inGracePeriod") : false;
                 var _inPreExpirePeriod = sessionStorage.getItem("inPreExpirePeriod") ? sessionStorage.getItem("inPreExpirePeriod") : false;
                 var isfrmapp = window.window.location.href.indexOf('frmapp=yes')>-1 ? true:false;
                 var tpAcessType=sessionStorage.getItem("accessType") && sessionStorage.getItem("userPurchaseType")?
                sessionStorage.getItem("accessType") === 'TIMESPRIME' && sessionStorage.getItem("userPurchaseType") === 'tp': false;
                                
                var dataToBePassed = {
                    uid : _uid,
                    prc : prc,
                    type: _type,
                    uioption: config.uioption,
                    pagename:_pagename,
                    isArchive:_archived,
                    tponprimetrial: timesPointsOnFreeTrialActivation,
                    tponpaidsubcription: timesPointsOnPaidSubscription,
                    primeid:_primeid,
                    pagetype:_listorshow,
                    expirydate: _expirydate,
                    v:20,
                    days:days,
                    isPaymentBlocked:window.plsObj.isAllowedReadAccessCountries,
                    inGracePeriod:_inGracePeriod,
                    inPreExpiredPeriod: _inPreExpirePeriod,
                    isfrmapp:isfrmapp,
                    credlimit:true,
                    getRegion:false,
                    tpAcessType: tpAcessType,
                };
                 //console.log("***** dataToBePassed",dataToBePassed);
                // console.log("*****isUserStatusChanged",isUserStatusChanged)
                /*Returning from flow - not to showcase subscription blockers on show pages - as user is prime user.*/
                if (isPrimeActiveUser() || !!window._prime_user){
                // if(!sessionStorage.getItem(constants.tband_session_cookie_name) && constants.initshowTopBand==true && prc==1){
                //     callAdFreeNudge(Object.assign(dataToBePassed,{topband:1}));
                    
                // }     //for active user prc=1 need toshow nudge as top band
                // if(_inGracePeriod || _inPreExpirePeriod) {
                //   callAdFreeNudge(dataToBePassed); 
                // }
                    callInlineWidget(dataToBePassed);
                    isUserStatusChanged = false;
                    return;
                }
                if(!window.plsObj.isAllowedReadAccessCountries){
                callInlineWidget(dataToBePassed);
               // callAdFreeNudge(dataToBePassed);
                callFreeTrialOnTop(dataToBePassed);
                }
                
                $.get(constants.primeHooksTextAPIURL,  dataToBePassed , function( data ) {
                    var $container = $(constants.selector_blockerContainer);
                    //try{sessionStorage.setItem("primeblockerhtml", data);}catch(e){}
                    //const params = new URLSearchParams(window.location.search)
                    $(function(){
                         if(typeof _ain !='undefined' && _ain.hasOwnProperty('trackauto')&& !_ain.trackauto && tn=='toiplusphotostory'){
                            delete _ain.trackauto;
                            if(typeof _ain.track==='function'){
                            _ain.track();
                            }
                          // console.log('smartOcto-NonBlocker-track')  
                         }
                    });
                    //$container.html(data);
                    primePaymentFlow.renderJson(data,'script_mp',$container,dataToBePassed,nativePayment.config_native.toiplus_json).then(function(){
                    if((constants.subscriptionContainersTMPL.indexOf(toiprops._Tmpl_pg) > -1) && (config.uioption === 'group1' || config.uioption === 'group3' || config.uioption === 'group5' )){
                        $container.addClass('stickybottom');
                     if(config.uioption === 'group3' || config.uioption === 'group5'){$container.addClass('pr-btm-width');}
                        
                    }
                    
                    if($(constants.selector_blockerPopUp).children().length > 0){
                        if($(constants.selector_blockerContainer).attr("data-sendga")==1){
                            event.subscribe("window.scroll", function () {
                                primeblockerGa(prc);
                            });
                        }
                        if($(constants.selector_blockerPopUp).hasClass('slideIt')){
                            slideItConditionally($(constants.selector_blockerPopUp));    
                            event.subscribe("window.scroll", function () {
                                slideItConditionally($(constants.selector_blockerPopUp));
                            });
                            /*$(constants.selector_blockerPopUp).slideDown( 1000 , function() {
                                $(constants.selector_blockerPopUp).removeClass('hide');
                            });*/
                        }
                        else{
                            $(constants.selector_blockerPopUp).removeClass('hide');
                        }
                    }
                    setFooterHeight();
                    initBenefitsSlider();
                    isUserStatusChanged = false;
                    })
                    
                });
            });
        };
        
        var slideItConditionally = function($popup){
            var footerElem  = document.getElementById('footer');
            require(["tiljs/ui"], function(ui){
                if( ui.inView(footerElem, true) && $popup.hasClass('slideIt')){
                    $popup.removeClass('slideIt');
                    $popup.addClass('slideItDone');
                    return true;
                }
            });
        };
        var primeblockerGa=function(prc){
            var element_prime = $("[data-prime='blocker-container'][data-sendga='1']");
            var blocker_tooltip_offer = $("[data-prime='blocker-container'] .timespointsOffer");
            var top_button_tooltip_offer = $("[data-prime='free-trial-top-button'] .timespointsOffer");
                     require(["tiljs/ui"], function(ui) {
                        if (ui.inView(blocker_tooltip_offer, true)) {
                            $(top_button_tooltip_offer).hide()
                        }
                        else
                        {
                            $(top_button_tooltip_offer).show()
                        }
                        if (ui.inView(element_prime, true)) {
                                    if ($("[data-prime='blocker-container'][data-sendga='1']").length == 1) {
                                        fireGAEvent('prime-login_blocker|View', 'login_blocker-' + prc,1);
                                        $(element_prime).removeAttr("data-sendga")
                                        return true;
                                   }
                            }
                     });
                    
        
        }
        var setFooterHeight = function(){
     if($(constants.selector_blockerContainer).hasClass('stickybottom')){
                var $footer = $('footer');
                var $container = $(constants.selector_blockerContainer);
                $footer.css('padding-bottom', $container.height() + 25);
                
            }
        };
        
        var initBenefitsSlider = function(){
            if(typeof $.fn.slick !== 'undefined' && $(constants.selector_slick_content_list).length){
                var slideshowboxW = $(constants.selector_slick_content_list).outerWidth();
                var slideshowboxItemW = $(constants.selector_slick_content_list).find('li').outerWidth();
                slidesToShow = (slideshowboxW / slideshowboxItemW);
                slidesToScroll = Math.floor(slideshowboxW / slideshowboxItemW);
                $(constants.selector_slick_content_list).slick({
                    slidesToShow: slidesToShow,
                    slidesToScroll: slidesToScroll,
                    slide : 'li',
                    fade: false,
                    infinite: false,
                    variableWidth: false,
                    adaptiveHeight: false,
                    useCSS: true,
                    useTransform: true,
                    responsive: [{
                        breakpoint: 768,
                        settings: {
                        draggable: true,
                        swipe: true,
                        swipeToSlide: true,
                        touchMove: true,
                        }
                    }]
    
                }).css({'visibility':'visible'});    
            }
        };
        
        var isPrimeActiveUser = function(){
            var prc = getPrcCookieValue();
            var activePrimePrc = constants.prcValuesAllowed;
            var _isPrimeUser = (activePrimePrc.indexOf(prc) > -1);
            return _isPrimeUser;
        };
        
        var isFTU = function(){
            var prc = getPrcCookieValue();
            var _isFTU = (prc === constants.prcValueForFTU)
            return _isFTU;
        };
        
        var checkPrimeUser = function(nonPrimeCB, primeCB){
            var isPrimeUser = isPrimeActiveUser();
            if (isPrimeUser) {
                if (typeof primeCB == 'function') primeCB(isPrimeUser);
            }else{
                if (typeof nonPrimeCB == 'function') nonPrimeCB(isPrimeUser);
            }
            return isPrimeUser;
        };
        var checkPrimeUserNoFreeTrial = function(nonPrimeCB, primeCB){
            var isPrimeUser = isPrimeActiveUser();
            var prc = getPrcCookieValue();
            if (isPrimeUser && prc!=1) {
                if (typeof primeCB == 'function') primeCB(isPrimeUser);
            }else{
                if (typeof nonPrimeCB == 'function') nonPrimeCB(isPrimeUser);
            }
            return isPrimeUser;
        };
        var getFlowObj = function(){
            var flowObj;
            if(timesPointsOnFreeTrialActivation > 0){
                flowObj = {
                    type : 'freetrial_activate',
                    timespointsIconClass : 'tpIcon-onFT',
                    timesPointsOnActivity: timesPointsOnFreeTrialActivation,
                };
            }
            return flowObj;
        };
        var getFlowObj_paid = function(){
            var flowObj;
             if(timesPointsOnPaidSubscription > 0){
                flowObj = {
                    type : 'freetrial_activate',
                    timespointsIconClass : 'tpIcon-onFT',
                    timesPointsOnActivity: timesPointsOnPaidSubscription,
                };
            }
            return flowObj;
        };
        var attachMobileNumber = function(callback){
            require(["tiljs/apps/times/mobilelogin"], function(login) {
                var flowObj = getFlowObj();
                if(constants.subscribeDirect){flowObj = getFlowObj_paid();}
                var e = constants.freeTrialEvt;
                login.attachMobileToLoggedInUser(callback, flowObj, e, undefined);
            });
        };
        window.attachMobileNumberToLoggedInUser = attachMobileNumber.bind(null, verifyUserMobileCallback);
        
        var showTextOnLoginScreen=function(){
            if($("#user-sign-in").length){
                
                
               if ((window.geoinfo && window.geoinfo.CountryCode === 'IN' ) || comgetCookie('geo_country') ==='IN')
               {
                    $("#user-sign-in").prepend('<div class="subs_login_points login_points"> <div class="title">Login or signup</div> <div class="loginTpPoints"> Subscribe now and get <strong>+200</strong> TimesPoints </div> </div>')
               }else
               {
                   $("#user-sign-in").prepend('<div class="subs_login_points login_points"> <div class="title alC">Login or signup</div></div>')
               }
                
                 
            }
        }
        
        var loginUser = function(login, e, flowObj){
            if (typeof LoginModule == 'undefined'){
                var dataObj = {
	                isMobileLogin : true,
	                isPrimePaymentFlow: true,
	            };
                // For Desktop
                login.login(function () {
                    checkPrimeUser(startPrimeActivationFlow, window.location.reload)
                },undefined, flowObj, e, dataObj);
            }else{
                // For Mobile
                LoginModule.setCallbackFn(function(){
                    checkPrimeUser(startPrimeActivationFlow, window.location.reload)
                });
                LoginModule.setDomElement($("#user-sign-in"));
                ScreenModule.showScreen(2,$("#user-sign-in"));
                LoginModule.init();
            }
            showTextOnLoginScreen();
        };
        
        
        
        var removeParam =  function(key, sourceURL) {
            var rtn = sourceURL.split("?")[0],
                param,
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString !== "") {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                    }
                }
                rtn = rtn + "?" + params_arr.join("&");
            }
            return rtn;
        };
        
        var getPrimeSuccessReloadUrl = function(user){
            var url = window.location.href;    
            var params = '';
            if(window.plsObj.isToiPPSUser || window.plsObj.isCredPPSUser || isUserPrc()){
                params = 'toipr=2&primetemplate=1'; 
            }  
            url = removeParam('toipr', url);
            url = removeParam('primetemplate', url);
            
            // Logout case, we should remove toipr=2
            if (url.indexOf('?') > -1){
                url += '&';
            }
            else{
                url += '?';
            }
            url += params;
            return url;
        };
        
        var refreshPage = function(user, oldPrc){
            var prc = getPrcCookieValue();
            // case when user is trying to login and user allowed to see prime content
            if ( (user && constants.prcValuesAllowed.indexOf(prc) > -1) || (!user && constants.prcValuesAllowed.indexOf(oldPrc) > -1) || (user && (window.plsObj.isToiPPSUser || window.plsObj.isCredPPSUser))){
                if (["toidev.indiatimes.com", "spmdev.indiatimes.com", "toistg.indiatimes.com", "spmstg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                    var url = window.location.href;    
                    var params = 'toipr=2&primetemplate=1';
                    url = removeParam('toipr', url);
                    url = removeParam('primetemplate', url);
                    
                    // Logout case, we should remove toipr=2
                    if (user){
                        if (url.indexOf('?') > -1){
                           url += '&';
                        }else{
                           url += '?';
                        }
                        url += params;
                    }
                    window.location.href = url;
                }
                else{
                    window.location.reload();
                }
            }
        };
        
        var closeAndReload = function(e){
            hideLoginPopup();
            if (["toidev.indiatimes.com", "spmdev.indiatimes.com", "toistg.indiatimes.com", "spmstg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                window.location.href = getPrimeSuccessReloadUrl();
            }
            else{
                window.location.reload(true);
            }
        };
        
        var showBlockerScreenInit =  function(){
            require(["tiljs/login"], function(login) {
                var user = login.getUser();
          primePaymentFlow.expiryDate().then(function(){      
                setPrcForUser(showBlockerScreen.bind(null, user));
          })
          
            });
        };
        
        var fireGAonUserAction =  function($this){
            if(!!$this && !!$this.data('action') && !!$this.data('label')) {
                fireGAEvent($this.data('action'), $this.data('label').replace('###prc###', prcValue));
            }
        };
        
        /*SC- Subscription Container : Setting time in local storage to not showing again within interval*/
        /*var setSCClosingInterval =  function($this){
            require(['localstoragec'], function(localstoragec) {
                localstoragec.set("prime_sc_show", '1', 1/12, '/');
            });
        };*/
        
        /*var isSCClosingIntervalDone = function(){
            var intervalDone = true;
            try{
                var val = window.localStorage.getItem("prime_sc_show");
                if (val != null) {
                    var record = JSON.parse(val);
                    if (!!record) {
                        var difference = (new Date().getTime() - record.timestamp);
                        var hoursDifference = Math.floor(difference/1000/60/60);
                        intervalDone = (hoursDifference >= constants.subscriptionContainersClosingDuration);
                    }
                }
            }
            catch(e){
                console.log(e);
            }
            return intervalDone;
        };*/
        
        var userStatusActions =  function(user){
            /*Show subscription nudge in case of free trail prime user.*/
            var _isFTU = isFTU();
            prcValue = getPrcCookieValue();
            var bindBlockerScreen = false;
            if( (!isUserStatusChanged && _isFTU && $(constants.selector_subscriptionNudge).length > 0) ){
                showSubscriptionNudge(user);
            }
            else if(!isUserStatusChanged && $(constants.selector_blockerContainer).length > 0){
                bindBlockerScreen = true;
            }
            if(!isUserStatusChanged && $(constants.selector_ad_free_nudge_Container).length > 0){
                bindBlockerScreen = true;
            }
            if(!isUserStatusChanged && $(constants.selector_ad_free_top_Container).length > 0){
                bindBlockerScreen = true;
            }
            if(!isUserStatusChanged && $(constants.selector_inlineWidget).length > 0){
                bindBlockerScreen = true;
            }
            
            if(bindBlockerScreen && toiprops._Tmpl_pg!=="Prime-articleshow")
            {
                isUserStatusChanged = true;
                setTimeout(function(){
                    //isUserStatusChanged = true;
                  primePaymentFlow.expiryDate().then(function(){
                    setPrcForUser(showBlockerScreen.bind(null, user));
                  })
                }, 1000);
            }
            
            /*Below Code executes on dev servers*/
            if (["toidev.indiatimes.com", "spmdev.indiatimes.com", "toistg.indiatimes.com", "spmstg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                // add links to 
                var isPrimeUser = isPrimeActiveUser();
                
                $("a").each(function(){
                    var h = $(this).attr('href');
                    if (typeof h != 'undefined' && ( h.indexOf('articleshow') > -1 || h.indexOf('videoshow') > -1 || h.indexOf('photostory') > -1)){
                        if (user && isPrimeUser){
                            h = h + (h.indexOf('?') != -1 ? "&primetemplate=1" : "?primetemplate=1");
                        }else{
                            h =  removeParam("primetemplate", h);
                        }
                        $(this).attr('href', h);
                    }
                });
            }
        }
    var freeSessionLoyalUsers = (function() {
    var config = {
        getText: '/prime_adfreesession.cms',
        sessions: 4,
        users: [0, 1],
        page: 4,
        timeframe: 30,
        allowedintimeframe: 5,
        cookie: "adfreesession",
        selector: '[data-prime="freeSessionLoyalUsers"]',
        popupmanager: 'freeSessionLoyalUsers',
        pagesExc:['Prime-articleshow']
    }
    
    var popupToBeShown = false,userStatusChanged=false;
    var getParameterByName = function(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }
    var enableAdFreeSession = function() {
        //alert("enableAdFreeSession")
        hideAds();
    }
    var hideAds = function() {
        $('.ad_widget,.sponsor_block,.colombia,.ad1,.ctn_ads_rhs,.colombia,.ad,.ads,.ad-widget,div[id^=div-gpt-ad],div[class^=ctn_ads]').remove();
        //toiprops.adfreesession = 1;
        tempraryadfixes();
    }
    var tempraryadfixes = function() {
        if ($('div[data-type ="ctn"],div[data-type ="prime-AFLU"],#atf_mrec').length > 0) {
            $('div[data-type ="ctn"],div[data-type ="prime-AFLU"],#atf_mrec').remove();
        }
        //brief page,atf_mrec ,perpetual rhs ad

        if (toiprops._Tmpl_pg == "Default") {
            var homeTopMrec = {
            "url": 'https://www.timesprime.com/membership/gaana-plus/?utm_source=toiWebhp&utm_medium=ToprhsMrec&utm_campaign=FTAU',
            "msid": '72036814',
        };
            $(".paisa1.ipadmt").html('<a rel="nofollow" target="_blank" href="' + homeTopMrec.url + '"><img src="https://static.toiimg.com/photo/' + homeTopMrec.msid + '.cms"/></a>')
        };
        //home page banner


    }

    var showpopup = function() {
        popup_callbacks && popup_callbacks.onShowCallback(true);
        var dataToBePassed = {};
        $.get(config.getText, dataToBePassed, function(data) {
            if (data != "") {
                $("body").append(data);
                fireGAEvent('defaultadfree_View', 'ps-' + config.prc+"_"+location.href);
                bindEvents();
            }
        });
    }
    if (getParameterByName('removeads')) {
        enableAdFreeSession()
    } //testing
    if (getParameterByName('showpopup')) {
        showpopup();
        enableAdFreeSession();
    } //testing
    var checkConditionsForPopup = function(showpopup) {
        var cookie_obj = allowedinTimeFrame(incrementCounters);
        if (!cookie_obj) { //user have taken all sessions, check one month condition
            if (!resetAftertimeFrame(cookie_obj)) { //if timeframe over delete cookie move futher or do nothing return false
                return false;
            }
        }
        var session_count = cookie_obj.session_count;
        var page_count = cookie_obj.page_count;
        if (config.sessions == session_count && page_count <= config.page) {
            enableAdFreeSession();
        }
        if (config.sessions == session_count && config.page == page_count) { // condition fulfills register with pop up manger
            resetCounters();
            popupToBeShown = true;
            //init();

            makeTempDiv(); // code for popup manager to avoid loading
            showpopup(); // force load, dont depend on popup manager
        }
        // showpopup();
    }

    var makeTempDiv = function() {
        var x = document.createElement("div");
        x.setAttribute("id", "disable_all_popups");
        document.body.appendChild(x);
    }

    var resetAftertimeFrame = function(cookie_obj) {
        var cookie_obj = JSON.parse(localStorage.getItem(config.cookie));
        if ((parseInt(cookie_obj.timestamp) + (config.timeframe) * 24 * 60 * 60 * 1000) < ((new Date()).getTime())) {
            localStorage.removeItem(config.cookie);
            sessionStorage.removeItem(config.cookie);
            return true;
        } else {
            return false;
        }

    }
    var allowedinTimeFrame = function(incrementCounters) {
        var cookie_obj = JSON.parse(localStorage.getItem(config.cookie));
        if (cookie_obj) {
            var adfreesession_count = Number(cookie_obj.adfreesession_count);
            if (adfreesession_count < config.allowedintimeframe) {
                return incrementCounters(cookie_obj); // increment counter if allowed
            } else {
                return false; //dont do anything if user have taken all sessions
            }
        } else {
            return incrementCounters(cookie_obj); // first time user ,increment counter
        }
    }

    var incrementCounters = function(cookie_obj) {
        var obj = {
            page_count: 1,
            session_count: 1,
            adfreesession_count: 0,
        };
        var objFromCookie = {};
        if (!cookie_obj) {
            obj.timestamp = new Date().getTime();
            sessionStorage.setItem(config.cookie, 1);

        } else {
            objFromCookie.timestamp = cookie_obj.timestamp;
            objFromCookie.session_count = Number(cookie_obj.session_count);
            objFromCookie.adfreesession_count = Number(cookie_obj.adfreesession_count);
            if (sessionStorage.getItem(config.cookie) === null) { //first time hit in session
                sessionStorage.setItem(config.cookie, 1);
                objFromCookie.session_count += 1;

            } else { // not first time hit , increase no of pages
                objFromCookie.page_count = Number(cookie_obj.page_count) + 1;
            }
        }

        Object.assign(obj, objFromCookie);
        localStorage.setItem(config.cookie, JSON.stringify(obj));
        return {
            page_count: obj.page_count,
            session_count: obj.session_count
        }
    }
    var bindEvents = function() {
        $(config.selector).on('click', '.close_btn', function() {
            fireGAEvent('defaultadfree_Dismiss_close icon', 'ps-' + config.prc+"_"+location.href);
            $(config.selector).fadeOut("fast");
            window.location.reload(true);
        })
        $(config.selector).on('click', '.plus_btn', function(e) {
            e.preventDefault();
            fireGAEvent('defaultadfree_Dismiss_i like ads', 'ps-' + config.prc+"_"+location.href);
            $(config.selector).fadeOut("fast");
            window.location.reload(true);
        });
        $(config.selector).on('click', '[data-cta]', function(e) {
            var cta = $(this).attr("data-cta");
            fireGAEvent('defaultadfree_CTA_' + cta, 'ps-' + config.prc+"_"+location.href);
        })
    }
    var resetCounters = function() {
        var cookie_obj = JSON.parse(localStorage.getItem(config.cookie));
        var adfreesession_count = Number(cookie_obj && cookie_obj.adfreesession_count) + 1;
        var timestamp = cookie_obj.timestamp;
        localStorage.setItem(config.cookie, JSON.stringify({
            page_count: 0,
            session_count: 0,
            adfreesession_count: adfreesession_count,
            timestamp: timestamp
        }));
        sessionStorage.removeItem(config.sessionCookie)

    }

    var registerwithpopup = function() {
        if (window.TimesApps && TimesApps.PopUpManager) {
            popup_callbacks = TimesApps.PopUpManager.registerPopup(config.popupmanager, freeSessionLoyalUsers.showpopup);
            popup_callbacks && popup_callbacks.onReadyCallback(1);
        }
    }

    var isElegibletostart = function(cb) {
        if (typeof toiprops != "undefined" && toiprops.adFreeLayerSections == 1 && (config.prc == 0 || config.prc == -1) && !config.pagesExc.includes(toiprops._Tmpl_pg)) {
            return true;
        }
        return false;
    }

    var isSessionStorageSupported = function() {
        var storage = window.sessionStorage;
        try {
            storage.setItem('test', 'test');
            storage.removeItem('test');
            return true;
        } catch (e) {
            return false;
        }
    }

    var init = function() {
        if (popupToBeShown) {
            setTimeout(registerwithpopup, 0);
        }
    }
    require(['jquery', 'tiljs/event'], function($, event) {
        event.subscribe("user.status", function(user) {
            if (user) {
                config.prc = getPrcCookieValue();
            } else {
                config.prc = -1;
            }
            if (!userStatusChanged && isElegibletostart()) {
                userStatusChanged=true;
              //  checkConditionsForPopup(showpopup);
            }
            
            // if(tpwidget.ready){
            //        // console.log('subscribeLoggedInStatus > tpwidget');
            //         tpwidget.userstatusActions(user);    
            //     }
            //     else{
            //         tpwidget.userstatusActionsCallback = tpwidget.userstatusActions.bind(tpwidget, user);
            //     }


        })
    })
    require(['tiljs/event'], function(eventMod) {
        eventMod.subscribe('newArticleInView', function(dataObj) {
            //checkConditionsForPopup(showpopup);
        });
    })

    return {
        init: init,
        showpopup: showpopup
    };
})();
      
      
        if (!win.freeSessionLoyalUsers) {
            win.freeSessionLoyalUsers = freeSessionLoyalUsers;
        }
        
         
      function loadMp(){
        //condition for bot we will not show popup to bot
        if (window.location.href.indexOf('bot=1') > -1 || navigator.userAgent.toLowerCase().indexOf('googlebot') > -1){
            return false;
        }
        
        //   var iscountryDisabled = window.toiPlusConfig && window.toiPlusConfig.showToiPlusBlocker && toiprops && (toiprops._Tmpl_pg=="Prime-Home" || toiprops._Tmpl_pg=="Prime-HPListing" || toiprops._Tmpl_pg=="Prime-articleshow" || toiprops._Tmpl_pg=="Prime-videoshow" ||toiprops._Tmpl_pg=="Prime-photoshow");
        //   if( window.toiPlusConfig && window.toiPlusConfig.showToiPlusBlocker && window.location.href.indexOf('toi-plus') !== -1){
        //       return false;
        //   }
        // var prc = getPrcCookieValue();
        // if(iscountryDisabled ){
        //     nativePayment.makereq('/native_popup.cms?type=regionUnavailable&pagename=he').then(function(data){nativePayment.bindEventsonScreen(data)});
        //     window.body_scroll_pos = $(window).scrollTop(); 
        //     $('html').css('overflow-y', 'hidden');
        //     if(toiprops._Tmpl_pg=="Prime-videoshow"){
        //         createFakePlayer();
        //     }
        //     return false;
        // }
         return window.location.href.indexOf('frmapp=yes') === -1;
    }
    
    
    
    
    function createFakePlayer(){
         //console.log('fake player Activated');
         if($('[data-plugin="inlinevideo"]').length>0){
               var posterImage = $('[data-plugin="inlinevideo"]') && $('[data-plugin="inlinevideo"]').attr('data-posterurl')!='' ? $('[data-plugin="inlinevideo"]').attr('data-posterurl'):'';
               var fakeplayerHTML = '<div class="fakeplayer"><img src="'+posterImage+'" width="100%" class="poster"><span class="videoshow_sprite play-icon"></span></div>';
               
              $('[data-plugin="inlinevideo"]').html(fakeplayerHTML);
         }
        
    }
    
    
    
    
    
       
        var MeteredWall = function() {
                    var config = {
                        apiKey: 'V5yOOBuJXVoIONlA-Bszqc',
                        channel: 'toi',
                        recordUserReadsAPI: 'https://pauth.indiatimes.com/prime-auth/meter/recordUserReads',
                        readcountAPI: 'https://pauth.indiatimes.com/prime-auth/meter/fetchReadCount',
                        readCountUpdateAPI: 'https://pauth.indiatimes.com/prime-auth/meter/fetchUpdateReadCount',
                        deviceId: undefined,
                        meteredWallHtmlURL: '/mp_text.cms',
                        primeshowjs: '/primeshowjs/minify-1,version-118.cms',
                        apiResponse: undefined,
                        free_articles_not_loggedin: 2,
                        free_articles_loggedin: 2,
                        current_article: 1,
                        cookie_firstvisit: 'mp_firstvisit',
                        cookie_hidebottomnudge:'mp_hide_bottom_nudge',
                        days_hide_bottomnudge:2,
                        oldflow: false,
                        userstatus: false,
                        selector_topband: '[data-prime="meteredPaywall"] .top_band',
                        selector_bottomband: '[data-prime="meteredPaywall"] .bottom_band',
                        selector_blocker: '[data-prime="meteredPaywall"] .blockerContainer',
                        selector_payperstory: '[data-prime="login-payperstory"]',
                        selector_blockerReconfirm: '[data-prime="meteredPaywall"] .carddismiss',
                        selector_blocker_content: '[data-prime="meteredPaywall"] .blockerContainer .blocker',
                        selector_bandcontainer: '[data-prime="meteredPaywall"] .bandContainer',
                        selector_inlineNudge: '[data-prime="inlineShowTopnudge"]',
                        ga_prc:'',
                        pageStatus: {
                            "band": {
                                "visible": "",
                                "type": "",
                                "bottombandCollapsed": true
                            },
                            "blockerVisible": false,
                            "dismisscardVisibe": false
                        },
                        mobile: {
                            "status": '',
                            'number': ''
                        },
                        event_type: {
                            'cta_impression': 'prime-login_blocker|View',
                            'cta_click': 'prime-login_blocker|cta',
                            'dismiss': 'prime-login_blocker|Dismiss',
                            'toiplus': 'prime-login_blocker|GotoTOIPlus',
                            'learn_more': 'prime-login_blocker|LearnMore',
                            'inline_cta_click': 'TOIPlus_newinlinewidget|Click-',
                            'fired': false,

                        }
                    }
                      
                    
                    
                    
                    // $(document).on('prime_free_trial_activated', function (event, data, eventType) { // since there is no free tril button now
                    //   lg("iniated after free trial activated")
                    //   if(constants.initiated_via_meterdpaywall==true){
                    //     require(["tiljs/apps/times/mobilelogin"], function(login) {
                    //         var user = login.getUser();
                    //         if (user){
                    //              setPrcForUser(meteredPaywallInit.bind(null, user));      
                    //         }
                    //     })
                    //  }
                    // });

                    var appendInitialCss=function(){
                        // console.log('meteredPaywallInit > appendInitialCss');
                    var sheet = document.createElement('style');
					sheet.innerHTML = '[data-prime="free-trial-top"],[data-prime="free-trial-top-button"],[data-prime="blocker-container"],[data-prime="inline-widget"],[data-prime="subscription-nudge"]{display:none!important}\n'
					+ '.showoldflow{display:block!important}\n'
					+ '.user-notloggedin{display:none!important}\n'
					document.head.appendChild(sheet);
                        
                    }
                    
                    
                     function isOldFLow() {
                        if (location.href.indexOf('frmapp=yes') > -1){
                            return true;
                        }
                        //condition for bot we will not show popup to bot
                        if (location.href.indexOf('bot=1') > -1 || navigator.userAgent.toLowerCase().indexOf('googlebot') > -1){
                            return true;
                        }
                        
                        var allowedPages =  ['primehome', 'primelist', 'primeshow'];
                        var pageName = $('#pageName').val();
                        if (allowedPages.indexOf(pageName) == -1){
                            return true;
                        }
                        
                        
                        
                        return false;
                    }
                    
                    
                    var meteredPaywallInit = function(user) {
                        
                       //console.log("inside meteredPaywallInit");
                        appendInitialCss();
                        
                        //testing
                        if (getParameterByName('newflow') && getParameterByName('newflow') == '1' || config.oldflow == false) {
                            config.oldflow = false;
                        }
                        if ((getParameterByName('oldflow') && getParameterByName('oldflow') == '1') || config.oldflow == true) {
                            config.oldflow = true;
                            showalloldwidgets();
                            return false;
                        }
                        //testing
                        
                        
                        
                        //console.log('config old', config.oldflow )
                        


                        require(["tiljs/cookie", "tiljs/event"], function(cookie, event) {
                             console.log("inside meteredPaywallInit > tiljs/cookie tiljs/event === " );
                            var prc = getPrcCookieValue();
                            //lg(prc);
                           // lg("testing------")
                            prc = !!user ? prc : 0;;
                            config.prc = prc;
                            if(user==null){config.ga_prc=-1;}else{config.ga_prc=prc}
                           // lg(config.ga_prc);
                          //  lg(config.prc);
                            var ticket = cookie.get("TicketId") || cookie.get("TicketId");
                            var ssoid = cookie.get("ssoid") || cookie.get("ssoId");
                            if (prc <= 1) {
                                //ShowMessageUsingReadCountAPI(user, prc, ssoid,ticket) //call fetchupdatelogic only for prc=0 and prc=1 
                                lg("meteredPaywallInit > show message using fetchcountapi");
                                checkGeAccessAndShowMessages(user, {}, prc, ssoid); //new change, dont use backend api
                            } else {
                                checkGeAccessAndShowMessages(user, {}, prc, ssoid); //No need for readcountapi
                                lg("meteredPaywallInit > no need for api")
                            }
                            // checkifVerifiedMobile();
                        })
                    }
                    var lg = function(data) {
                        //console.log("*****", data);
                    }
                    var removeToastMessageforMetered=function()
                    {
                        var prc = primePaymentFlow.getPrcCookieValue();
                        if(sessionStorage.getItem('mp_nudgetype') && ((prc==1) || (sessionStorage.getItem('mp_nudgetype').indexOf("Popup")==-1))){
                            sessionStorage.removeItem('already_prime_user');
                         //   sessionStorage.removeItem('mp_nudgetype');
                            
                        }
                        
                    }
                   var updateGaafterLogin_fix = function() {
                        require(["tiljs/login"], function(login) {
                                var user = login.getUser();
                                if (user) {

                                    var prc = primePaymentFlow.getPrcCookieValue();
                                    var cookie_ga = login.getGa();
                                    if (cookie_ga != "") {
                                        var arr = cookie_ga.split("/");
                                        if (arr.length == 3) {
                                            arr.shift()
                                            arr.unshift("PS-" + prc);
                                            login.setGa(arr.join("/"));
                                            
                                            if (parseInt(sessionStorage.getItem('meteredLoginSuccess'), 10) === 1) {
                                                    login.fireGAEventMetered('Login_screen_login_success', 'login_Success' + '/' + login.getGa())
                                                    sessionStorage.removeItem('meteredLoginSuccess');
                                                }
                                            }
                                        }
                                    }
                                })
                        }
                    var setDeviceIdCookie = function(cookie, util) {
                        var cookie_deviceid = cookie.get("mdeviceid");

                        if (!cookie_deviceid) {
                            var domain = util.getDomainOnly();
                            setTimeout(function() {
                                var options = {
                                    excludes: {
                                        touchSupport: true,
                                        enumerateDevices: true,
                                        userAgent: false
                                    }
                                };
                                Fingerprint2.getV18(options, function(fingerPrintKey, components) {
                                    //  var event = new CustomEvent('FINGERPRINT_STATUS', { detail: fingerPrintKey});
                                    // window.dispatchEvent(event);
                                    config.deviceId = fingerPrintKey;
                                    cookie.set("mdeviceid", config.deviceId, 1, "/", domain);
                                })
                            }, 200);
                        } else {
                            config.deviceId = cookie_deviceid;
                        }
                    }
                    var prime_pagetype = function() {
                        var pagetype = constants.listOrShow.indexOf(toiprops._Tmpl_pg)
                        if (pagetype == 0) {
                            return "home";
                        } else if (pagetype == 1) {
                            return "show";
                        } else if (pagetype == 2) {
                            return "list";
                        } else if (pagetype == 3) {
                             return "show";
                        } else if (pagetype == 4) {
                            return "show";
                        } else if (pagetype == 5) {
                            return "show";
                        } else if (pagetype == 6) {
                            return "show";
                        }
                    }
                    var prime_pageTemplateName = function(){
                        var pagetype = constants.listOrShow.indexOf(toiprops._Tmpl_pg);
                        if(pagetype == 3){
                            return "storyBlockerNewPaywall"
                        }else if (pagetype == 4) {
                            return "storyBlockerNewPaywall";
                        }
                    }
                    var showalloldwidgets = function() { //for old users who are free actie need to show inline widgets
                       // console.log('showalloldwidgets',showalloldwidgets)
                        $('[data-prime="free-trial-top"],[data-prime="free-trial-top-button"],[data-prime="blocker-container"],[data-prime="inline-widget"],[data-prime="subscription-nudge"]').addClass('showoldflow')
                    }
                    var recordUserReads = function() {
                        var getRequestHeader = function(request) {
                            request.setRequestHeader("apiKey", config.apiKey);
                            request.setRequestHeader("mdeviceid", config.deviceId);
                        };
                        $.ajax({
                                url: config.recordUserReadsAPI,
                                contentType: "application/json",
                                type: "POST",
                                beforeSend: getRequestHeader,
                                data: JSON.stringify({
                                    "channel": config.channel,
                                    "msid": toiprops.msid
                                })
                            })
                            .done(function(response) {
                                lg("---recordusercount----");
                                lg(response)
                                lg("---recordusercount----");
                            })
                    }
                    var fetchReadCount = function(user) {
                        return new Promise(function(resolve, reject) {
                            var headers_data = {
                                "apiKey": config.apiKey,
                                "mdeviceid": config.deviceId
                            }
                            if (user) {
                                headers_data = Object.assign(headers_data, {
                                    ssoid: user.getUid()
                                })
                            }
                            var url = config.readcountAPI + "?channel=" + config.channel;
                            $.ajax({
                                url: url,
                                headers: headers_data,
                                data: {
                                    channel: config.channel,
                                    rspBody: "true"
                                },
                                type: "GET",
                                success: function(data) {
                                    resolve(data);
                                }

                            });
                        })
                    }
                    var fetchOrUpdateReadCount = function(user, prc, flagforupdatealso, page,ticket) {
                        lg("test")
                        lg(user);
                        lg(ticket)
                        
                        return new Promise(function(resolve, reject) {
                            if (flagforupdatealso == 1) { //passed 1 for show page ,need to upate read count
                                var headers_data = {
                                    "apiKey": config.apiKey,
                                    "mdeviceid": config.deviceId
                                }
                                // if (prc == 1) {
                                    if (user) {
                                        headers_data = Object.assign(headers_data, {
                                            ssoid: user.getUid(),
                                            TicketId:ticket  
                                        })
                                    }
                                // }
                                var url = config.readCountUpdateAPI + "?channel=" + config.channel;
                                $.ajax({
                                    url: url,
                                    headers: headers_data,
                                    data: {
                                        channel: config.channel,
                                        rspBody: "true",
                                        msid: toiprops.msid
                                    },
                                    type: "POST",
                                    success: function(data) {
                                        // resolve(data);
                                        fetchOrUpdateReadCount(user, prc, 0, page).then(function(data) {
                                            resolve(data)
                                        })
                                    }
                                });
                            } else {
                                var headers_data = {
                                    "apiKey": config.apiKey,
                                    "mdeviceid": config.deviceId
                                }
                                // if (prc == 1) {
                                    if (user) {
                                        headers_data = Object.assign(headers_data, {
                                            ssoid: user.getUid(),
                                            TicketId:ticket
                                        })
                                    }
                                // }
                                var params = {
                                    channel: config.channel,
                                    rspBody: "true"
                                }
                                 if (location.href.indexOf('status=500') > -1){
                                   params.status = 500;
                                 }
                                 if (location.href.indexOf('timeout=10') > -1){
                                    params.timeout = 10;
                                  }
                                if (page == 'show') {
                                    params = Object.assign(params, {
                                        msid: toiprops.msid
                                    })
                                }
                                //var url = config.readcountAPI + "?channel=" + config.channel;
                                var url = config.readcountAPI;
                                $.ajax({
                                    url: url,
                                    headers: headers_data,
                                    data: params,
                                    type: "GET",
                                    success: function(data) {
                                        resolve(data);
                                    }
                                }).fail(function (msg) {
                                    //console.log("testing",msg)
                                 var response = {
                                        articleLimit: 2,
                                        isReadAllowed: false,
                                        planStatus: "NON_LOGGED_IN",
                                        readCount: 2,
                                        userStatus: "PAST_LOGIN_DETECTED"
                                     }
                                    resolve(response)
                                });
                            }
                        })
                    }
                    var getParameterByName = function(name, url) {
                        if (!url) url = window.location.href;
                        name = name.replace(/[\[\]]/g, '\\$&');
                        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
                            results = regex.exec(url);
                        if (!results) return null;
                        if (!results[2]) return '';
                        return decodeURIComponent(results[2].replace(/\+/g, ' '));
                    }
                    var ShowMessageUsingReadCountAPI = function(user, prc, ssoid,ticket) {
                        var countAPIObject = {
                            firsttime: false,
                            freearticleslimitreached: false,
                            loggedinfreearticlelimtreached: false
                        }
                        var page = prime_pagetype();
                        var flagforupdate = page == "show" ? 0 : 0; //only used in testing for updating read count
                        fetchOrUpdateReadCount(user, prc, flagforupdate, page,ticket)
                            .then(data, function(){
                                
                                
                               // console.log('fetchOrUpdateReadCount',fetchOrUpdateReadCount);
                                
                                //if(data.planStatus=="FREE_TRIAL_OLD"){config.oldflow=true;showalloldwidgets(); return false;} 
                                if (data.isReadAllowed == true && page == 'show') {
                                    noDeviceButReadAllowed()
                                } // check if page is not blocked

                                // testing
                                if (getParameterByName('oldflow') && getParameterByName('oldflow') == '1') {
                                    config.oldflow = true;
                                    showalloldwidgets();
                                    return false;
                                }

                                countAPIObject.userstatus = data.userStatus;
                                countAPIObject.currentarticle = data.readCount;

                                //  if(page=='show' && data.msids.includes(toiprops.msid) && data.userStatus=="DUPLICATE_ARTICLE"){lg("Already viewed");return false;} //already viewed show pages


                                if (data.planStatus == "FREE_TRIAL") {
                                    config.free_articles_loggedin = data.articleLimit;
                                }
                                if (data.planStatus == "NON_LOGGED_IN") {
                                    config.free_articles_not_loggedin = data.articleLimit
                                }

                                //first time user
                                if (prc == 0 || prc == 1) {

                                    if ((page == 'home' || page == 'list') && (data.readCount == 0)) { //continue showing congrats message for list pages
                                        countAPIObject.firsttime = true;

                                    }

                                    if ((page == 'show') && (data.readCount == 0 || data.readCount == 1)) {
                                        if (localStorage.getItem(config.cookie_firstvisit) === null) { //show congrats message only once for show pages
                                            countAPIObject.firsttime = true;
                                            localStorage.setItem(config.cookie_firstvisit, JSON.stringify({
                                                value: "1",
                                                timestamp: new Date().getTime()
                                            }));
                                        } else {
                                            //todo read count is still 0 and cookies is also set
                                            if (data.readCount == 0) {
                                                return false;
                                            } //return only in case of liting page beacause show page we will show 1/2
                                        }
                                    }
                                }

                                if (prc == 0 && (data.readCount >= config.free_articles_not_loggedin && data.isReadAllowed == false)) {
                                    countAPIObject.freearticleslimitreached = true
                                }
                                if (prc == 1 && (data.readCount >= config.free_articles_loggedin) && (data.isReadAllowed == false)) {
                                    countAPIObject.loggedinfreearticlelimtreached = true
                                }

                                // for testing
                                if (getParameterByName('prc')) {
                                    prc = global_prc
                                }
                                if (getParameterByName('readcount')) {
                                    countAPIObject.currentarticle = global_readcount;
                                }
                                if (getParameterByName('freearticlesloggedin') && getParameterByName('freearticlesloggedin') == 0) {
                                    config.free_articles_loggedin = 0;
                                }
                                if (getParameterByName('freearticles') && getParameterByName('freearticles') == 0) {
                                    config.free_articles_not_loggedin = 0;
                                }
                                if (getParameterByName('readcount') && getParameterByName('readcount') == 2) {
                                    countAPIObject.freearticleslimitreached = true
                                }
                                if (getParameterByName('readcount') && getParameterByName('readcount') == 5) {
                                    countAPIObject.loggedinfreearticlelimtreached = true
                                }
                                if (getParameterByName('nodeviceid') && getParameterByName('nodeviceid') == '1' && page == 'show') {
                                    noDeviceButReadAllowed();
                                    return false;
                                }
                                //if(getParameterByName('primetemplate') && getParameterByName('primetemplate')=='1'){return false;}
                               // console.log("ShowMessageUsingReadCountAPI > ShowMessages");
                                checkGeAccessAndShowMessages(user, countAPIObject, prc, ssoid)

                            })
                            .catch(error => {
                                lg(error)
                            })

                    }
                    var noDeviceButReadAllowed = function() {
                        var _primeid = $("body").attr("primeid");
                        if ($('arttextxml .section1.prime-bottom-blur').length == 1 && _primeid != '500') {
                            $('arttextxml .section1.prime-bottom-blur').addClass("showloader");
                            $.get("/mp_primeshow_ajax/" + toiprops.msid + ".cms", function(data) {
                                $(".articlepage arttextxml").html(data);
                                $("head").append($("<script type='text/javascript' src='" + config.primeshowjs + "'>"));
                            })
                        }
                    }
                    var loggedinEmail = function(user) {
                        if (user) {
                            return true;
                        } else {
                            return false;
                        }
                    }
                    var checkifVerifiedMobile = function(callback) {
                        var jssoObj = setAndGetJssoCrosswalkObj();
                        jssoObj.getUserDetails(function(res) {
                            lg(res.data);
                            if (res.data.mobileData.Verified) {
                                config.mobile.status = "verified";
                                config.mobile.number = res.data.mobileData.Verified.mobile;
                                lg("verifiedasdas")

                            } else {
                                config.mobile.status = "";
                                config.mobile.number = "";
                                lg("notverifiedasdas")
                            }
                            lg("mobile status")
                            lg(config.mobile)
                            if (typeof callback === 'function') {
                                callback();
                            }
                        });
                    }
                    
                    var staticStoryBlockerNlInview = function(){
                        require(["tiljs/ui", "tiljs/event"], function(ui, event) {
                            event.subscribe("window.scroll", function () {
                                 if ($('.staticBlocker').length && ui.inView('.storyblockerwrapper', true) && !config.event_type.fired) {
                                        if ($("[data-prime='meteredPaywall']").length == 1) {
                                            var prcValue = getPrcCookieValue();
                                            require(["tiljs/login"], function(login) {
                                                var user = login.getUser();
                                                if (user){
                                                    ga('send', 'event', 'web-toiplusnl_'+ window._nltype, 'prime-login_blocker|View', 'PS-'+prcValue);
                                                }
                                                else{
                                                    ga('send', 'event', 'web-toiplusnl_'+ window._nltype, 'prime-login_blocker|View', 'PS--1');
                                                }
                                            });
                                             config.event_type.fired = true;
                                             return;
                                      }
                                }
                            });
                        });
                    }
                    
                    var ShowMessages = function(user, countAPIObject, prc, ssoid) {
                        
                        
                        //console.log("ShowMessages", user,countAPIObject,prc,ssoid);
                        
                        
                        var page = prime_pagetype();
                        var name = user && user.getFirstName();
                        
                        var mobile = user && typeof user.getMobileNumber === 'function' && user.getMobileNumber();
                        var _emailloggedin = loggedinEmail(user);
                        var _primeid = $("body").attr("primeid");
                        var _expirydate=sessionStorage.getItem("expirydate");
                        var _inGracePeriod = sessionStorage.getItem("inGracePeriod");
                        var date=new Date();
                        var expdate=new Date(_expirydate);
                        var diffTime = Math.abs(expdate - date);
                        var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); 
                        var days= diffDays;
                        var renderTmplName = prime_pageTemplateName();
 
                        var dataToBePassed = {
                            ssoid: ssoid,
                            prc: prc,
                            name: name,
                            emailloggedin: _emailloggedin,
                            freearticlesnotloggedin: config.free_articles_not_loggedin,
                            freearticlesloggedin: config.free_articles_loggedin,
                            tponprimetrial: timesPointsOnFreeTrialActivation,
                            tponpaidsubcription: timesPointsOnPaidSubscription,
                            pagetype: page,
                            primeid: _primeid,
                            expirydate: _expirydate,
                            days:days,
                            days_left:days,
                            isPaymentBlocked:window.plsObj.isAllowedReadAccessCountries,
                            inGracePeriod:_inGracePeriod,
                            renderTmplName: renderTmplName,
                            isUserLoggedIn: ssoid? 'true' : 'false',
                        };
                        const params = getUrlParams();
                         if(params && (params.utm_source === 'newsshowcase' || params.utm_source === 'GE_Access') 
                            && sessionStorage && sessionStorage.getItem("GE_Access_msids")!='' 
                            && JSON.parse(sessionStorage.getItem("GE_Access_msids")).data
                            && JSON.parse(sessionStorage.getItem("GE_Access_msids")).data!=''
                            && JSON.parse(sessionStorage.getItem("GE_Access_msids")).data.includes(window.msid)){
                                
                                dataToBePassed.rendertmpl="ge-access";
                            
                        }else{
                            if(isPayperWidgetActive){dataToBePassed.rendertmpl="payperstory-new";}
                        }
                        window.dispatchEvent( new Event('click') );
                        if(window.plsObj.isAllowedReadAccessCountries){dataToBePassed.isPaymentBlocked=true;}
                        var getRegion = (window.geoinfo && window.geoinfo.region_code) || comgetCookie('geo_region') || 'DL';
                        if(getRegion === 'CA') {
                            dataToBePassed.getRegion=true;
                        }
                        if(sessionStorage.getItem("credBalance")){
                            var credlimitCount = sessionStorage.getItem("credBalance");
                            if(parseInt(credlimitCount) === 0) {
                                dataToBePassed.credlimit=true;
                                dataToBePassed.credDate=sessionStorage.getItem("credDate");
                            }
                        }
                        if(typeof tn != 'undefined' && (tn == 'toiplusarticleshow' || tn=='toiplusphotostory' || tn=='toiplusvideoshow' || tn == 'newslettertoi')){
                            dataToBePassed.isUtilLoaded = true;
                        }
                        if(typeof tnSubtype != 'undefined' && tnSubtype != ''){
                            dataToBePassed.istnSubType = true;
                        }
                        if(prc==1 && page=="show")
                        {
                            return false;
                        }
                        if (countAPIObject) {
                            dataToBePassed = Object.assign(dataToBePassed, countAPIObject)
                        }
                        if(prc==5)  { 
                            if(existsLocalStorge(config.cookie_hidebottomnudge)){
                                dataToBePassed = Object.assign(dataToBePassed, {hidebottomnudge:1})
                        }} 
                        //dataToBePassed.firsttime=true; //condition for first time
                        //dataToBePassed.emailloggedin=true;
                        console.log('window.abExperiment', window.abExperiment);
                        nativePayment.makereq(nativePayment.config_native.toiplus_json, 1).then(function(data) {
                            if (data && data.gstForm && data.gstForm.startGstFlow) {
                                sessionStorage.setItem('showGstfromNode', data.gstForm.startGstFlow);
                            }
                            if (data?.unifiedNodes?.preExpiry?.renewNudgePeriod) {
                              sessionStorage.setItem('renewNudgePeriod',data.unifiedNodes.preExpiry.renewNudgePeriod);
                            } else {
                              sessionStorage.setItem('renewNudgePeriod', 30);
                            }
                            if (data?.unifiedNodes?.preExpiry?.renewNudgeCloseDuration) {
                              sessionStorage.setItem('renewNudgeCloseDuration',data.unifiedNodes.preExpiry.renewNudgeCloseDuration);
                            } else {
                              sessionStorage.setItem('renewNudgeCloseDuration', 24);
                            }
                        var defaultCase = (data && data.tpArticlePayPerBlockernew && data.tpArticlePayPerBlockernew.showPlanSequence && data.tpArticlePayPerBlockernew.showPlanSequence.length >0) ? data.tpArticlePayPerBlockernew.showPlanSequence : '[defaultplan]';
                        
                        var experimentValue = typeof window !== 'undefined' && typeof window.abExperiment !== 'undefined' && window.abExperiment;
                        function experimentBasedValue() {
                            switch (experimentValue) {
                                case '0':
                                    return '[defaultplan,credpayoption,payperstory]';
                                case '1':
                                    return '[defaultplan]';
                                case '2':
                                    return '[defaultplan,payperstory]';
                                case '3':
                                    return '[defaultplan,credpayoption]';
                                default:
                                    return typeof defaultCase!=='string' ? '['+defaultCase?.join(',')+']' : '[defaultplan]';
                            }
                        };
                        
                        var checkForCredMagic = function(){
                            var urlSearchParams = new URLSearchParams(window.location.search);
                            var params = Object.fromEntries(urlSearchParams.entries());
                            return Object.keys(params).length !== 0 && params.credMagic === '1';
                        }
                    
                        var checkExperimentWithSequence = function(){
                            var experimentArray = experimentBasedValue();
                            if(experimentArray && experimentArray.indexOf(']') > -1 && experimentArray.indexOf('[') > -1){
                                experimentArray = experimentArray.split("[")[1]?.split(']')[0]?.split(",");
                            }
                            if(Array.isArray(experimentArray) && experimentArray.length > 0){
                                return experimentArray.filter(function(val){
                                    if (defaultCase.indexOf(val) > -1) {
                                        return true;
                                    }
                                    return false;
                                });
                            }
                            return [];
                        }
                        
                        var plansString;
                        if(checkForCredMagic()){
                            plansString = '[defaultplan,credpayoption,payperstory]';
                        }else{
                            plansString = "["+checkExperimentWithSequence().toString()+"]";
                        }
                        if($('.staticBlocker').length){
                            staticStoryBlockerNlInview();
                            return;
                        }
                        dataToBePassed.plansString = plansString;

                        lg("--data passed to metered text--");
                        lg(dataToBePassed);
                        lg(config.meteredWallHtmlURL)
                        lg("--data passed to metered text--");
                        $.get(config.meteredWallHtmlURL, dataToBePassed, function(data) {

                            var $container = $(constants.selector_mp);
                            if (data != "") {
                         //       $container.html(data);
                                try{
                                   $(function(){
                                     if(typeof _ain !='undefined' && _ain.hasOwnProperty('trackauto')&& !_ain.trackauto && tn=='toiplusarticleshow'){
                                        delete _ain.trackauto;
                                        if(typeof _ain.track==='function'){
                                          _ain.track();
                                        }
                                       // console.log('smartOcto-NonBlocker-track')  
                                     }
                                    
                                  });
                                }catch(e){
                                    console.log('e',e);
                                }
                            }
                            primePaymentFlow.renderJson(data,'script_mp',$container,dataToBePassed,nativePayment.config_native.toiplus_json).then(function(){
                             
                             var $container = $(constants.selector_mp);
                             $container.removeClass("blocker-loader");
                             $container.addClass("loaded");
                             if(window.plsObj.isToiPPSUser || window.plsObj.isCredPPSUser){$container.html("");return false;}
                             
                            var $asTopNudge = $(constants.selector_inlineShowTopnudge);    
                                //console.log('showBlockerScreen > constants.primeHooksTextAPIURL > Articleshow Sticky nudge removed > 4');
                                
                              //  openPlanPagefrmApp($container);
                              //  openPlanPagefrmApp($asTopNudge);
                                 
                                require(["tiljs/ui", "tiljs/event"], function(ui, event) {
                                     if (ui.inView($container, true) && $asTopNudge.length > 0) {
                                       //  console.log('showBlockerScreen > constants.primeHooksTextAPIURL > Articleshow Sticky nudge removed ')
                                         $asTopNudge.remove();
                                     }
                                    event.subscribe("window.scroll", function () {
                                        if (ui.inView($container, true) && $asTopNudge.length > 0) {
                                         //    console.log('showBlockerScreen > constants.primeHooksTextAPIURL > Articleshow Sticky nudge removed  after scroll ')
                                             $asTopNudge.remove();
                                         }
                                    });
                                });
                                
                                
                                
                            if (checkBlockeronpage(_primeid)) {
                                disableBodyScroll();
                            } else {
                                enableBodyScroll()
                            }
                            
                            checkinlineWidgetOnPage(_primeid)

                            if (checkBandonpage()) {
                                showTopOrBottomBand()
                            }

                            bindEvents();
                            nativePayment.bindEvents();
                            config.userstatus = false;
                            })
                     
                           
                       })
                    });
                           
                      
                    }
                    var checkGeAccessAndShowMessages = function(user, countAPIObject, prc, ssoid){
                        const params = getUrlParams();
                        if(params && (params.utm_source === 'newsshowcase' || params.utm_source === 'GE_Access')){
                            getAllowedMsids().then(function(allowedMsids){
                                ShowMessages(user, countAPIObject, prc, ssoid);
                            });
                        }else{
                            ShowMessages(user, countAPIObject, prc, ssoid)
                        }
                    }
                    var checkinviewornot = function(mpContainer, mpInnerContainer) {
                        if ($(mpContainer).isInViewport()) {
                            if (!$(mpInnerContainer).hasClass("showingtop")) {
                                $(mpInnerContainer).fadeOut("slow", function() {

                                    $(mpInnerContainer).removeClass("showingbottom").addClass("showingtop").find(".unlock_access").addClass("collapsed_band").removeClass("expanded_band sticky_bottom sticky_bottom_toggle");
                                    $(mpInnerContainer).fadeIn('slow')
                                })


                                lg("showing at top");
                                config.pageStatus.band.type = "top";
                                if($(config.selector_topband).attr("view-event")!="fired") {
                                    fireGAEvent(config.event_type.cta_impression, 'PS-'+config.ga_prc+'/'+$(config.selector_topband).attr("data-label") + getCTA(config.selector_topband),1);
                                    
                                    $(config.selector_topband).attr("view-event","fired")
                                }
                            }
                        } else {
                            if (!$(mpInnerContainer).hasClass("showingbottom")) {
                                $(mpInnerContainer).hide().removeClass("showingtop").addClass("showingbottom").find(".unlock_access").addClass("sticky_bottom sticky_bottom_toggle");
                                $(mpInnerContainer).fadeIn("slow")
                                lg("showing at bottom");
                                config.pageStatus.band.type = "bottom";
                                setTimeout(function() {
                                    footerHeight()
                                }, 100)
                               if($(config.selector_bottomband).attr("view-event")!="fired") {
                                    fireGAEvent(config.event_type.cta_impression, 'PS-'+config.ga_prc+'/'+$(config.selector_bottomband).attr("data-label") + getCTA(config.selector_bottomband),1);
                                    
                                    $(config.selector_bottomband).attr("view-event","fired")
                                }
                            }
                        }
                    }
                    
                    var blockerInViewHandler = function() {
                        require(["tiljs/ui"], function(ui) {
                            if (ui.inView('.choice1', true) && !config.event_type.fired) {
                                    if ($("[data-prime='blocker-container'][data-sendga='1']").length == 1) {
                                        var prcValue = getPrcCookieValue();
                                        require(["tiljs/login"], function(login) {
                                            var user = login.getUser();
                                            if (user){
                                                fireGAEvent(config.event_type.cta_impression, 'PS-'+prcValue,1);
                                            }
                                            else{
                                                fireGAEvent(config.event_type.cta_impression, 'PS--1',1);
                                            }
                                        });
                                    //   if($(config.selector_payperstory)){
                                    //       fireGAEvent(config.event_type.cta_impression, ('PS-'+config.ga_prc+'/NudgeType-Bottom/CTA-PERSTORY'),1);
                                    //   }
                                         config.event_type.fired = true;
                                         return;
                                   }
                            }
                            if (ui.inView('.choice2', true) && !config.event_type.fired2) {
                                    if ($("[data-prime='blocker-container'][data-sendga='1']").length == 1) {
                                        var prcValue = getPrcCookieValue();
                                        require(["tiljs/login"], function(login) {
                                            var user = login.getUser();
                                            if (user){
                                                fireGAEvent('prime-login_blocker_Radio|View', 'PS-'+prcValue,1);
                                            }
                                            else{
                                                fireGAEvent('prime-login_blocker_Radio|View', 'PS--1',1);
                                            }
                                            nativePayment.fireGA4({action: 'view'});
                                            var grxParams = [
                                              'subscriptions_blocker', {
                                                client_source: 'cdp',
                                                event_nature: 'impression',
                                                event_category: 'subscription',
                                                cta_txt: '',
                                                // event_section: 'storypage_paywall_blocker',
                                                // event_sub_section: '',
                                                // landing_l1: 'plan_page',
                                                // landing_l2: '',
                                                // landing_l3: '',
                                                // landing_page_template: 'plan_page',
                                                // landing_url: nativePayment.redirectToNewPlanpage(
                                                //   nativePayment.newPlanpageMetaData(window.unifiedNodes['prc' + prcValue]),
                                                // ),
                                                // position: 3,
                                              },
                                            ];
                                            if (typeof window?.grx_module?.hitPaywallEventReact === 'function') {
                                              window.grx_module.hitPaywallEventReact(...grxParams);
                                            } else {
                                              window.Times.setGRXDataInLocalStorage('GRX_QUEUE_EVENT', {
                                                eventName: grxParams[0],
                                                payload: grxParams[1],
                                              });
                                            }
                                            
                                            
                                            var dataToBepassed = {
                                                accessiblefeatures: window.userPrcData?.accessibleFeatures,
                                                msid: window.msid,
                                              }
                                            
                                            // nativePayment.collectGaMap({
                                            //   paywall_viewed: {
                                            //     category: 'Subscription Flow TOI',
                                            //     action: 'Impression',
                                            //     label: `Ps-${!(getCookie('ssoid') || getCookie('ssoId')) ? -1 : prcValue}`,
                                            //     doNotWait: !(getCookie('ssoid') || getCookie('ssoId')),
                                            //     otherParams: dataToBepassed,
                                            //   },
                                            // });
                                            // nativePayment.fireCollectedGa(window.userPrcData);
                                        });
                                    //   if($(config.selector_payperstory)){
                                    //       fireGAEvent(config.event_type.cta_impression, ('PS-'+config.ga_prc+'/NudgeType-Bottom/CTA-PERSTORY'),1);
                                    //   }
                                         config.event_type.fired2 = true;
                                         return;
                                   }
                            }
                            if (ui.inView('.login_only_blocker', true) && !config.event_type.fired3) {
                                    if ($("[data-prime='blocker-container'][data-sendga='1']").length == 1) {
                                        var prcValue = getPrcCookieValue();
                                        require(["tiljs/login"], function(login) {
                                            var user = login.getUser();
                                            if (user){
                                                ga('send', 'event', 'web-newprimeshow', 'blocked_prime-login_blocker|View', 'PS-'+prcValue);
                                            }
                                            else{
                                                ga('send', 'event', 'web-newprimeshow', 'blocked_prime-login_blocker|View', 'PS--1');
                                            }
                                        });
                                    //   if($(config.selector_payperstory)){
                                    //       fireGAEvent(config.event_type.cta_impression, ('PS-'+config.ga_prc+'/NudgeType-Bottom/CTA-PERSTORY'),1);
                                    //   }
                                         config.event_type.fired3 = true;
                                         return;
                                  }
                            }
                        });
                    }

                    var checkBlockeronpage = function(_primeid) {
                        if ($(config.selector_blocker).length > 0 && _primeid != 500) {
                            if (!config.event_type.fired) {
                                $(window).on('DOMContentLoaded load resize scroll', blockerInViewHandler);
                                //fireGAEvent(config.event_type.cta_impression, ('PS-'+config.ga_prc+'/'+$(config.selector_blocker).attr("data-label") + getCTA(config.selector_blocker_content)),1);
                            };
                            config.pageStatus.blockerVisible = true;
                            return true;
                        } else {
                            return false;
                        }
                    }
                    
                      var checkinlineWidgetOnPage = function (_primeid) {
                        if ($(config.selector_inlineNudge).length > 0 && _primeid != 500) {
                            fireGAEvent("TOIPlus_newinlinewidget|View", ('PS-' + config.ga_prc));
                             return true;
                        }
                          
                      }
                    var footerHeight = function(height) {
                        var $footer = $('footer'),height=0;
                        var $container = $(config.selector_bottomband);
                        if($container.is(":visible")){
                        height=$container.height()
                        }
                        $footer.css('padding-bottom', height + 25);
                    }
                    var checkBandonpage = function() {
                        if ($(config.selector_bandcontainer).length > 0) {
                            config.pageStatus.band.visible = true;
                            setTimeout(function() {
                                footerHeight()
                            }, 1000)

                            return true;
                        } else {
                            return false;
                        }
                    }
                    var disableBodyScroll = function() {
                        // window.body_scroll_pos = $(window).scrollTop(); // write page scroll position in a global variable
                        //$('body').css('overflow-y', 'hidden');
                    }
                    var enableBodyScroll = function() {
                        $('body').css('overflow-y', 'scroll');
                        // $(window).scrollTop(window.body_scroll_pos); // restore page scroll position from the global variable
                    }
                    var showTopOrBottomBand = function() {
                        require(["tiljs/ui"], function(ui) {
                            var mpContainer = $(constants.selector_mp);
                            var mpInnerContainer = $(config.selector_bandcontainer);
                            checkinviewornot(mpContainer, mpInnerContainer);
                            require(["tiljs/ui", "tiljs/event"], function(ui, event) {
                                event.subscribe("window.scroll", function() {
                                    checkinviewornot(mpContainer, mpInnerContainer);
                                });
                            });
                        });
                    }
                    var existsLocalStorge = function(key) {
                        if (localStorage.getItem(key)) {
                            var obj = JSON.parse(localStorage.getItem(key));
                            //alert(obj.expires);alert(obj.timestamp);
                            //alert((Number(new Date().getTime()) - Number(obj.timestamp) > Number(0) * 60 * 60 * 24 * 1000 ))
                            if(obj && obj.timestamp && obj.expires){
                              if ((Number(new Date().getTime()) - Number(obj.timestamp) > Number(obj.expires) * 60 * 60 * 24 * 1000)) {
                                localStorage.removeItem(key);
                                return false
                              }
                              else
                              {
                                  return true;
                              }
                            }
                        }
                        return false;
                    }
                        
                    
                    var setLocalStorge = function(key, expires, val) {
                        var timestamp = (new Date()).getTime();
                        var obj = {
                            expires: expires,
                            timestamp: timestamp
                        }
                        if (val) {
                            Object.assign(obj, {
                                value: val
                            })
                        }

                        localStorage.setItem(key, JSON.stringify(obj));
                    }
                    
                    var bindEvents = function() {
                        $(".meteredPaywall .toggle_arrow a").on("click", function() {
                            $(".meteredPaywall .unlock_access").toggleClass("collapsed_band expanded_band");
                            setTimeout(function() {
                                footerHeight()
                            }, 100)
                            config.pageStatus.band.bottombandCollapsed = !config.pageStatus.band.bottombandCollapsed;
                        })

                        $(".meteredPaywall .unlock_access .close_btn").on("click", function() {
                            $(config.selector_bottomband).fadeOut("fast", function() {
                                
                                 var prcValue = getPrcCookieValue();
                                  if(prcValue==5){
                                      setLocalStorge(config.cookie_hidebottomnudge,config.days_hide_bottomnudge)
                                  }
                                  
                                setTimeout(function() {
                                    footerHeight()
                                }, 100)
                            });

                            fireGAEvent(config.event_type.dismiss, ga_cta_click(1, $(config.selector_bottomband)))
                        })

                        $(".meteredPaywall .common_blocker_box .content .close_btn").on("click", function() {
                            fireGAEvent(config.event_type.dismiss, ga_cta_click(1, $(config.selector_blocker_content)))
                            config.pageStatus.dismisscardVisibe = true;
                            $(".meteredPaywall .common_blocker_box .content").fadeOut("fast", function() {
                                $(".meteredPaywall .common_blocker_box .carddismiss").fadeIn("fast");
                                fireGAEvent(config.event_type.cta_impression, ga_cta_click(1, $(config.selector_blocker_content)),1)
                            });
                            
                        })

                        $(constants.selector_mp).on('click', '[data-prime="learn-more-mp"]', function(e) {
                            var $this = $(this);
                            var container = $(this).attr("data-container") == 'blocker' ? config.selector_blocker_content : config.selector_bottomband
                            fireGAEvent(config.event_type.learn_more, ga_cta_click(1, $(container)))
                            learnMoreHandler($this.data('redirecturi'), e);
                        });
                        $(constants.selector_mp).on('click', '.plus_btn', function(e) {
                            var $this = $(this);
                            var container = $(this).attr("data-container") == 'blocker' ? config.selector_blocker_content : config.selector_bottomband
                            fireGAEvent(config.event_type.toiplus, 'PS-' + config.ga_prc + '/NudgeType-PopupReconfirm/CTA-GotoTOIPlus')

                        });
                        $(constants.selector_mp).on('click', '[data-cta="subscribe now"]', function(e) {
                            var prcValue = getPrcCookieValue();
                            require(["tiljs/login"], function(login) {
                                var user = login.getUser();
                                if (user){
                                    fireGAEvent('prime-login_blocker|CTA','PS-'+prcValue );
                                }
                                else{
                                    fireGAEvent('prime-login_blocker|CTA','PS--1' );
                                }
                            });
                        })
                        $(constants.selector_mp).on('click', '[data-cta]', function(e) {
                            lg(config)
                            var gatobepassed = ga_cta_click(0, $(this));
                            // var prcValue = getPrcCookieValue();
                            // var GaCta = $(constants.selector_mp).attr('data-cta');
                            // if(GaCta == "pps-buy-now"){
                            // fireGAEvent('prime-login_blocker|CTA_PerStory','PS-'+prcValue );
                            // }
                            // else if(GaCta == "subscribe now"){
                            //     fireGAEvent('prime-login_blocker|CTA','PS-'+prcValue );
                            // }
                            require(["tiljs/login"], function(login) {
                                login.setGa(gatobepassed);
                            });

                        });
                        $(constants.selector_mp).on('click', '[data-val="inlineTopNudge"]', function(e) {
                            fireGAEvent(config.event_type.inline_cta_click + e.target.textContent , 'PS-' + config.ga_prc);
                        })
                        

                        $(constants.selector_mp).on('click', '[data-flow="metered-paywall"]', function(e) {
                            var data_flow = e.currentTarget.getAttribute('data-flow');
                            if (data_flow == "metered-paywall") {
                                constants.initiated_via_meterdpaywall = true
                            } else {
                                constants.initiated_via_meterdpaywall = false
                            }
                        });
                        
                        require(["tiljs/event"], function(event) {
                            
                            event.subscribe("window.scroll", throttleFunction(function () {
                                
                                if(!window.alreadyclickedclosepopup && !alreadyFiredGaStorypopover){
                                    
                                    nativePayment.fireGA4({action: 'view'});
                                    alreadyFiredGaStorypopover = true;
                                    setTimeout(function() {
                                        $("#story-blockemodal-popup").addClass("bottom_animate");
                                        $("body").addClass("show");
                                        }, 1000);
                                    
                                }
                            }, 1500));
                        });
                        
                        $('.storyBlockerNewPaywall').on('click', '.closebutton', function(e) {
                            e.stopPropagation();
                            $("#story-blockemodal-popup").removeClass("bottom_animate");
                            $("body").removeClass("show");
                            window.alreadyclickedclosepopup=true;
                            nativePayment.fireGA4({
                                action: 'click',
                                item_category3: 'paywall_bottomsheet_blocker_cta_cross',
                              })
                        });


                    }

                    var getCTA = function(container) {
                        var cta_arr = [];
                        $(container).find('[data-cta]').each(function(i, a) {
                            cta_arr.push($(a).attr("data-cta"))
                        })
                        return '/CTA-' + cta_arr.join(",");
                    }
                    var ga_cta_click = function(flagbuttorOrContainer, element) { //flag for button or container to aggreagate cta values
                        var nudgetype = "";
                        var status_bottomband = "";
                        if (config.pageStatus.dismisscardVisibe == true) {
                            nudgetype = "PopupReconfirm";
                        } else if (config.pageStatus.band.visible == true) {
                            if (config.pageStatus.band.type == "top") {
                                nudgetype = "TopBand"
                            } else {
                                nudgetype = "bottom"
                                if (config.pageStatus.band.bottombandCollapsed == true) {
                                    //status_bottomband = '-collapsed'
                                //    status_bottomband = '-expanded'
                                } else if (config.pageStatus.band.bottombandCollapsed == false) {
                                  //  status_bottomband = '-Expanded'
                                }
                            }
                        } else if (config.pageStatus.blockerVisible == true) {
                            nudgetype = "Popup"
                        };
                        var cta_text;
                        if (flagbuttorOrContainer) {
                            cta_text = getCTA($(element))
                        } else {
                            cta_text = '/CTA-' + $(element).attr("data-cta")
                        }
                        try{sessionStorage.setItem("mp_conversion",'/NudgeType-' + nudgetype + status_bottomband + cta_text);
                            sessionStorage.setItem("mp_nudgetype",nudgetype)
                        }catch(e){}
                        ga('set', 'dimension34', nudgetype);
                        return 'PS-' + config.ga_prc + '/NudgeType-' + nudgetype + status_bottomband + cta_text;
                    
                        
                    }
                    var jqueryDefineViewport = function() {
                        $.fn.isInViewport = function() {
                            var elementTop = $(this).offset().top;
                            var elementBottom = elementTop + $(this).outerHeight();
                            var viewportTop = $(window).scrollTop();
                            var viewportBottom = viewportTop + $(window).height();
                            return (elementBottom + 1200) > viewportTop && elementTop < (viewportBottom + 1200);
                        };
                    }
                    
                    
                    
                    require(["tiljs/cookie", "tiljs/event", "tiljs/util"], function(cookie, event, util) {
                        setDeviceIdCookie(cookie, util);
                    })
                    
                    
            var checkValidCountry = function() {
                  return new Promise(function(resolve, reject) {
		           isFeedReuest().then(function(data){
                     if(toiPlusConfigRunner()){
                        var pstoriesList =  document.getElementsByClassName("prime");
                        if(!toiPlusConfig.showToiPlusEntryPoints && pstoriesList.length >0 ){
                            while(pstoriesList.length > 0) {
                               pstoriesList[0].remove();
                            }
                        }
                        // if(toiPlusConfig.showToiPlusEntryPoints == false && typeof hideNudges === 'function' ){
                        //       hideNudges();
                        // }
                        // if(!toiPlusConfig.showToiPlusEntryPoints && typeof hideNudges === 'function' ){
                        //      $('[data-toiplustories="true"]').hide();
                        // }
                        resolve();
                     }
                    });
		        }) 
            }
            

                
                    require(['jquery', 'tiljs/event'], function($, event) {
                       // console.log("in require");
                       
                    
                        event.subscribe("user.status", function(user) {
                            
                            //  console.log("checkValidCountry before start ");
                            checkValidCountry().then(function(){
                            // console.log("checkValidCountry after start ");
                          //   console.log("inside meteredPaywall > user.status === " );
                            updateGaafterLogin_fix();
                            
                             var iscountryDisabled = window.toiPlusConfig && window.toiPlusConfig.showToiPlusBlocker && toiprops && (toiprops._Tmpl_pg=="Prime-Home" || toiprops._Tmpl_pg=="Prime-HPListing" || toiprops._Tmpl_pg=="Prime-articleshow" || toiprops._Tmpl_pg=="Prime-videoshow" ||toiprops._Tmpl_pg=="Prime-photoshow");
                              if( window.toiPlusConfig && window.toiPlusConfig.showToiPlusBlocker && window.location.href.indexOf('toi-plus') !== -1){
                                  return false;
                              }
                            var prc = getPrcCookieValue();
                            const params = getUrlParams();
                            var inGracePeriod = sessionStorage.getItem("inGracePeriod") ? sessionStorage.getItem("inGracePeriod") : false;
                            var inPreExpirePeriod = sessionStorage.getItem("inPreExpirePeriod") ? sessionStorage.getItem("inPreExpirePeriod") : false;
                            if(iscountryDisabled ){
                                nativePayment.makereq('/native_popup.cms?type=regionUnavailable&pagename=he').then(function(data){nativePayment.bindEventsonScreen(data)});
                                window.body_scroll_pos = $(window).scrollTop(); 
                                $('html').css('overflow-y', 'hidden');
                                if(toiprops._Tmpl_pg=="Prime-videoshow"){
                                    createFakePlayer();
                                }
                            } else if (!config.userstatus && $(constants.selector_mp).length > 0) {
                              //  removeToastMessageforMetered();
                                jqueryDefineViewport();
                                // isUserStatusChanged = true;
                                setTimeout(function() {
                                    //isUserStatusChanged = true;
                                    config.userstatus = true;
                                  primePaymentFlow.expiryDate().then(function(){
                                      console.log("inside meteredPaywall > primePaymentFlow.expiryDate()=== " );
                                  setPrcForUser(meteredPaywallInit.bind(null, user))
                                    //  primePaymentFlow.expiryDate().then(function(){  setPrcForUser(meteredPaywallInit.bind(null, user))});
                                }, 0);
                                })
                            }else if(window.plsObj.isToiPPSUser || window.plsObj.isCredPPSUser || inGracePeriod || inPreExpirePeriod || (params && (params.utm_source === 'newsshowcase' || params.utm_source === 'GE_Access'))){
                                console.log("user status else case ", window.plsObj.isToiPPSUser);
                                setTimeout(function() {
                                      primePaymentFlow.expiryDate().then(function(){
                                      setPrcForUser(meteredPaywallInit.bind(null, user))
                                    }, 0);
                                })
                            }
                            //   console.log("checkValidCountry after end ");
                        });
                        //  console.log("checkValidCountry before end ");
                       });
                    });
                    
                    require(['tiljs/event','tiljs/login'],function(event,login) {
                       event.subscribe("user.logout",function(user) {
                            if(toiPlusConfigRunner()){checkGeAccessAndShowMessages(null, {}, 0 , null)};
                       });
                    });
                    
                }
       
       
        
     var glbInit= function(){
        
        // return isFeedReuest().then(function(data){
            
        //     if(toiPlusConfigRunner()){ 
               
        //         var pstoriesList =  document.getElementsByClassName("prime");
        //         if(!toiPlusConfig.showToiPlusEntryPoints && pstoriesList.length >0 ){
        //             while(pstoriesList.length > 0) {
        //               pstoriesList[0].remove();
        //             }
        //         }
                
        //         if(toiPlusConfig.showToiPlusEntryPoints == false && typeof hideNudges === 'function' ){
        //               hideNudges();
        //         }
                
        //         if(!toiPlusConfig.showToiPlusEntryPoints && typeof hideNudges === 'function' ){
        //              $('[data-toiplustories="true"]').hide();
        //         }
                
               
                
                
                
        //     }    
            
        // });
        if (loadMp()){
                    MeteredWall()
                }
    }
    
    
     glbInit();
   
    
     
    
    
       
       

        
        var nativePayment=(function(){
        //console.log("testing nativepayment")
        //https://subs.timesofindia.com/subscriptions/config/toiw/plan/trans?lang=1&fv=600&theme=light
         var staging=window.location.host === 'toidev.indiatimes.com'?'stg':'';
         var credkey = window.location.host === 'toidev.indiatimes.com'?'4A1C2E464F29442788F9CC36CA2DA3EB':'830103AE460240FFBE550FD76DC7CBB1';
         var domain_json=window.location.host === 'toidev.indiatimes.com'?'https://nprelease.indiatimes.com':'https://plus.timesofindia.com';
         var config_native = {
                translation_api: domain_json+'/toi-feed/config/toiw/trans/planpage?lang=1&fv=1100&theme=light',
                //translation_api: 'https://toidev.indiatimes.com/json_planpage.cms',
                
                plans_api: 'https://'+staging+'subs.timesofindia.com/plan-manager/subscription/web/fetch?fv=1100',
                
                createorder_api: 'https://'+staging+'subs.timesofindia.com/subscriptions/order/web/create?fv=1100',
                initiatepayment_api: 'https://'+staging+'subs.timesofindia.com/subscriptions/order/web/initiate-payment?fv=1100',
                
                fetch_order_status_api: 'https://'+staging+'subs.timesofindia.com/subscriptions/order/web/fetch?fv=1100',
                stgsubscription_economictimes: 'https://subscriptions.economictimes.indiatimes.com/subscription/merchant/TOI/product/TOIPLUS/initTrans/<transcode>/findSubscription',
                //stgsubscription_economictimes: 'https://testsubscription.economictimes.indiatimes.com/subscription/merchant/TOI/product/TOIPLUS/initTrans/<transcode>/findSubscription',
                fetch_plan_status_api: 'https://'+staging+'pauth.indiatimes.com/prime-auth/web/prime/status?rspBody=true&version=3',
                fetch_cred_access_token: 'https://'+staging+'subs.timesofindia.com/subscriptions/cred/access/',
                
                kill_switch_api: 'https://'+staging+'subs.timesofindia.com/subscriptions/config/toim/switch?lang=1&fv=668',
                
                //toiplus_json:'https://toidev.indiatimes.com/json_toiplus_nudges.cms',
                toiplus_json:domain_json+'/toi-feed/config/toiw/trans/toiplusnudges?lang=1&fv=1100&theme=light',
                
                //toi_json:'https://toidev.indiatimes.com/json_nudges.cms',
                toi_json:domain_json+'/toi-feed/config/toiw/trans/commonnudge?lang=1&fv=1100&theme=light',
                selector_planPage: '#plan-popup-cont',
                selector_faq:'plan-faq',
                selector_privacy:'plan-privacy',
                isBindEvents:false,
                selector_tc:'plan-tc',
                selector_already_subscribed:'plan-already-subscribed',
                selector_contact_us:'contact_us',
                domain: 'https://nprelease.indiatimes.com',
                cc: 'IN',
                fv: 100,
                container_toast: '#logout-toast-popup',
                close_toast: '#close-button-toast-popup',
                container_login: '#toi-login',
                login_screen_top: '#prime_init_msg',
                plan_popup_script: '#plan-popup-script',
                congrats_script: '#congrats-script',
                failure_script: '#failure-script',
                pending_script: '#pending-script',
                cookie_toi: 'toi_subscription',
                payment_p: 'PAYMENT_PENDING',
                payment_s: 'PAYMENT_SUCCESS',
                payment_f: 'PAYMENT_FAILED',
                payment_text: '/native_popup.cms?',
                planid: 8,
                fetch_status_interval: '',
                order_id:'',
                ordertype:'SUBSCRIPTION',
                cred_key:credkey,

            }
            
            function gaEvents(category,action,level,setCountryCode=0){
             //   ga("send", "event", category, action, level);
                primePaymentFlow.fireGAEvent(action,level,setCountryCode)
            }
		     function makereq_get_header(url, header) {
		        return new Promise(function(resolve, reject) {
		            $.ajax({
		                url: url,
		                headers: header,
		                success: function(data) {
		                    resolve(data)
		                },
                         error: function(XMLHttpRequest, textStatus, errorThrown)
                        {
                         reject({})
         
                       }
		            });
		        })
		    }
		    
		    function setPrcCookieInSession(prcData){
                        var prcValue = getPrcCookieValue()
                        sessionStorage.setItem(
                          `prime_${prcValue}`,
                          JSON.stringify({
                            endDatems: prcData.endDatems,
                            startDatems: prcData.startDatems,
                            subscriptionSource: prcData.subscriptionSource,
                            planName: prcData.planName,
                          }),
                        );
                    }

		    function makereq_post_body(url, data,mandatory=0) {
		       // console.log("url",url,"data",data);
		        return new Promise(function(resolve, reject) {
		             nativePayment.fetchLocation(mandatory).then(function(cc) {
    		            if(url.indexOf("cc") ==-1){
    		                 var sep = url.indexOf("?") > -1 ? '&' : '?';
                            if (cc) {
                                url = url + sep + "cc=" + cc;
                            }
    		            }
    		           // console.log("in make makereq_post_body ",url);
    		            $.ajax({
    		                url: url,
    		                type: "POST",
    		                dataType: "json",
    		                data: JSON.stringify(data),
    		                contentType: "application/json",
    		                success: function(data) {
    		                    resolve(data)
    		                },
                            error: function() {
                                reject({status:'FAILED'})
                            }
    		            });
		            });
		        })
		    }
        
         function closePopups() {
		        $(".plan-popup").fadeOut("fast");
		        $(document.body).removeClass('scroll-block');
		    }
        function loadUserStatusMessage(container, message) {
                var prc = primePaymentFlow.getPrcCookieValue();
                if (message != undefined) {
                    primePaymentFlow.getUserExpireDate(prc, function(date) {
                        $(".status_messages").html(message.replace("<date>", date)).show()
                    })
                }
            }
        
        function fetchLocation(required) {
                return new Promise(function(resolve, reject) {
                    // resolve();
                     if(location.href.indexOf('cc=')>-1){
                        var urlObj = new URL(location.href)
                        var cc = urlObj.searchParams.get('cc');
                        resolve(cc)
                        
                    }
                    if (required == 0) {
                        resolve();
                    }
                  //  console.log( window.geoinfo);
                    
                    
                    if (window.geoinfo && window.geoinfo.CountryCode && window.geoinfo.CountryCode !== 'undefined') {
                        var cc = window.geoinfo.CountryCode;
                        resolve(cc)
                    }else if (getCookie('geo_country')!='' && getCookie('geo_country')!='undefined') {
                        var cc = getCookie('geo_country');
                        resolve(cc)
                    } else {
                        var c = document.createElement("script");
                        c.type = "application/javascript";
                        c.src = "https://geoapi.indiatimes.com/?cb=1";
                        document.body.appendChild(c);
                        c.onload = function() {
                            var cc = window.geoinfo.CountryCode
                            resolve(cc)
                        };
                        
                    }
                })
            }
        function makereq(api, mandatory) {
            var api = api;
            var required = mandatory || 0;
            //if(location){fetchLocation}
            return new Promise(function(resolve, reject) {
                nativePayment.fetchLocation(required).then(function(cc) {
                     if(api.indexOf("cc") ==-1){
                        var sep = api.indexOf("?") > -1 ? '&' : '?';
                        if (cc) {
                            api = api + sep + "cc=" + cc;
                        }
                     }
                    $.ajax({
                        url: api,
                        success: function(content) {
                            resolve(content);
                        },
                        error: function(XMLHttpRequest, textStatus, errorThrown) {
                            reject({})
                        }
                    });
                })
        
            })
        }
          function renderTemplate(container, json) {
                //console.log(json)
                var template = $.templates(container);
                var htmlOutput = template.render(json);
                $(config_native.selector_planPage).html(htmlOutput).fadeIn("fast");
                // setTimeout(function(){$(".plan_options").addClass("bottom_animate")},1000)
                 $('.plan-popup').addClass("active");
            //add the class in body
            $(document.body).addClass('scroll-block');
            //remove the class when cloase the plan page
            // setTimeout(function(){$(".plan_options").addClass("bottom_animate")},1000)
            bindEvents();
            }
         function firePurchaseTypeDimension () {
              var inGracePeriod = sessionStorage.getItem("inGracePeriod") ? sessionStorage.getItem("inGracePeriod") : false;
              var prc = getPrcCookieValue();
              var inPreExpirePeriod = sessionStorage.getItem("inPreExpirePeriod") ? sessionStorage.getItem("inPreExpirePeriod") : false;
              var userPurchaseType = sessionStorage.getItem("userPurchaseType") ? sessionStorage.getItem("userPurchaseType") : '';
              var newPurchaseType;
                if (userPurchaseType === 'tp') {
                    newPurschaseType = 'new';
                } else if (userPurchaseType !== 'tp' && prc === 5 && inGracePeriod) {
                    newPurschaseType = 'Grace_renew';
                } else if (userPurchaseType !== 'tp' && prc === 5) {
                    newPurschaseType = 'Renew';
                } else if (userPurchaseType !== 'tp' && prc === 6) {
                    newPurschaseType = 'Expired';
                } else if (userPurchaseType !== 'tp') {
                    newPurschaseType = 'new';
                }
                window.ga('set', 'dimension53',newPurschaseType);
                if (typeof window !== 'undefined' && window.localStorage) {
                  localStorage.setItem('newPurschaseType', newPurschaseType);
                }
           };
		  var productId ;
		  var accessType = '' ;
		  var duration = '';
		  var planName = "";
		  var orderId = '';
		  var unlockType = '';
		  function fetch_order_status(toi_cookie, retry_count) {
		      console.log('fetch_order_status===');
                require(["tiljs/cookie"], function(cookie) {
                    //console.log("cookieeeee", toi_cookie)
                    var api = nativePayment.config_native.stgsubscription_economictimes.replace('<transcode>', toi_cookie);
                    var promise_plans_api = nativePayment.makereq(config_native.plans_api,1);
                    var count = retry_count + 1
                    // api += '&orderId=' + toi_cookie;
                    // api += '&retryCount=' + (retry_count);
                    var options = {}
                    options = {
                       'X-CLIENT-ID': 'b2a8e883ec676f417520f422068a4742',
                       'X-SITE-APP-CODE': '04e2b3dc222d26d7ffa0ed3d3285cce6',
                     };
                    //options = {
                      //'X-CLIENT-ID': 'w2a8e883ec676f417520f422068a4741',
                      //'X-SITE-APP-CODE': '7a3514a35e5493b739659ba1bb9ea0a9',
                    //};
                    // options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
                    // options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
                    nativePayment.makereq_get_header(api, options).then(function(statusRes) {
                        var fetchSubscriptionData = statusRes.subscriptionDetail;
                        var userDetail = statusRes.userDetail;
                        //console.log("order status api", data.data.orders[0])
                        var paymentStatus = 'PAYMENT_SUCCESS';
                        // var paymentData = data.data.orders[0];
                        // productId = paymentData.productId;
                        accessType = fetchSubscriptionData.planName;
                        orderId += userDetail.transcode;
                        // duration += data.data.orders[0].planDetails.durationDescription;
                        // var paymentError = paymentData?.paymentError;
                        if(accessType==="PAY_PER_ARTICLE" && localStorage.getItem("cred_flow_initiated")){
                            planName="PAY_PER_ARTICLE";
                            unlockType = "CRED"
                            // if(paymentStatus === 'PAYMENT_FAILED'){
                            //     localStorage.setItem("cred_pps_error",paymentError);
                            // }
                        }
                        else if(accessType==="PAY_PER_ARTICLE"){
                            planName="PAY_PER_ARTICLE";
                            sessionStorage.setItem("pps_planstatus",paymentStatus);
                        }
                        else if(accessType==="TOI_PLUS" || accessType==="TOIPLUS" || accessType==="TOI+"){
                            planName ="TOIPlusPAID";
                        }
                        else if(accessType==="TIMESPRIME"){
                            planName ="TOIPlus_TimesPrimePaid";
                        }
                        if (paymentStatus == 'PAYMENT_PENDING' && count <= 3) {
                            nativePayment.config_native.fetch_status_interval = setTimeout(function() {
                                //nativePayment.fetch_order_status(toi_cookie, count)
                            }, 3000)
                        } else if (paymentStatus == 'PAYMENT_PENDING' && count == 4 && !localStorage.getItem('retry_popup_closed')) {
                            nativePayment.closePopups();
                            nativePayment.collectParametersforPopup(paymentStatus).then(function(data) {
                                nativePayment.displayPopup(data)
                                //gaAfterAPIResponse(paymentStatus);
                            });;
                            // nativePayment.config_native.fetch_status_interval = setTimeout(function() {
                            //     nativePayment.fetch_order_status(toi_cookie, 1);
                            //     gaAfterAPIResponse(paymentStatus);
                            // }, 3000)
                        
                            
                        } else {
                            // nativePayment.closePopups();
                            console.log('fetch_order_status > makereq_get_header > collectParametersforPopup')
                            // nativePayment.collectParametersforPopup(paymentStatus, options).then(function(data) {
                                localStorage.removeItem(nativePayment.config_native.cookie_toi);
                                if(paymentStatus !== 'PAYMENT_PENDING'){
                                // nativePayment.displayPopup(data);
                                gaAfterAPIResponse(paymentStatus);
                                const cookieType = getCookieByName("utm_source");
                                //console.log(cookieType, "type of cookie");
                                if(paymentStatus == 'PAYMENT_SUCCESS') {
                                    localStorage.removeItem('paymentSuccess');
                                    localStorage.removeItem('toi_cookie');
                                    localStorage.removeItem('cred_access_token');
                                    localStorage.removeItem('cred_refresh_token');
                                    localStorage.removeItem("cred_flow_initiated");
                                    localStorage.removeItem('retry_popup_closed');
                                    // promise_plans_api.then(function(planData) {
                                    var currency = fetchSubscriptionData.currency;
                                    gtag('event', 'conversion', {'send_to': 'AW-877820074/83xdCPmvgoQDEKrxyaID',
                                      'value': `${fetchSubscriptionData.finalBillingAmount}`,
                                      'currency': `${currency}`,
                                      'transaction_id': `${userDetail.transcode}`,
                                     });
                                    fbq('track', 'Purchase', {currency: `${currency}`, value: fetchSubscriptionData.finalBillingAmount});
                                    switch(cookieType) {
                                    case "admitad": {
                                        const unique_id = getCookieByName("utm_source_id");
                                        var url = `https://ad.admitad.com/r?campaign_code=7185ee6461&action_code=1&uid=${unique_id}&order_id=${userDetail.transcode}&tariff_code=1&price=${fetchSubscriptionData.finalBillingAmount}&payment_type=sale&currency_code=${currency}`;
                                        $(`<img src='${url}' width='1' height='1' alt=''>`).appendTo("body");
                                        break;
                                    }
                                    case "xapads": {
                                        let saleAmount = Math.ceil(fetchSubscriptionData.finalBillingAmount / 2);
                                        var url = `https://trck.xapads.com/pixel?adid=60b9c6969c0169097767493b&goal_value=subscription&sale_amount=${saleAmount}&currency=INR&sub1=${userDetail.transcode}&sub2=${fetchSubscriptionData.finalBillingAmount}&sub3=${window.geoinfo.CountryCode}`
                                        $(`<img src='${url}'>`).appendTo("body");
                                        break;
                                    }
                                    case "affle": {
                                        var url = `https://cost.affcost.com/pixel?adid=60b89b72c3d5391cfa6a5317&sub1=${userDetail.transcode}&sale_amount=${fetchSubscriptionData.finalBillingAmount}`;
                                        $(`<img src='${url}'>`).appendTo("body");
                                        break;
                                    }
                                }
                                var updatedUrl = window.location.href.replace(
                                    'transcode',
                                    'transcode_exp',
                                  );
                                  window.history.pushState({}, '', updatedUrl);
                                // })
                                }
                                }
                            // });
                            
                        }
                    }).catch(function(data){ 
                    //   nativePayment.collectParametersforPopup('PAYMENT_UNREACHABLE').then(function(data) {
                    //             nativePayment.displayPopup(data);
                    //             nativePayment.config_native.order_id=toi_cookie
                    //             gaAfterAPIResponse('PAYMENT_UNREACHABLE');
                           
                    //   });
                          
                        })
                })
            }
            
            function bindEventsonScreen(data) {
                var prcValue = getPrcCookieValue();
		        $('body').append(data);
		         var currentCountry =  (window.geoinfo && window.geoinfo.CountryCode) || comgetCookie('geo_country') || 'IN';
		         if(currentCountry != 'IN'){
		            $('.tp_bar.success_pop').hide();
                }
		       // $(".plan-popup").off('click', '.success_case .keep_browsing,.success_case .close_btn').on('click', '.success_case .keep_browsing,.success_case .close_btn', function(e) {
		             $(".plan-popup").off('click', '.continue_reading').on('click', '.continue_reading', function(e) {
		            e.preventDefault();
                     localStorage.removeItem("cred_flow_initiated");
                     nativePayment.closePopups();
                    if(unlockType === "CRED"){
    		               nativePayment.gaEvents('','TOIPlus_Payment_success_CRED_continue reading','Ps-'+prcValue,1);
    		            }
    		        if (["toidev.indiatimes.com", "spmdev.timesofindia.com", "toistg.indiatimes.com", "spmstg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                        window.location.href = getPrimeSuccessReloadUrl();
                    }else{
		                window.location.reload(true);
                    }   
		             })
		          $(".plan-popup").off('click', '.close_popup').on('click', '.close_popup', function(e) {
                    e.preventDefault();
                    nativePayment.closePopups();
                    
                })
		             $(".plan-popup").off('click', '.success_case .close_btn').on('click', '.success_case .close_btn', function(e) {
		            e.preventDefault();
		            localStorage.removeItem(nativePayment.config_native.cookie_toi);
                    
                    //window.location.href=window.location.href.split('?')[0] 
                  if (["toidev.indiatimes.com", "spmdev.indiatimes.com", "toistg.indiatimes.com", "spmstg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                        window.location.href = getPrimeSuccessReloadUrl();
                    }
                    else{
                        window.location.reload(true);
                    }
		            
		        })
		        
		        $(".plan-popup").off('click', '.pending_case .close_btn').on('click', '.pending_case .close_btn', function(e) {
		             e.preventDefault();
                    nativePayment.closePopups();
		            var toi_cookie = JSON.parse(localStorage.getItem(nativePayment.config_native.cookie_toi)).order_id;
		            localStorage.setItem('toi_cookie', toi_cookie);
		            localStorage.setItem('retry_popup_closed', 1);
		        })
                
		        $(".plan-popup").off('click', '.keep_browsing, .close_btn').on('click', '.keep_browsing,.close_btn', function(e) {
		            localStorage.removeItem(nativePayment.config_native.cookie_toi);
		            e.preventDefault();
		            nativePayment.closePopups();
		            localStorage.removeItem("cred_flow_initiated");
		            clearTimeout(nativePayment.config_native.fetch_status_interval);
		            $(document.body).removeClass('scroll-block');
		            if (["toidev.indiatimes.com", "spmdev.timesofindia.com", "toistg.indiatimes.com", "spmstg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                        window.location.href = getPrimeSuccessReloadUrl();
                    }
		        })
		          $(".plan-popup").off('click', '.gotopayment').on('click', '.gotopayment', function(e) {
                    e.preventDefault();
                    nativePayment.closePopups();
                    if(sessionStorage && sessionStorage.getItem("pps_planstatus") != "" && planName == 'PAY_PER_ARTICLE'){
                        nativePayment.gaEvents('','TOIPlus_Payment_'+sessionStorage.getItem("pps_planstatus")+'_PerStory_Retry_Click','Ps-'+ prcValue +'/'+planName,1);
                        nativePayment.config_native.ordertype="PAY_PER_ARTICLE";
                        nativePayment.config_native.planid = null;
                        nativePayment.config_native.msid = (!!window.msid)? window.msid.toString() : null;
                     }
                     else{
                        nativePayment.config_native.ordertype = 'SUBSCRIPTION';
                        nativePayment.config_native.planid = productId;
                        nativePayment.config_native.msid = null;
                     }
                    setNudgeClickInfo('RETRY');
                    nativePayment.choosePlan(nativePayment.config_native.planid);
                })
		        $(".plan-popup").off('click', '.gotopayment,.try_again').on('click', '.gotopayment,.try_again', function(e) {
		            e.preventDefault();
		            nativePayment.closePopups();
		            //nativePayment.fetch_order_status(nativePayment.config_native.order_id)
		        })
		        $(".plan-popup").off('click', '.other_links a').on('click', '.other_links a', function(e) {
		            e.preventDefault();
		            nativePayment.triggerMailOnContactUs(e.target)
		        })
		        $(".plan-popup").off('click', '.go_to_btn').on('click', '.go_to_btn', function(e) {
		          //  e.preventDefault();
		            nativePayment.gaEvents('','TP_PAID_success_GO_TO_TIMESPRIME','Ps-'+prcValue+'/'+planName,1);
		            ga('set', 'dimension33', `${planName == 'PAY_PER_ARTICLE'? 'TOIPlusPerStory' : planName}`+`_`+`${duration}`);
		        })
		        $(".plan-popup").off('click', '.TP_continue_reading').on('click', '.TP_continue_reading', function(e) {
		            e.preventDefault();
		            nativePayment.gaEvents('','TP_PAID_success_START_READING_TOI+','Ps-'+prcValue+'/'+planName,1);
		            ga('set', 'dimension33', `${planName == 'PAY_PER_ARTICLE'? 'TOIPlusPerStory' : planName}`+`_`+`${duration}`);
		            window.location.reload(true);
		        })
		         $(".plan-popup").off('click', '.subscribetoiplus').on('click', '.subscribetoiplus', function(e) {
                    //e.preventDefault();
                    setNudgeClickInfo('TOIPlus_Payment_success_PerStory_Subsrcibe_click');
                     nativePayment.gaEvents('','TOIPlus_Payment_success_PerStory_Subsrcibe_click','Ps-'+ prcValue +'/'+planName,1);
                })
                $(".plan-popup").off('click', '.subscribetoiplus2').on('click', '.subscribetoiplus', function(e) {
                    //e.preventDefault();
                    setNudgeClickInfo('Welcome Back PPS Popup');
                })
                 $(".plan-popup").off('click', '.retry_btn').on('click', '.retry_btn', function(e) {
                      nativePayment.closePopups();
		             var toi_cookie = localStorage.getItem('toi_cookie') ? localStorage.getItem('toi_cookie') : JSON.parse(localStorage.getItem(nativePayment.config_native.cookie_toi)).order_id;
		             
		             nativePayment.collectParametersforPopup('LOADER').then(function(data) {
                                nativePayment.displayPopup(data);
                             
                               setTimeout(function() {
                                  //nativePayment.fetch_order_status(toi_cookie, 0) // 0 is retry count
                               }, 100)
                    
                          });
		             
		        })
		        $(".plan-popup").off('click', '.retry_payment').on('click', '.retry_payment', function(e) {
                    e.preventDefault();
                    nativePayment.gaEvents('','TOIPlus_Payment_fail_CRED_retry','Ps-'+ prcValue ,1);
                    localStorage.removeItem("cred_flow_initiated");
                    nativePayment.closePopups();
                    $(document.body).removeClass('scroll-block');
                })
                $(".plan-popup").off('click', '.go_back').on('click', '.go_back', function(e) {
		            e.preventDefault();
		            localStorage.removeItem("cred_flow_initiated");
		            nativePayment.closePopups();
		            $(document.body).removeClass('scroll-block');
		        });
		  }
             function getCookieByName(name) {
                var cookieArr = document.cookie.split(";");
                // Loop through the array elements
                for(var i = 0; i < cookieArr.length; i++) {
                    var cookiePair = cookieArr[i].split("=");
                   // console.log(cookiePair, "pair");
                    if(name == cookiePair[0].trim()) {
                        return decodeURIComponent(cookiePair[1]);
                    }
                }
                return null;
            }
            
            function gaAfterAPIResponse(paymentstatus) {
                   var prcValue = getPrcCookieValue();
                   $(document.body).addClass('scroll-block');
                   if(unlockType === "CRED"){
                       var balance = sessionStorage.getItem("credBalance");
                       var plan = 'CREDUnlock_'+balance;
                       ga('set', 'dimension33', plan);
                   }else{
                        ga('set', 'dimension33', `${planName == 'PAY_PER_ARTICLE'? 'TOIPlusPerStory' : planName}`+`_`+`${duration}`);
                   }
                    switch (paymentstatus) {
                        case 'PAYMENT_SUCCESS':{
                            var _ea;
                            if(unlockType === "CRED"){
                                _ea = 'TOIPlus_Payment_success_CRED_view';
                                nativePayment.gaEvents('', _ea ,'Ps-'+prcValue,1);
                            }
                            else{
                                _ea = (planName == 'PAY_PER_ARTICLE') ? 'TOIPlus_Payment_success_PerStory_view' : 'TOIPlus_Payment__success_view';
                                nativePayment.gaEvents('', _ea ,'Ps-'+prcValue+'/'+planName,1);
                            }
                            break;
                        }
                        case 'PAYMENT_PENDING':
                            var _ea;
                            if(unlockType === "CRED"){
                                _ea = 'TOIPlus_Payment_pending_CRED_view';
                                nativePayment.gaEvents('', _ea ,'Ps-'+prcValue,1);
                            }else{
                                _ea = (planName == 'PAY_PER_ARTICLE') ? 'TOIPlus_Payment_pending_PerStory_view' : 'TOIPlus_Payment__pending_view';
                                nativePayment.gaEvents('',_ea ,`${planName!==""? 'Ps-'+prcValue+'/'+planName :'Ps-'+prcValue+'/TOIPlusPAID'}`,1);
                            }
                            break;
                        case 'PAYMENT_FAILED':
                            var _ea;
                            if(unlockType === "CRED"){
                                _ea = 'TOIPlus_Payment_fail_CRED_view';
                                nativePayment.gaEvents('', _ea ,'Ps-'+prcValue,1);
                            }else{
                                _ea = (planName == 'PAY_PER_ARTICLE') ? 'TOIPlus_Payment_fail_PerStory_view' : 'TOIPlus_Payment__fail_view';
                                nativePayment.gaEvents('', _ea ,`${planName!==""? 'Ps-'+prcValue+'/'+planName :'Ps-'+prcValue+'/TOIPlusPAID'}`,1);
                            }
                            break;
                        case 'PAYMENT_UNREACHABLE':
                            var _ea = (planName == 'PAY_PER_ARTICLE') ? 'TOIPlus_NoResponsefromServer_PostPayment_PerStory' : 'TOIPlus_NoResponsefromServer_PostPayment';
                            nativePayment.gaEvents('',_ea ,'Ps-'+prcValue,1)
                            break;
                    }

            }

            function collectParametersforPopup(paymentstatus, options) {
                return new Promise(function(resolve, reject) {
                    if(unlockType !== "CRED" && sessionStorage.getItem('planName')){
                        ga('set', 'dimension33', `${sessionStorage.getItem('planName') == 'PAY_PER_ARTICLE'? 'TOIPlusPerStory' : sessionStorage.getItem('planName')}`+`_`+`${duration}`);
                    }
                    var str = "";
                    console.log("collectParametersforPopup paymentstatus=== ",paymentstatus);
                    
                    switch (paymentstatus) {
                        case 'PAYMENT_SUCCESS':
                            sessionStorage.removeItem('nativePrc');
                            sessionStorage.removeItem('expirydate');
                            //localStorage.setItem("planAction", "planAction");
                            //var planName = "";
                            var showGracePopUp = sessionStorage.getItem('previousExpiryDate') ? true : false;
                            var prevdate = sessionStorage.getItem('previousExpiryDate') && sessionStorage.getItem('previousExpiryDate');
                            nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                                if(accessType==="PAY_PER_ARTICLE" && unlockType === "CRED"){
                                    str += "type=thirdParty&popupType=credStatusPopup&status=success"; 
                                }
                                else if(accessType==="PAY_PER_ARTICLE"){
                                    str += "type=PerStory"; 
                                }
                                else if(data.accessType==="TOI_PLUS" && showGracePopUp){
                                    str += "type=gracePopup"
                                    str += "&prevdate=" + prevdate;
                                } else if(data.accessType==="TOI_PLUS") {
                                     str += "type=success"
                                } else if(data.accessType==="TIMESPRIME"){
                                    str += "type=timesPrime"
                                }
                                var endate = "";
                                try {
                                    endate = new Date(data.endDate.replace(' IST', '')).toDateString().replace(" ",", ");
                                   
                                } catch (e) {
                                    var prcValue = getPrcCookieValue();
                                    console.log('PAYMENT_SUCCESS prcValue not found > ga');
                                    nativePayment.gaEvents('','TOIPlus_success_error_'+e,'Ps-'+prcValue,1)
                                }
                                //console.log(endate)
                                str += "&enddate=" + endate;
                                if(unlockType === "CRED"){
                                    var balance = data.credBalance;
                                    var plan = 'CREDUnlock_'+balance;
                                    ga('set', 'dimension33', plan);
                                }
                                //console.log("testing......", str);
                                jssoCrosswalkObj.getUserDetails(function(user_details) {
                                    if (typeof user_details.data.mobileData.Verified != "undefined" && typeof user_details.data.mobileData.Verified.mobile != "undefined") {
                                        var mobile = user_details.data.mobileData.Verified.mobile;
                                        str += '&mobile=' + mobile
                                    } else {
                                        var email = user_details.data.primaryEmail;
                                        str += '&email=' + email
                                    }
                                    if(window.prcNames[data.accessType] && window.prcNames[data.accessType][data.planStatus]){
                                        window.activePlanName=window.prcNames[data.accessType][data.planStatus];
                                        sessionStorage.setItem('planName', window.prcNames[data.accessType][data.planStatus]);
                                        localStorage.setItem('planName', window.prcNames[data.accessType][data.planStatus]);
                                    }
                               
                                        require(["tiljs/login"], function(login) {
                                            login.setNativePrc();
                                        })
                                        setTimeout(function(){
                                            
                                        var prcValue = getPrcCookieValue();
                                        console.log('PAYMENT_SUCCESS SetTimeout | prc', prcValue);
                                        window.ga('set', 'dimension50',orderId);
                                        if (typeof window !== 'undefined' && window.localStorage && accessType!=="PAY_PER_ARTICLE") {
                                          var newPurschaseType = localStorage.getItem('newPurschaseType');
                                          if (newPurschaseType) {
                                            window.ga('set', 'dimension53',newPurschaseType);
                                          }
                                          localStorage.removeItem('newPurschaseType');
                                        }
                                        var remainingDays = sessionStorage ? sessionStorage.getItem("remainingDays") : null ;
                                        var inPreExpirePeriod = sessionStorage.getItem("inPreExpirePeriod") ? sessionStorage.getItem("inPreExpirePeriod") : false;
                                        var inGracePeriod = sessionStorage.getItem("inGracePeriod") ? sessionStorage.getItem("inGracePeriod") : false;
                                        if (remainingDays > -1) {
                                            if (inGracePeriod) {
                                              window.ga('set', 'dimension52',remainingDays);
                                            } else if (inPreExpirePeriod) {
                                              window.ga('set', 'dimension51',remainingDays);
                                            }
                                        }
                                        if(accessType==="PAY_PER_ARTICLE" && unlockType === "CRED"){
                                            nativePayment.gaEvents('','TOIPlus_PAID_cred_success', toiprops.articleTitle,1);
                                        }
                                        else if(accessType==="PAY_PER_ARTICLE"){
                                            console.log('PAYMENT_SUCCESS SetTimeout GA fire > TOIPlus_PAID_success_PerStory_$');
                                             nativePayment.gaEvents('',`TOIPlus_PAID_success_PerStory_${toiprops.msid}`,`${toiprops.primeEvent == 1 ? toiprops.articleTitle : 'Ps-'+prcValue+'/PAY_PER_ARTICLE'}`,1);
                                             nativePayment.gaEvents('',`TOIPlus_PRCNA_success_PerStory_${toiprops.msid}_${prcValue}`,`${toiprops.primeEvent == 1 ? toiprops.articleTitle : 'Ps-'+prcValue+'/PAY_PER_ARTICLE'}`,1);
                                            }else{
                                                console.log('PAYMENT_SUCCESS SetTimeout GA fire > TOIPlus_PAID_success_Story_$');
                                             nativePayment.gaEvents('',`${toiprops.primeEvent == 1 ? `TOIPlus_PAID_success_Story_${toiprops.msid}` : 'TOIPlus_PAID_success'}`,`${toiprops.primeEvent == 1 ? toiprops.articleTitle : 'Ps-'+prcValue+'/'+planName}`,1);
                                             nativePayment.gaEvents('',`${toiprops.primeEvent == 1 ? `TOIPlus_PRCNA_success_Story_${toiprops.msid}_${prcValue}` : 'TOIPlus_PRCNA_success_'+prcValue+''}`,`${toiprops.primeEvent == 1 ? toiprops.articleTitle : 'Ps-'+prcValue+'/'+planName}`,1);
                                          }
                                        },0)
                            
                                        require(["tiljs/cookie"], function(cookie) {
                                          cookie.remove("ipr", "/", ".indiatimes.com");
                                          })
                                    //  str += "&user="+user;
                                    resolve(str); 
                                    
                                })
                                //resolve(str)  
                                if(data.otps && data.otps.length > 0){
                                  for(i=0;i<data.otps.length;i++){
                                      if(data.otps[i].source && data.otps[i].source=="cred" && data.otps[i].msids){
                                          sessionStorage.setItem('credstories', data.otps[i].msids.toString());
                                          if(data.otps[i].msids.includes(window.msid.toString())){
                                                window.plsObj.isCredPPSUser = true;
                                            }
                                      }
                                      if(data.otps[i].source && data.otps[i].source=="others" && data.otps[i].msids){
                                          sessionStorage.setItem('paidstories', data.otps[i].msids.toString());
                                          if(data.otps[i].msids.includes(window.msid.toString())){
                                            window.plsObj.isToiPPSUser = true;
                                          }
                                      }
                                  }
                               }
                            })

                            break;
                        case 'PAYMENT_PENDING':
                            if (typeof window !== 'undefined' && window.localStorage && accessType!=="PAY_PER_ARTICLE") {
                                var newPurschaseType = localStorage.getItem('newPurschaseType');
                                if (newPurschaseType) {
                                    window.ga('set', 'dimension53',newPurschaseType);
                                }
                                localStorage.removeItem('newPurschaseType');
                            }
                            var remainingDays = sessionStorage ? sessionStorage.getItem("remainingDays") : null ;
                            var inPreExpirePeriod = sessionStorage.getItem("inPreExpirePeriod") ? sessionStorage.getItem("inPreExpirePeriod") : false;
                            var inGracePeriod = sessionStorage.getItem("inGracePeriod") ? sessionStorage.getItem("inGracePeriod") : false;
                            if (remainingDays > 0) {
                                if (inGracePeriod) {
                                  window.ga('set', 'dimension52',remainingDays);
                                } else if (inPreExpirePeriod) {
                                  window.ga('set', 'dimension51',remainingDays);
                                }
                            }
                            var prcValue = getPrcCookieValue();
                            nativePayment.gaEvents('','TOIPlus_PAID_pending',`${planName!==""? 'Ps-'+prcValue+'/'+planName :'Ps-'+prcValue+'/TOIPlusPAID'}`,1)
                            nativePayment.gaEvents('',`${toiprops.primeEvent == 1 ? `TOIPlus_PRCNA_pending_Story_${toiprops.msid}_${prcValue}` : 'TOIPlus_PAID_pending_'+prcValue+''}`,`${toiprops.primeEvent == 1 ? toiprops.articleTitle : 'Ps-'+prcValue+'/'+planName}`,1);
                            str += "type=pending"
                            resolve(str);
                            break;
                        case 'PAYMENT_FAILED':
                            var prcValue = getPrcCookieValue();
                            window.ga('set', 'dimension50',orderId); 
                            if(unlockType === "CRED" || localStorage.getItem("cred_flow_initiated")){
                                error_status = localStorage.getItem("cred_pps_error") ? localStorage.getItem("cred_pps_error") : null;
                                str += "type=thirdParty&popupType=credStatusPopup"
                                if(error_status && (error_status === 'NO_CRED_ACCOUNT' || error_status === 'INSUFFICIENT_CRED_BALANCE')){
                                    str += '&status=' + error_status;
                                }else{
                                    str += '&status=PaymentFailure'
                                }
                                localStorage.removeItem("cred_pps_error");
                            }
                            else{
                                nativePayment.gaEvents('','TOIPlus_PAID_fail',`${planName!==""? 'Ps-'+prcValue+'/'+planName :'Ps-'+prcValue+'/TOIPlusPAID'}`,1);
                                str += "type=failure"
                            }
                            resolve(str);
                            break;
                        case 'LOADER':
                            str += "type=loader"
                            resolve(str);
                            break;
                        case 'PAYMENT_UNREACHABLE':
                            str += "type=unreachable"
                            resolve(str);
                            break;
                        case 'EXISTING_PRIME_USER':
                            
                            var currentregion =  (window.geoinfo && window.geoinfo.region_code) ||comgetCookie('geo_region') || 'DL';
                            var currentcontinent =  (window.geoinfo && window.geoinfo.Continent) || comgetCookie('geo_continent') || 'AS';
                            if(toiplusCountryConfig.legalDisabledCountries.continent.includes(currentcontinent) || toiplusCountryConfig.legalDisabledCountries.region.includes(currentregion)){
                                break;
                            }
                            if(localStorage.getItem("planAction")) {
                                str += "type=primeAction"
                            } else {
                             str += "type=epu"   
                            }
                            nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                                var endate = "";
                                try {
                                    endate = new Date(data.endDate.replace(' IST', '')).toDateString().replace(" ",", ");
                                   
                                } catch (e) {
                                   
                                }
                                str += "&enddate=" + endate;
                                console.log("EXISTING_PRIME_USER");
                                if(window.prcNames[data.accessType] && window.prcNames[data.accessType][data.planStatus]){
                                    window.activePlanName=window.prcNames[data.accessType][data.planStatus];
                                     sessionStorage.setItem('planName', window.prcNames[data.accessType][data.planStatus]);
                                      localStorage.setItem('planName', window.prcNames[data.accessType][data.planStatus]);
                                }
                               
                                
                             jssoCrosswalkObj.getUserDetails(function(user_details) {
                                    if (typeof user_details.data.mobileData.Verified != "undefined" && typeof user_details.data.mobileData.Verified.mobile != "undefined") {
                                        var mobile = user_details.data.mobileData.Verified.mobile;
                                        str += '&mobile=' + mobile
                                    } else {
                                        var email = user_details.data.primaryEmail;
                                        str += '&email=' + email
                                    }
                                    nativePayment.gaEvents('','TOIplus_Payment_WelcomeBack','Ps-'+data.planStatus,1);
                                    require(["tiljs/login"], function(login) {
                                        login.setNativePrc();
                                    })
                                    resolve(str); 
                                   
                                })
                            })
                            
                            break;
                            case 'FREE_TRIAL_USER':
                            str += "type=efu"
                            nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                                var endate = "";
                                try {
                                    endate = new Date(data.endDate.replace(' IST', '')).toDateString().replace(" ",", ");
                                   
                                } catch (e) {
                                   
                                }
                                try{
                                var date=new Date();
                                var expdate=new Date(data.endDatems);
                                var diffTime = Math.abs(expdate - date);
                                var diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); 
                                str += "&daysleft=" + diffDays;
                                }catch(e){}
                                //str += "&daysleft=5";
                                str += "&enddate=" + endate;
                                 if(window.prcNames[data.accessType] && window.prcNames[data.accessType][data.planStatus]){
                                     window.activePlanName=window.prcNames[data.accessType][data.planStatus];
                                     sessionStorage.setItem('planName', window.prcNames[data.accessType][data.planStatus]);
                                     localStorage.setItem('planName', window.prcNames[data.accessType][data.planStatus]);
                                }
                             jssoCrosswalkObj.getUserDetails(function(user_details) {
                                    if (typeof user_details.data.mobileData.Verified != "undefined" && typeof user_details.data.mobileData.Verified.mobile != "undefined") {
                                        var mobile = user_details.data.mobileData.Verified.mobile;
                                        str += '&mobile=' + mobile
                                    } else {
                                        var email = user_details.data.primaryEmail;
                                        str += '&email=' + email
                                    }

                                    require(["tiljs/login"], function(login) {
                                        login.setNativePrc();
                                    })
                                    resolve(str); 
                                   
                                })
                            })
                            
                            break;
                            case 'EXISTING_PPS_USER':
                            var prcValue = getPrcCookieValue();
                            str += "type=eppsu"
                            nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                                jssoCrosswalkObj.getUserDetails(function(user_details) {
                                    if (typeof user_details.data.mobileData.Verified != "undefined" && typeof user_details.data.mobileData.Verified.mobile != "undefined") {
                                        var mobile = user_details.data.mobileData.Verified.mobile;
                                        str += '&mobile=' + mobile
                                    } else {
                                        var email = user_details.data.primaryEmail;
                                        str += '&email=' + email
                                    }
                                    nativePayment.gaEvents('','TOIplus_Payment_WelcomeBack','Ps-'+prcValue,1);
                                    require(["tiljs/login"], function(login) {
                                        //login.setNativePrc();
                                        login.setPrcFromPrime
                                    })
                                    resolve(str); 
                                   
                                })
                            })
                            
                            break;
                    }
                })
            }

		    function displayPopup(str) {
		        $(".payment_loader").hide('fast')
		        var pagename=toiprops._Tmpl_pg;
		        str+='&pagename='+pagename
		        if(unlockType === "CRED" || localStorage.getItem("cred_flow_initiated")){
    		        var datatobepassed = {};
                    nativePayment.makereq(nativePayment.config_native.payment_text + str).then(function(data){
                        primePaymentFlow.renderJson(data,'script_mp','',datatobepassed,nativePayment.config_native.toiplus_json).then(function(resp){
                            nativePayment.bindEventsonScreen(resp)
                        })
                    })
		        }
		        else{
		            nativePayment.makereq(nativePayment.config_native.payment_text + str).then(function(data) {
    		            nativePayment.bindEventsonScreen(data)
    		        })
		        }
		    }
		  
        function epu(json){
            var pagename=toiprops._Tmpl_pg;
            
            nativePayment.makereq('/native_popup.cms?type=epu&pagename='+pagename).then(function(data){nativePayment.bindEventsonScreen(data)})
        }
        function efu(json){
            var pagename=toiprops._Tmpl_pg;
            nativePayment.makereq('/native_popup.cms?type=efu&pagename='+pagename).then(function(data){nativePayment.bindEventsonScreen(data)})
        }
        function succesScreen(json){
            var pagename=toiprops._Tmpl_pg;
            nativePayment.makereq('/native_popup.cms?type=success&pagename='+pagename).then(function(data){nativePayment.bindEventsonScreen(data)})
        }  
        function unreachableScreen(json) {
            var pagename=toiprops._Tmpl_pg;
                nativePayment.makereq('/native_popup.cms?type=unreachable&pagename='+pagename).then(function(data) {
                    nativePayment.bindEventsonScreen(data)
                })
        }
        function failureScreen(){
            var pagename=toiprops._Tmpl_pg;
            nativePayment.makereq('/native_popup.cms?type=failure&pagename='+pagename).then(function(data){nativePayment.bindEventsonScreen(data)})
        }
        function pendingScreen(){
            var pagename=toiprops._Tmpl_pg;
            nativePayment.makereq('/native_popup.cms?type=pending&pagename='+pagename).then(function(data){nativePayment.bindEventsonScreen(data)})
        }
        function toiBlockerScreen(){
            var pagename=toiprops._Tmpl_pg;
            nativePayment.makereq(nativePayment.makereq('/native_popup.cms?type=toiblocker&pagename='+pagename).then(function(data){nativePayment.bindEventsonScreen(data)}))
        }
        
        function setbottomheight() {
            setTimeout(function() {
                $(".subscripton_container").css('padding-bottom', $(".plan_options").height() + 60)
            }, 3000);
        }
        
        function openPlanPage_2() {
                var prc = primePaymentFlow.getPrcCookieValue();
                var promise_plans_api = nativePayment.makereq(config_native.plans_api,1);
                var promise_translation_api = nativePayment.makereq(config_native.translation_api,1)
                var planPage = {}
                Promise.all([promise_plans_api, promise_translation_api]).then(function(data) {
                    planPage.toiplusplan = data[0].data.subscriptions[0];
                    try{console.log("CHANGING NATIV PLANID", nativePayment.config_native.planid,data[0].data.subscriptions[0].plans[0].planId);
                        nativePayment.config_native.planid=data[0].data.subscriptions[0].plans[0].planId}catch(e){}
                    // if(data[0].data.subscriptions[1])
                    // {
                    //     planPage.timesprimeplan = data[0].data.subscriptions[1]?data[0].data.subscriptions[1]:{};
                    // }
                    planPage.translation = data[1].planPage;
                    var message = data[1].planPage.subscriptionStatus[prc];
                    require(["tiljs/login","tiljs/cookie"], function(login,cookie) {
                        //console.log("************",prc)
                        var user = login.getUser();
                        //var ssoid = cookie.get("ssoid") || cookie.get("ssoId");
                        planPage.loggedin = true;
                        planPage.prc=prc;
                        // if (user && ssoid) {
                        //     planPage.loggedin = true;
                        // } else {
                        //     planPage.loggedin = false;
                        // }
                        renderTemplate(config_native.plan_popup_script, planPage);
                        loadUserStatusMessage(config_native.plan_popup_script, message);
                        var prcValue = primePaymentFlow.getPrcCookieValue();
                        gaEvents('','TOIPlus_PlanPage_View','Ps-'+prcValue,1);
                        setbottomheight();
                        bindEvents();
                    })
                })

            }
        
       
        
        function processOrder(planId) {
                return new Promise(function(resolve, reject) {
                    var planId = 6;
                    const options = {};
                    var domain_processOrder= (window.location.host === 'toidev.indiatimes.com')?'https://stgsubs.timesofindia.com':'https://subs.timesofindia.com';
                    require(["tiljs/cookie"], function(cookie) {
                        options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
                        options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
                        //options.orderType = 'SUBSCRIPTION';
                        options.orderType = nativePayment.config_native.ordertype
                        options.paymentMode = 'JUSPAY';
                        options.productId = planId;
                        nativePayment.makereq_post_body(domain_processOrder+'/subscriptions/order/web/create?cc=IN&fv=100', options).then(function(data) {
                           
                            resolve(data)
                        })
                    })
                })
            }
            
            function triggerMailOnContactUs(target) {
                //console.log('target : ', target);
                require(["tiljs/login"], function(login) {
                    var user = login.getUser();
                    //console.log('user : ', user);
                    var email = user && user.getEmail();
                    var phone;
                    if (email) {
                        email = '%0D%0AUser Email: ' + email;
                    } else {
                        email = '';
                    }
                    if (phone) {
                        phone = '%0D%0AUser phone: ', phone;
                    } else {
                        phone = '';
                    }
                    var orderId='';
                    var orderObj=JSON.parse(localStorage.getItem(nativePayment.config_native.cookie_toi));
                    if(orderObj!=null && typeof orderObj=='object')
                    orderId = orderObj.order_id;
                    var orderIdHead = 'OrderId: ' + orderId;
                    var orderIdSub = 'Order ID: ' + orderId;
                    var ssoId = typeof document !== 'undefined' && document.cookie.match(/(?:\s)?ssoid=(\w+);?/);
                    ssoId = ssoId[1];
                    //console.log('now ssoid: ', ssoId);
                    var userIdHead = 'UserId: ' + ssoId;
                    var userIdSub = 'User ID: ' + ssoId;
                    var browser = '';
                    var userAgent = navigator.userAgent;
                    if (userAgent.indexOf('Chrome') > -1 || userAgent.indexOf('CriOS') > -1) {
                      browser = 'Chrome';
                    } else if (userAgent.indexOf('Firefox') > -1) {
                      browser = 'Firefox';
                    } else if (userAgent.indexOf("MSIE") > -1 || userAgent.indexOf("rv:") > -1 || (!!document.documentMode == true )) {
                      browser = 'IE';
                    } else if (userAgent.indexOf('Safari') > -1) {
                      browser = 'Safari';
                    } else if (
                      userAgent.indexOf('Opera') > -1 ||
                      userAgent.indexOf('OPR') > -1
                    ) {
                      browser = 'Opera';
                    }
                    var device = "Desktop";
                    var isTablet = /(?:ipad|tab)/i.test(navigator.userAgent || navigator.vendor || window.opera);
                    if (isTablet) {
                        device = "tablet";
                    }
                    var subjectPreText = target.getAttribute('data-emailTxt');
                    var triggerPage = target.getAttribute('data-popup');
                    triggerPage = 'Trigger Page: ' + triggerPage;
                    //console.log('In triggerMailOnContactUs, orderId : ', orderId, '-- ssoid : ', ssoId, '-- browser : ', browser, '-- isTablet : ', isTablet, '-- device : ', device, '-- subjectPreText : ', subjectPreText, '-- triggerPage : ', triggerPage, '-- email : ', email);
                    var mail = 'mailto:toipluscare@timesinternet.in?subject=' + subjectPreText + ' | ' + device + ' | ' + browser + ' | ' + userIdHead + ' | ' + orderIdHead +
                    '&body=%0D%0A%0D%0A-----------------------%0D%0APlease type your email above the line,' + 
                    ' below information is needed to address your issue in more detail.%0D%0APlease do not delete/modify this information.%0D%0A%0D%0A' + 
                    'Device: ' + device + '%0D%0ABrowser: ' + browser + '%0D%0A' + userIdSub + email + phone + '%0D%0A' + triggerPage + '%0D%0A' + orderIdSub + '%0D%0A';
                    window.location.href = mail;
                });
            }
            
            function getClientIdCookieValue() {
                var value = `; ${document.cookie}`;
                var parts = value.split(`; _ga=`);
                var _gaCookie = null;
                if (parts.length === 2){ 
                    _gaCookie = parts.pop().split(';').shift();
                }
                var _gaArray = [];
                if(_gaCookie){
                    _gaArray = _gaCookie.split('.');
                }
                if(_gaArray.length === 4){
                    return _gaArray[2] + '.' + _gaArray[3];
                }
                return null;
            }

            function choosePlan(planid, unlockType) {
                require(["tiljs/cookie"], function(cookie) {
                    if((window.plsObj.isToiPPSUser || window.plsObj.isCredPPSUser) && nativePayment.config_native.ordertype =="PAY_PER_ARTICLE"){return false;}
                    var options = {};
                    options.ssoId = cookie.get("ssoid") || cookie.get("ssoId");
                    options.ticketId = cookie.get("TicketId") || cookie.get("ticket");
                    var currentUrl = window.location.href;
                    var currUrlObj = new URL(currentUrl);
                    options.utmParams = {
                        source: currUrlObj.searchParams.get('utm_source') || null,
                        medium: currUrlObj.searchParams.get('utm_medium') || null,
                        campaign: currUrlObj.searchParams.get('utm_campaign') || null,
                      };
                    var init_promise = nativePayment.makereq_post_body(nativePayment.config_native.initiatepayment_api, options,1);

                    var options2 = {};
                    options2.ssoId = cookie.get("ssoid") || cookie.get("ssoId");
                    options2.ticketId = cookie.get("TicketId") || cookie.get("ticket");
                    options2.orderType = nativePayment.config_native.ordertype || 'SUBSCRIPTION';
                    if(unlockType === 'credUnlock'){
                        options2.paymentMode = 'CRED';
                    }
                    else{
                        options2.paymentMode = 'JUSPAY';
                    }
                    options2.productId = planid;
                    options2.msid = (!!window.msid)? window.msid.toString() : null;
                    options2.returnUrl = window.location.href.split('?')[0];
                    options2.utmParams = {
                        source: currUrlObj.searchParams.get('utm_source') || null,
                        medium: currUrlObj.searchParams.get('utm_medium') || null,
                        campaign: currUrlObj.searchParams.get('utm_campaign') || null,
                      };
                    if(unlockType === 'credUnlock'){
                        options2.credParams = {
                            access_token: nativePayment.config_native.access_token || null,
                            refresh_token: nativePayment.config_native.refresh_token || null,
                        };
                    }
                    let nudgeClickInfo;
                    if(typeof window !== 'undefined' && window.localStorage && localStorage.getItem('nudgeClickInfo')){
                        nudgeClickInfo = JSON.parse(localStorage.getItem('nudgeClickInfo'));
                    }
                    if(nudgeClickInfo){
                        options2.nudgeName = nudgeClickInfo.nudgeName;
                        options2.initiateMsId = nudgeClickInfo.msid || nativePayment.config_native.msid;
                    }else{
                        options2.nudgeName = null;
                    }
                    options2.clientId = getClientIdCookieValue() || null;
                    options2.initiationPage = 'STORY';
                    options2.storyTitle = toiprops?.articleTitle || null;
                    options2.prcStatus = primePaymentFlow.getPrcCookieValue();
                    options2.gstAddressRequired = !!sessionStorage.getItem('showGstfromNode');
                    const grxid = cookie.get('_grx') || '';
                    options2.grxId = grxid || null;
                    var processorder_promise = nativePayment.makereq_post_body(nativePayment.config_native.createorder_api, options2,1);

                    Promise.all([init_promise, processorder_promise]).then(function(data) {
                        var paymentInitData = data[0];
                        var orderData = data[1];
                       // console.log(data);
                       if(orderData && (orderData.status === "SUCCESS" || orderData.status === "success")){
                           var obj = {};
                            obj.order_id = orderData.data.orderDetails.orderId;
                            localStorage.setItem(nativePayment.config_native.cookie_toi, JSON.stringify(obj));
                            new Promise(function(resolve, reject) {
                                resolve(window.PIL.load('1', paymentInitData.data));
                            }).then(function(JuspayPaymentsSdk) {
                                if(!window.plsObj.isToiPPSUser && !window.plsObj.isCredPPSUser){
                                    var prcValue = getPrcCookieValue();
                                    window.ga('set', 'dimension50',obj.order_id);
                                    if(planid){
                                        firePurchaseTypeDimension();
                                    }
                                    var remainingDays = sessionStorage ? sessionStorage.getItem("remainingDays") : null ;
                                    var inPreExpirePeriod = sessionStorage.getItem("inPreExpirePeriod") ? sessionStorage.getItem("inPreExpirePeriod") : false;
                                    var inGracePeriod = sessionStorage.getItem("inGracePeriod") ? sessionStorage.getItem("inGracePeriod") : false;
                                    var expirydate = sessionStorage.getItem("expirydate") && sessionStorage.getItem("expirydate")
                                    if (remainingDays > 0) {
                                        if (inGracePeriod) {
                                          window.ga('set', 'dimension52',remainingDays);
                                          sessionStorage.setItem('previousExpiryDate', expirydate);
                                        } else if (inPreExpirePeriod) {
                                          window.ga('set', 'dimension51',remainingDays);
                                          sessionStorage.setItem('previousExpiryDate', expirydate);
                                        }
                                      }
                                    nativePayment.gaEvents('','TOIPlus_OrderCreate','Ps-'+prcValue,1);
                                    localStorage.removeItem('nudgeClickInfo')
                                     if(unlockType !== 'credUnlock'){
                                        nativePayment.gotoPaymentPage(JuspayPaymentsSdk, orderData.data);
                                     }else{
                                         window.location.reload();
                                     }
                                }
                            })
                       }else if(localStorage.getItem("cred_flow_initiated")){
                            localStorage.setItem('cred_pps_error',"PaymentFailure");
                            localStorage.removeItem('cred_access_token');
                            localStorage.removeItem('cred_refresh_token');
                            nativePayment.closePopups();
                            nativePayment.collectParametersforPopup('PAYMENT_FAILED').then(function(data) {
                                    nativePayment.displayPopup(data);
                                    var prcValue = primePaymentFlow.getPrcCookieValue();
                                    require(["tiljs/login"], function(login) {
                                        var user = login.getUser();
                                        if(user){
                                            nativePayment.gaEvents('', 'TOIPlus_Payment_fail_CRED_view' ,'Ps-'+prcValue,1);
                                        }else{
                                            nativePayment.gaEvents('', 'TOIPlus_Payment_fail_CRED_view' ,'Ps--1',1);
                                        }
                                    })
                                    localStorage.removeItem("cred_flow_initiated");
                            });
                        }
                    })
                    .catch(function(error){
                        if(localStorage.getItem("cred_flow_initiated")){
                            localStorage.setItem('cred_pps_error',"PaymentFailure");
                            localStorage.removeItem('cred_access_token');
                            localStorage.removeItem('cred_refresh_token');
                            nativePayment.closePopups();
                            nativePayment.collectParametersforPopup('PAYMENT_FAILED').then(function(data) {
                                    nativePayment.displayPopup(data);
                                    var prcValue = primePaymentFlow.getPrcCookieValue();
                                    require(["tiljs/login"], function(login) {
                                        var user = login.getUser();
                                        if(user){
                                            nativePayment.gaEvents('', 'TOIPlus_Payment_fail_CRED_view' ,'Ps-'+prcValue,1);
                                        }else{
                                            nativePayment.gaEvents('', 'TOIPlus_Payment_fail_CRED_view' ,'Ps--1',1);
                                        }
                                    })
                                    localStorage.removeItem("cred_flow_initiated");
                            });
                        }
                    })
                });
            }

            function gotoPaymentPage(JuspayPaymentsSdk, orderData) {
                const bundle = {};
                const {
                    PaymentConstants
                } = JuspayPaymentsSdk;
                const juspayProcessData = orderData?.juspayProcessData;
                bundle[PaymentConstants.MERCHANT_KEY_ID] =
                    juspayProcessData?.payload?.merchantKeyId;
                bundle[PaymentConstants.CLIENT_ID] = juspayProcessData?.payload?.clientId;
                bundle[PaymentConstants.ORDER_DETAILS] =
                    juspayProcessData?.payload?.orderDetails;
                bundle[PaymentConstants.SIGNATURE] = juspayProcessData?.payload?.signature;
                //bundle[PaymentConstants.ENV] = juspayProcessData?.payload?.environment;
                bundle.environment = juspayProcessData?.payload?.environment;
                bundle[PaymentConstants.CUSTOMER_ID] =
                    juspayProcessData?.payload?.customerId;
                bundle.return_url =
                    'https://spmdev.timesofindia.com?screen=congrats';
                //console.log('***** gotoPaymentPage', JuspayPaymentsSdk, orderData, bundle);
                JuspayPaymentsSdk.startApp(bundle);
            };

		
        function onMoreButtonClick() {
             $("#more-plan-button").addClass('hide');
             $("#more-plan").removeClass('hide');
        }
        function onErrorHandler(e, fallback, view) {
        }

        var removePlanPoupup = function() {
            if ($(config_native.selector_planPage).length > 0){
                $(config_native.selector_planPage).fadeOut("fast");
            }
        }
        
        function hideLogoutToast() {
                $(config_native.container_toast).fadeOut('slow', function() {
                    $(this).html("")
                })
        }
        
        var showLogoutToast = function() {
            $('#logout-toast-popup').html(
                '<div class="logout_login"><div class="toast">Logged out successfully.<button class="close_btn" id="close-button-toast-popup"></button></div></div>').delay( 2000 ).fadeIn(1000);
                
                setTimeout(function() {
                    hideLogoutToast()
                }, 3000)
                
             document.getElementById("close-button-toast-popup").addEventListener("click", function(e) {
                        e.preventDefault();
                       $("#logout-toast-popup").css('display', 'none');
                       $(document.body).removeClass('scroll-block');
                });      
                
        }
        function callBAck(){
            $(config_native.selector_planPage).fadeOut("fast");
            primePaymentFlow.loginUser(login);
            nativePayment.showLogoutToast();
        }
        function bindGAEvents(){
             $(config_native.selector_planPage).on('click', function(e) {
    	            //e.preventDefault();
    	            var prcValue = getPrcCookieValue();
    	            if(e.target.id=== config_native.selector_faq)
                    nativePayment.gaEvents('','TOIPlus_PlanPage_Click_faq','Ps-'+prcValue+'/TOIPlusPAID',1)
                    if(e.target.id=== config_native.selector_tc)
                    nativePayment.gaEvents('','TOIPlus_PlanPage_Click_T&C','Ps-'+prcValue+'/TOIPlusPAID',1)
                    if(e.target.id=== config_native.selector_privacy)
                    nativePayment.gaEvents('','TOIPlus_PlanPage_Click_privacy','Ps-'+prcValue+'/TOIPlusPAID',1)
                    if(e.target.id=== config_native.selector_already_subscribed)
                    nativePayment.gaEvents('','TOIPlus_PlanPage_Click_ExistingMemberLogin','Ps-'+prcValue+'/TOIPlusPAID',1)
                    if(e.target.id=== config_native.selector_contact_us){
                        nativePayment.gaEvents('','TOIPlus_PlanPage_Click_contact_us','Ps-'+prcValue+'/TOIPlusPAID',1)
                    }
	            })
        }
         function newPlanpageMetaData(data={}, userObj={}){
  
          var unifiedNodes = data  || {};
          return {
            url : 'https://buy.indiatimes.com/toi/plans' || '',
            dealCode : unifiedNodes.dealCode || '',
            planCode :  unifiedNodes.planGroup || '',
            planGroupAutoSelected :  unifiedNodes.planGroupAutoSelected || '',
            planCodeAutoSelected :  unifiedNodes.planCodeAutoSelected || '',
            nudgePlanGroupAutoSelected :  unifiedNodes.nudgePlanGroupAutoSelected || '',
            nudgePlanCodeAutoSelected :  unifiedNodes.nudgePlanCodeAutoSelected || '',
            otherPlanCodes :  unifiedNodes.otherPlanCodes || '',
            platform : 'TOI',
            productCode: 'TOIPLUS',
            ticketId: userObj.tempTicket,
            acqSubSource: data?.acqSubSource
          }
        }
        
         function doNotAppendUrlIfEmpty(url, arrayKeys, arrayValues){
          if (!(url.indexOf('?') > -1)) {
            url = `${url || NEW_PLANPAGE_URL}`;
          }
        
          // for (let i = 0; i < arrayKeys.length; i += 1) {
          var i = 0;
        //   var j = 0;
          while (i < arrayKeys.length) {
            if (arrayValues[i]) {
              if (!(url.indexOf('?') > -1)) {
                url += arrayValues[i] ? `?${arrayKeys[i]}=${arrayValues[i]}` : '';
              } else {
                url += arrayValues[i] ? `&${arrayKeys[i]}=${arrayValues[i]}` : '';
              }
            //   j += 1;
            }
            i += 1;
          }
          return url;
        }
        function getEncTicket(){
            return new Promise(function(resolve){
                require(["tiljs/login", "tiljs/cookie"], function(login, cookie) {
                var jssoCrosswalkObj = new JssoCrosswalk("toi", "web");
                    jssoCrosswalkObj.getValidLoggedInUser(function(response){
    			        if (response.code=='200' && response.data){
    			            var userobj = {
    			                tempTicket: response.data.encTicket
    			                
    			            }
    			            resolve(userobj);
    			        }    
                    });
                });
            });
        }
        
         function redirectToNewPlanpage(obj){
          var currentUrl = window.location.href;
          var currUrlObj = new URL(currentUrl);
          var utmSource = currUrlObj.searchParams.get('utm_source') || '';
          var utmMedium = currUrlObj.searchParams.get('utm_medium') || '';
          var utmCampaign = currUrlObj.searchParams.get('utm_campaign') || '';
          var grxId = comgetCookie("_grx") || '';
          var acqSubSource = obj?.acqSubSource || 'TOIWeb';
        
          var arrayKeys = ['utm_source', 'utm_medium', 'utm_campaign', 'product', 'productCode', 'dealCode', 'groupCodes', 'plt', 'defaultGroupName', 'defaultPlanCode', 'nudgePlanGroupAutoSelected', 'nudgePlanCodeAutoSelected', 'otherPlans','grxId', 'acqSubSource','ticketId', 'ru'];
          var arrayValues = [utmSource, utmMedium, utmCampaign, obj.platform, obj.productCode, obj.dealCode, obj.planCode, obj.platform, obj.planGroupAutoSelected, obj.planCodeAutoSelected, obj.nudgePlanGroupAutoSelected, obj.nudgePlanCodeAutoSelected, obj.otherPlanCodes,grxId, acqSubSource, obj.ticketId, encodeURIComponent(currentUrl)];

          url = doNotAppendUrlIfEmpty(obj.url, arrayKeys, arrayValues);
          return url;
        }
        
        function bindEvents(){
                $(config_native.selector_planPage).on('click', '.close_btn', function(e) {
    	            e.preventDefault();
    	            $('.plan-popup').removeClass("active");
    	            $(config_native.selector_planPage).fadeOut("fast");
    	            $(document.body).removeClass('scroll-block');
	            })
	            if(!config_native.isBindEvents){
	                 bindGAEvents();
	                 config_native.isBindEvents=true;
	            }
	           
	           
	           function choiceCheck(e) {
	               var $e = $(e.target);
                    var payEle = $($e).parents('.option');
                    var type = $(payEle).attr("type") ? $(payEle).attr("type") : "" ;
                    // debugger;
                    
                    $('.option').removeClass("activePlan");
                    $(payEle).addClass("activePlan");
                    $(`#largeBtn${type}`).text($($e).attr('data-largeBtn'));
                    var link = $($e).attr('data-link');
                    if (link === "payperstory") {
                        $(`#largeBtn${type}`).attr("href", 'javascript:void(0)');
                        $(`#largeBtn${type}`).attr('data-prime', 'login-payperstory');
                        $(`#largeBtn${type}`).attr('data-gacta', 'pps-radio');
                    } else if (link === 'credunlock') {
                        $(`#largeBtn${type}`).attr("href", 'javascript:void(0)');
                        $(`#largeBtn${type}`).attr('data-prime', 'login-credunlock');
                        $(`#largeBtn${type}`).removeAttr('data-gacta');
                    } else {
                        $(`#largeBtn${type}`).removeAttr('data-gacta');
                        $(`#largeBtn${type}`).attr("href", $($e).attr('data-link'));
                        $(`#largeBtn${type}`).attr('data-prime', 'login-1yearplan');
                    }
                }
                
                
                $('.payperstoryview [type="radio"]').on('click', function(e){
                    choiceCheck(e);
                });
	            // GA EVENTS FOR NEW STORY BLOCKERS
	            $('#defaultplan').on('click', function(e){
	                var prcValue = getPrcCookieValue();
	                require(["tiljs/login"], function(login) {
                        var user = login.getUser();
                        if (user){
                            nativePayment.gaEvents('','prime-login_blocker_Radio_Annual','Ps-'+prcValue,1)
                        }
                        else{
                            nativePayment.gaEvents('','prime-login_blocker_Radio_Annual','Ps--1',1)
                        }
                    });
                });
        	    $('#payperstory').on('click', function(e){
	                var prcValue = getPrcCookieValue();
	                require(["tiljs/login"], function(login) {
                        var user = login.getUser();
                        if (user){
                            nativePayment.gaEvents('','prime-login_blocker_Radio_PPS','Ps-'+prcValue,1)
                        }
                        else{
                            nativePayment.gaEvents('','prime-login_blocker_Radio_PPS','Ps--1',1)
                        }
                    });
                });
                $('#credpayoption').on('click', function(e){
	                var prcValue = getPrcCookieValue();
	                require(["tiljs/login"], function(login) {
                        var user = login.getUser();
                        if (user){
                            nativePayment.gaEvents('','prime-login_blocker_Radio_Cred','Ps-'+prcValue,1)
                        }
                        else{
                            nativePayment.gaEvents('','prime-login_blocker_Radio_Cred','Ps--1',1)
                        }
                    });
                });
                
                //For more button    
                // document.getElementById("more-plan-button").addEventListener("click", function(e) {
                //         e.preventDefault();
                //       $("#more-plan-button").css('display', 'none');
                //         $("#more-plan").removeClass('hide');
                // });     
               
               //for less button
                //   document.getElementById("less-plan-button").addEventListener("click", function(e) {
                //           e.preventDefault();
                //           $("#more-plan-button").css('display', '');
                //             $("#more-plan").addClass('hide');
                //     }); 
                   $(document).off("click",'[data-prime="logoutandlogin"]').on('click','[data-prime="logoutandlogin"]',             function (e) {
                     e.preventDefault();
                     //toiprops.directSubscribe=true;
                      var prcValue = getPrcCookieValue();
                     require(["tiljs/login"], function(login) {
                         var user = login.getUser();
                        if(user){
                            nativePayment.gaEvents('','prime-login_blocker|LoginCTA','Ps-'+prcValue,1)
                            login.logout();
                            setTimeout(function(){
                                $(config_native.selector_planPage).fadeOut("fast");
                                //primePaymentFlow.loginUser(login);
                                login.login();
                                setTimeout(function() {
                                    nativePayment.showLogoutToast()
                                }, 1000);
                                // nativePayment.showLogoutToast();
                            }, 2000);
                                
                        }
                        else{
                            nativePayment.gaEvents('','prime-login_blocker|LoginCTA','Ps--1',1)
                            login.login();
                           // primePaymentFlow.loginUser(login);
                            $(config_native.selector_planPage).fadeOut("fast");
                        }
                        var clickedTarget = e.target.getAttribute('data-source');
                        if(clickedTarget && clickedTarget === 'popup-base'){
                            nativePayment.fireGA4({
                                action: 'click',
                                item_category4: e.target.innerText || '',
                                item_category3: 'paywall_bottomsheet_blocker_alreadySubscribed',
                              })
                        } else {
                            nativePayment.fireGA4({
                                action: 'click',
                                item_category4: e.target.innerText || '',
                                item_category3: 'paywall_blocker_alreadySubscribed',
                              })
                        }
                     });
                    });
                    
                    $(document).off("click",'[data-prime="toipnewPlanpageSubscribe"]').on('click','[data-prime="toipnewPlanpageSubscribe"]',async function (e) {
                        
                     e.preventDefault();
                     
                    
                     
                     var prcValue = getPrcCookieValue();
                     console.log('sdsdsdsdsd', window.unifiedNodes);
                      
                         
                              require(["tiljs/login"], function(login) {
                                    var user = login.getUser();
                                    var prcValue = getPrcCookieValue();
                                    var grxParams = [
                                      'paywall', {
                                        client_source: 'cdp',
                                        event_nature: 'click',
                                        event_category: 'subscription',
                                        cta_text: e?.target?.innerText.trim(),
                                        // event_section: 'storypage_paywall_blocker',
                                        // event_sub_section: '',
                                        // landing_l1: 'plan_page',
                                        // landing_l2: '',
                                        // landing_l3: '',
                                        // landing_page_template: 'plan_page',
                                        // landing_url: redirectToNewPlanpage(
                                        //   newPlanpageMetaData(window.unifiedNodes['prc' + prcValue]),
                                        // ),
                                        // position: 3,
                                        unique_subscription_id: comgetCookie("_grx") + '_' + (new Date()).getTime(),
                                      },
                                    ];
                                    var cdpInfo = {}; 
                                    if (typeof window.grx !== 'undefined' && typeof window?.grx_module?.hitPaywallEventReact === 'function') {
                                      window.grx_module.hitPaywallEventReact(...grxParams);
                                       cdpInfo = window.grx_module.getCdpInfo() || {};
                                    } else {
                                      window.Times.setGRXDataInLocalStorage('GRX_QUEUE_EVENT', {
                                        eventName: grxParams[0],
                                        payload: grxParams[1],
                                      });
                                    }
                                    var cdpParamsObj = grxParams[1] || {};
                                    var item_category3 = 'paywall_blocker_cta_main';
                                     var clickedTarget = e.target.getAttribute('data-source');
                                    if(clickedTarget && clickedTarget === 'popup-base'){
                                        item_category3 = 'paywall_bottomsheet_blocker_cta_main';
                                    } 
                                    
                                    var dataToBepassed = {
                                         accessiblefeatures: window.userPrcData?.accessibleFeatures,
                                         msid: window.msid,
                                         analytics_cdp: Object.assign({eventName: grxParams[0]}, cdpParamsObj, cdpInfo),
                                         objUserData: {
                                            email: typeof user?.getEmail !== 'undefined'? user.getEmail() : '',
                                            fname: typeof user?.getFirstName !== 'undefined'? user.getFirstName() : ''
                                         },
                                         ga4Items: nativePayment.fireGA4({
                                            action: 'click',
                                            item_category4: e.target.innerText || '',
                                            item_category3: item_category3,
                                          })
                                        };
                                    // nativePayment.collectGaMap({
                                    //     paywall_cta: {
                                    //       category: 'Subscription Flow TOI',
                                    //       action: 'Flow Started',
                                    //       label: `Ps-${!(getCookie('ssoid') || getCookie('ssoId')) ? -1 : prcValue}`,
                                    //       doNotWait: true,
                                    //       otherParams: dataToBepassed,
                                    //     },
                                    //   });
                                    //  nativePayment.fireCollectedGa(window.userPrcData);
                                     sendDataToGAWithGRX(dataToBepassed).then(function(){
                                         if (user){
                                         nativePayment.gaEvents('','prime-login_blocker_Radio_CTA','Ps-'+prcValue,1);
                                        getEncTicket().then(function(innerData){
                                             window.location.href = redirectToNewPlanpage(newPlanpageMetaData({...window.unifiedNodes['prc' + prcValue],acqSubSource: 'paywall_blocker_cta_main' + '_' + window.msid}, innerData));
                                        });
                                         
                                    }
                                    else{
                                        nativePayment.gaEvents('','prime-login_blocker_Radio_CTA','Ps--1',1);
                                          window.location.href = redirectToNewPlanpage(newPlanpageMetaData({...window.unifiedNodes['prc' + prcValue],acqSubSource: 'paywall_blocker_cta_main'+ '_' + window.msid}));
                                    }
                                })
                                    
                                });
                           
                          
                    });
                    
                    $(document).off("click",'[data-prime="toiofferSubscribe"]').on('click','[data-prime="toiofferSubscribe"]', async function (e) {
                     e.preventDefault();
                     
                     var prcValue = getPrcCookieValue();
                     var unifiedNodes = window.unifiedNodes['prc' + prcValue];
                     
                     
                     if(unifiedNodes.type === 'newPlanpage'){
                        //   var sendDataToGAWithGRXStatus =  await sendDataToGAWithGRX({})
                        //   if(sendDataToGAWithGRXStatus){
                                
                                require(["tiljs/login"], function(login) {
                                    var user = login.getUser();
                                    
                                    
                                    var grxParams = [
                                      'paywall', {
                                        client_source: 'cdp',
                                        event_nature: 'click',
                                        event_category: 'subscription',
                                        cta_txt: e?.target?.innerText.trim(),
                                        // event_section: 'storypage_paywall_blocker',
                                        // event_sub_section: '',
                                        // landing_l1: 'plan_page',
                                        // landing_l2: '',
                                        // landing_l3: '',
                                        // landing_page_template: 'plan_page',
                                        // landing_url: nativePayment.redirectToNewPlanpage(
                                        //   nativePayment.newPlanpageMetaData(window.unifiedNodes['prc' + prcValue]),
                                        // ),
                                        // position: 3,
                                        unique_subscription_id: comgetCookie("_grx") + '_' + (new Date()).getTime(),
                                      },
                                    ];
                                    var cdpInfo = {};
                                    var item_category3 = 'paywall_blocker_cta_secondary';
                                     var clickedTarget = e.target.getAttribute('data-source');
                                    if(clickedTarget && clickedTarget === 'popup-base'){
                                        item_category3 = 'paywall_bottomsheet_blocker_cta_secondary';
                                    } 
                                    if (typeof window.grx !== 'undefined' && typeof window?.grx_module?.hitPaywallEventReact === 'function') {
                                      window.grx_module.hitPaywallEventReact(...grxParams);
                                       cdpInfo = window.grx_module.getCdpInfo() || {};
                                    } else {
                                      window.Times.setGRXDataInLocalStorage('GRX_QUEUE_EVENT', {
                                        eventName: grxParams[0],
                                        payload: grxParams[1],
                                      });
                                    }
                                    var cdpParamsObj = grxParams[1] || {};
                                    var dataToBepassed = {
                                         accessiblefeatures: window.userPrcData?.accessibleFeatures,
                                         msid: window.msid,
                                         analytics_cdp: Object.assign({eventName: grxParams[0]}, cdpParamsObj, cdpInfo),
                                         objUserData: {
                                            email: typeof user?.getEmail !== 'undefined'? user.getEmail() : '',
                                            fname: typeof user?.getFirstName !== 'undefined'? user.getFirstName() : ''
                                         },
                                         ga4Items: nativePayment.fireGA4({
                                            action: 'click',
                                            item_category4: e.target.innerText || '',
                                            item_category3: item_category3,
                                          })
                                        };
                                    
                                     sendDataToGAWithGRX(dataToBepassed).then(function(){
                                          if (user){
                                                nativePayment.gaEvents('','prime-login_blocker_Radio_CTA','Ps-'+prcValue,1);
                                                getEncTicket().then(function(innerData){
                                                     window.location.href = redirectToNewPlanpage(newPlanpageMetaData({...unifiedNodes,acqSubSource:'paywall_blocker_cta_secondary'+ '_' + window.msid}, innerData));
                                                });
                                                 
                                            }
                                            else{
                                                nativePayment.gaEvents('','prime-login_blocker_Radio_CTA','Ps--1',1);
                                                  window.location.href = redirectToNewPlanpage(newPlanpageMetaData({...unifiedNodes,acqSubSource:'paywall_blocker_cta_secondary'+ '_' + window.msid}));
                                            }
                                         
                                     }); 
                                });
                        //   }
                     } else {
                         window.location.href = e.target.getAttribute('href');
                     }
                     
                    });
        }
        
        
        var checkForSSOInSavingUserObjAndUpdate = function (
            obj,
            forceExhaustCount = false,
            ) {
            var ssoId = obj.ssoId;
            var ticketId = obj.ticketId;
            var usersSavingData =
              localStorage.getItem('usersSavingData') &&
              localStorage.getItem('usersSavingData') !== null &&
              JSON.parse(localStorage.getItem('usersSavingData'));
          
            if (
              usersSavingData &&
              Object.keys(usersSavingData).length > 0 &&
              usersSavingData[ssoId] &&
              !forceExhaustCount
            ) {
              usersSavingData[ssoId].ticketId = ticketId;
              usersSavingData[ssoId].ssoId = ssoId;
          
              if (obj.articleCount) {
                usersSavingData[ssoId].articleCount = obj.articleCount;
              }
              if (obj.plusArticleCount) {
                usersSavingData[ssoId].plusArticleCount = obj.plusArticleCount;
              }
              usersSavingData[ssoId].ticketId = ticketId;
              localStorage.setItem('usersSavingData', JSON.stringify(usersSavingData));
              return usersSavingData[ssoId];
            }
            var singleUserSavingData = usersSavingData || {};
          
            singleUserSavingData[ssoId] = {
              ssoId,
              ticketId,
              articleCount: 0,
              plusArticleCount: 0,
              stored_at: new Date(),
            };
            localStorage.setItem('usersSavingData', JSON.stringify(singleUserSavingData));
            return null;
          };
        var checkTimesPrimeAndSaveData = function(primeData) {
            require(['tiljs/cookie'], function(cookie){
                var ssoId = cookie.get('ssoid') || cookie.get('ssoId');
                var ticketId = cookie.get('TicketId') || cookie.get('ticket') ||  cookie.get('ticketId');
                if (window.localStorage && primeData?.accessType === 'TIMESPRIME') {
                  // create saving users object key value pair  [ssoid] : {};
                  checkForSSOInSavingUserObjAndUpdate({ ssoId, ticketId });
                }
            });
      };
        
        var timesPrimeSavingApi = function (isPrime, msid){
            require(['tiljs/cookie'], function(cookie){
                var date = new Date();
                var ssoId = cookie.get('ssoid') || cookie.get('ssoId');
                var ticketId = cookie.get('TicketId') || cookie.get('ticket') ||  cookie.get('ticketId');
                var getUserSavingObject = checkForSSOInSavingUserObjAndUpdate({
                  ssoId,
                  ticketId,
                });
                if (getUserSavingObject) {
                  if (msid) {
                    if (isPrime) {
                      getUserSavingObject.plusArticleCount += 1;
                    } else {
                      getUserSavingObject.articleCount += 1;
                    }
                  }
                  var dateComp = timeDifference(
                    new Date(getUserSavingObject.stored_at),
                    date,
                  );
                  checkForSSOInSavingUserObjAndUpdate(getUserSavingObject);
                  if (dateComp || sessionStorage.getItem('savingApiCallTest')) {
                    // comparing two dates if greater than 24 hours
                    var object = {
                      user: {
                        ticketId,
                        ssoId,
                      },
                      otherDetails: {
                        plusArticleCount: getUserSavingObject.plusArticleCount,
                        articleCount: getUserSavingObject.articleCount,
                      },
                    };
                    nativePayment.makereq_post_body(
                        'https://api.timesprime.com/prime/external/updateTOISavings',
                        object
                      )
                      .then(res => {
                        if (res && res.success === true) {
                          checkForSSOInSavingUserObjAndUpdate({ ssoId, ticketId }, true);
                        }
                      });
                  }
                }
            });
        };
        var savingCallIfTimesPrime = function (
        isArticleshowV2,
        isPrimeArticle,
        msid,
          ){
            if (!window.callSavingApiOnce) {
              window.callSavingApiOnce = true;
              //fetchUserSubscriptionStatusFromApi().then(data => {
                //if (data?.data?.accessType === 'TIMESPRIME') {
                  if (!isArticleshowV2) {
                    timesPrimeSavingApi(false, msid);
                  } else if (isArticleshowV2 && isPrimeArticle) {
                    timesPrimeSavingApi(true, msid);
                  } else if (isArticleshowV2) {
                    timesPrimeSavingApi(false, msid);
                  }
                //}
              //});
            }
          };
            
		    function init() {
                $(function() {
                    appendScriptToHead({
                        scriptUrl: 'https://payments.juspay.in/web/PIL.js'
                    });
                })
                function StartGstFlow(){
                     return new Promise(function(resolve, reject){
        		          //require(['jquery','tiljs/event', "tiljs/cookie"],function($, event, cookie) {
        		          //      var testObj = {'test1': '111'};
        		                
        		          //          var options = {}
                    //                     options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
                    //                     options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
                    //                   if(options.ssoId!=''){ 
                    //                         // nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                    //                         //     if(data){
                    //                         //          setTimeout(function(){
                    //         		              //      event.publish("gst.form", data);
                    //         		              //   },1000);
                    //                         //     }
                    //                         // });
                    //                         var promise_pauth = nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api,options);
                    //                         var promise_nudges = nativePayment.makereq(nativePayment.config_native.toiplus_json,1);
                    //                         Promise.all([promise_pauth, promise_nudges]).then(function(data) {
                    //                             if(data[0] && data[0].gstAddressUpdateRequired && data[1]){
                    //                             // if(data){
                    //                             const obj = {};
                    //                                 obj.prcData = data[0];
                    //                                 obj.nudgeData = data[1].gstForm;
                    //                                  setTimeout(function(){
                    //         		                    event.publish("gst.form", obj);
                    //         		                 },1000);
                    //                             }else{
                    //                                 resolve("success");
                    //                             }
                    //                         })
                                            
        		          //              }
        		                
        		               
        		                
        		          //      event.subscribe("gst.submitted",function(obj) {
                    //                 console.log('obj', obj);
                    //                 resolve("success");
                    //           });
                                
                    //         });
        		          resolve("success");
        		          // call prc api
        		      })
        		  }
        		StartGstFlow().then(function(resp){
                        if(resp === 'success'){
                            if (document.location.href.indexOf("transcode") >= 0) {
                                
                                        const urlSearchParams = new URLSearchParams(window.location.search);
                                        const params = Object.fromEntries(urlSearchParams.entries());
                                        localStorage.setItem(nativePayment.config_native.cookie_toi, JSON.stringify({
                                            order_id: params.transcode,
                                        }))
                                        if(localStorage.getItem(nativePayment.config_native.cookie_toi)){
                                        // sessionStorage.removeItem('already_prime_user');  //incase payment fails and prc 1 user
                                        var toi_cookie = JSON.parse(localStorage.getItem(nativePayment.config_native.cookie_toi)).order_id
                                        // nativePayment.collectParametersforPopup('LOADER').then(function(data) {
                                                    // nativePayment.displayPopup(data);
                                                 
                                                //   setTimeout(function() {
                                                      //nativePayment.fetch_order_status(toi_cookie, 0) // 0 is retry count
                                                //   }, 100)
                                        
                                            //   });
                                        }
                            }
                            
                            else if(localStorage.getItem("paymentSuccess")) {
                               sessionStorage.removeItem('already_prime_user'); 
                               var toi_cookie_value = localStorage.getItem('toi_cookie');
                               if(toi_cookie_value) {
                                nativePayment.collectParametersforPopup('LOADER').then(function(data) {
                                            nativePayment.displayPopup(data);
                                         
                                           setTimeout(function() {
                                              //nativePayment.fetch_order_status(toi_cookie_value, 0) // 0 is retry count
                                           }, 100)
                                
                                      });   
                               }
                            }
                            else if (sessionStorage.getItem("already_pps_user") && localStorage.getItem("cred_flow_initiated")) {
                               if(nativePayment){
                                    require(['tiljs/cookie'], function(cookie){
                                        var options = {}
                                        options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
                                        options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
                                        nativePayment.closePopups();
                                         nativePayment.collectParametersforPopup('EXISTING_PPS_USER',options).then(function(data) {
                                            nativePayment.displayPopup(data);
                                            toiPlusConfigRunner()
                                            sessionStorage.removeItem("already_pps_user");
                                        });
                                    })
                                }
                            }
                            else if (localStorage.getItem("cred_access_token") && localStorage.getItem("cred_flow_initiated")) {
                                if(localStorage.getItem(nativePayment.config_native.cookie_toi)){
                                var toi_cookie = JSON.parse(localStorage.getItem(nativePayment.config_native.cookie_toi)).order_id
                                nativePayment.collectParametersforPopup('LOADER').then(function(data) {
                                            nativePayment.displayPopup(data);
                                         
                                          setTimeout(function() {
                                              //nativePayment.fetch_order_status(toi_cookie, 0) // 0 is retry count
                                          }, 100)
                                
                                      });
                                      
                                }
                            } else if(sessionStorage.getItem('accessType') && sessionStorage.getItem('accessType') !== null && JSON.parse(sessionStorage.getItem('accessType')) === 'TIMESPRIME'){
                                 var _primeid=$("body").attr("primeid");
                                    var checkIfPrimeArticle = function(){
                                       return _primeid === '100' ||  _primeid === '500';
                                    }
                                    savingCallIfTimesPrime(true, checkIfPrimeArticle(), window.msid)
                            }
                            
                            require(["tiljs/cookie",'tiljs/login'], function(cookie,login) {
                                login.isLoggedIn( function () 
                                {
                                    var options = {}
                        options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
                        options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
                       if(options.ssoId!='' && !sessionStorage.getItem("userPurchaseType")){ 
                        nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                            
                            
                            //console.log("nativePayment.config_native.fetch_plan_status_api", nativePayment.config_native.fetch_plan_status_api,data);
                            window.userPrcData = data;
                            if(data){
                                    nativePayment.setPrcCookieInSession(data);
                                }
                        
                            if(data.accessibleFeatures){
                                    window.permission = data.accessibleFeatures.join(',');
                                }
                            
                            // window.permission = (data.accessibleFeatures!='')? data.accessibleFeatures.join('_'):'';
                            
                            var endate = "";
                            var planName='';
                             if(window.prcNames[data.accessType] && window.prcNames[data.accessType][data.planStatus]){
                                                  window.activePlanName=window.prcNames[data.accessType][data.planStatus];
                                                 sessionStorage.setItem('planName', window.prcNames[data.accessType][data.planStatus]);
                                                 ga('set', 'dimension33', window.prcNames[data.accessType][data.planStatus]);
                                            }
                                            if(data.accessType === 'TIMESPRIME'){
                                                var _primeid=$("body").attr("primeid");
                                                var checkIfPrimeArticle = function(){
                                                   return _primeid === '100' ||  _primeid === '500';
                                                }
                                                savingCallIfTimesPrime(true, checkIfPrimeArticle(), window.msid)
                                            }
                                if(data.planStatus === 5){
                                        window.plsObj.isToiPlusUser = true
                                    }
                                    else if(data.otps && data.otps.length > 0){
                                        for(i=0;i<data.otps.length;i++){
                                            if(data.otps[i].source && data.otps[i].source=="cred" && data.otps[i].msids){
                                                sessionStorage.setItem('credstories', data.otps[i].msids.toString());
                                                if(data.otps[i].msids.includes(window.msid.toString())){window.plsObj.isCredPPSUser = true}
                                            }
                                            if(data.otps[i].source && data.otps[i].source=="others" && data.otps[i].msids){
                                                sessionStorage.setItem('paidstories', data.otps[i].msids.toString());
                                                if(data.otps[i].msids.includes(window.msid.toString())){window.plsObj.isToiPPSUser = true}
                                            }
                                        }
                                    }
                                if(data.accessType){
                                   if(data.accessType==="PAY_PER_ARTICLE"){
                                            planName="PAY_PER_ARTICLE";
                                        }
                                        else if(data.accessType==="TOI_PLUS"){
                                            planName="TOIPlusPAID";
                                        }
                                        else if(data.accessType==="TIMESPRIME"){
                                            planName="TOIPlus_TimesPrimePaid";
                                            sessionStorage.setItem('accessType', JSON.stringify(data.accessType));
                                        } 
                                        
                                    }
                                    window.planName = planName;
                                    window.planSource = data.source || '';
                                    if(data.mobile){
                                       sessionStorage.setItem('userMobile', data.mobile); 
                                    }else{
                                        require(["tiljs/login"], function(login) {
                                            var user = login.getUser();
                                            if(user && typeof user.getMobileNumber === 'function' && user.getMobileNumber()){
                                                sessionStorage.setItem('userMobile', user.getMobileNumber());
                                            }
                                        });
                                    }
                                    if(data.email){
                                       sessionStorage.setItem('userEmail', data.email); 
                                    }
                                    if(data.credBalance > -1){
                                        sessionStorage.setItem('credBalance', data.credBalance);
                                    }
                                    if(data.credUnlockDatems){
                                        var credDate = getGraceEndDate(data.credUnlockDatems);
                                        sessionStorage.setItem('credDate', credDate);
                                    }
                                if(data.source){
                                    sessionStorage.setItem('userPurchaseType', data.source);
                                    ga('set', 'dimension58',data.source);
                                }
                                var remainingDays = getRemainingDays(data.endDatems);
                                if(remainingDays >= 0){
                                    sessionStorage.setItem('remainingDays', remainingDays);
                                }
                                if(data.inGracePeriod){
                                    ga('set', 'dimension33',planName );
                                    sessionStorage.setItem('inGracePeriod', data.inGracePeriod);
                                    var EndTimeStamp = getGraceEndDate(data.endDatems);
                                    sessionStorage.setItem('EndTimeStamp', EndTimeStamp);
                                }
                                var isPreExpiry = !data.inGracePeriod && isUserPreExpiry(data.endDatems);
                                if(isPreExpiry){
                                    ga('set', 'dimension33',planName );
                                    sessionStorage.setItem('inPreExpirePeriod', isPreExpiry);
                                }
                            try {
                                endate = new Date(data.endDate.replace(' IST', '')).toDateString().replace(" ",", ");
                                sessionStorage.setItem("expirydate", endate);
                                resolve({endate})
                            } catch (e) {}
                       })
                       }
                                    
                                }, comgetCookie('geo_country') === 'IN');
                    })
                             
            		        init_events();
                        }
                    });
		    }


		    function init_events(){
            require(['jquery','tiljs/event','tiljs/login'],function($, event,login) {
               event.subscribe("user.logout",function(user) {
                    sessionStorage.removeItem('nativePrc');
                    sessionStorage.removeItem('expirydate');
                    sessionStorage.removeItem('planName');
                    localStorage.removeItem('planName');
                    sessionStorage.removeItem("paidstories");
                    sessionStorage.removeItem("credstories");
                    sessionStorage.removeItem("inGracePeriod");
                     sessionStorage.removeItem("inPreExpirePeriod");
                     sessionStorage.removeItem("EndTimeStamp");
                     sessionStorage.removeItem("remainingDays");
                     sessionStorage.removeItem("userPurchaseType");
                     sessionStorage.removeItem("remainingHours");
                     sessionStorage.removeItem("userMobile");
                    sessionStorage.removeItem("userEmail");
                    sessionStorage.removeItem("credDate");
                    sessionStorage.removeItem("credBalance");
                    localStorage.removeItem("renewNudgeCloseTime");
                    sessionStorage.removeItem("renewNudgePeriod");
                    sessionStorage.removeItem("renewNudgeCloseDuration");
                    localStorage.setItem('dmpStorage', JSON.stringify({ userType: 'Free' }));
                    $(".story_paid").html("");
                    window.permission = ''
               });
            });
                
            }
            
            function appendScriptToHead({
                scriptUrl,
                callback
            }) {
                return (function attachScript(d, myElement) {
                    const fjs = d.getElementsByTagName(myElement)[0];
                    const scriptElement = {};
                    const js = d.createElement(myElement);
                    js.src = scriptUrl;
                    fjs.parentNode.insertBefore(js, fjs);

                    scriptElement._e = [];
                    scriptElement.ready = function ready(f) {
                        scriptElement._e.push(f);
                    };
                    scriptElement.onload =
                        typeof callback === 'function' ? callback : undefined;

                    return scriptElement;
                })(document, 'script');
            }
            
            // var collectGaMap = function(params) {
            //   window.collectedGas = window.collectedGas || {};
            //   window.collectedGas = Object.assign({}, window.collectedGas, params);
            // };
            
            var getGa4PageViewSet = function() {
                if(Array.isArray(window.dataLayer) && window.dataLayer.length > 0) {
                    var fileteredArray = window.dataLayer.filter(function(obj) {
                        return obj.event === 'page_view'
                    });
                    if(Array.isArray(fileteredArray) && fileteredArray.length > 0) {
                        return fileteredArray[0];
                    }
                    return {};
                } else {
                   return {};
                }
            };
            
            var fireGA4WithDataObject = function(dataObject) {
              if (typeof window !== 'undefined') {
                var dataLayer = window.dataLayer || [];
                if (dataObject) {
                  dataLayer.push(dataObject);
                }
              }
            };
            
            var collectEventfireGa4 = function(objTosend, objToMap = {}){
              if(objToMap?.hasOwnProperty('item_id') && !objToMap.item_id) {
                delete objToMap.item_id;
              }
              var gaEventObj = Object.assign({},objTosend);
              gaEventObj.items = [objToMap];
              fireGA4WithDataObject(gaEventObj);
            
              delete gaEventObj.event;
              return gaEventObj;
            }
            
            var fireGA4 = function(obj){
              var gaPageViewObj = getGa4PageViewSet() || {};
              var collatedGadata = {...gaPageViewObj};
                collatedGadata.event = obj?.action === 'click' ? 'select_item' : 'view_item_list';
              window.Times = window.Times || {};
              
              var item_category2 = gaPageViewObj?.page_template;
            //   if(!(window.location.href.indexOf('articleshow') > -1)){
            //       item_category2 = 'listing';
            //   }
          
             
              return collectEventfireGa4(collatedGadata, 
                {
                  item_name: window.location.href.indexOf('.cms') > -1 ? document.title : window.location.href,
                  item_id: msid ? msid : '',
                  item_brand:'product_interventions',
                  item_category:'Nudges',
                  item_category2: item_category2 ? item_category2 : 'N/A',
                  item_category3: obj?.item_category3 ? obj?.item_category3 : 'N/A',
                  item_category4: obj?.item_category4 ? obj?.item_category4 : 'N/A',
                  location_id: obj?.location_id ? obj?.location_id : 'N/A',
                });
            }
            
            var fireGA = function(gaobject){
              ga(
                'send',
                'event',
                gaobject.category,
                gaobject.action,
                gaobject.label,
              );
            };
            
            var setCustomDimension = function(data){
              var ssoId = getCookie('ssoid');
              var prc = getPrcCookieValue();
              data.featurePermission = data?.accessiblefeatures?.join(',');
              var dimensionData = {
                dimension8: '',
                dimension9: 'toiplusplans',
                dimension10: prc,
                dimension21: ssoId ? '1' : '0',
                dimension22: ssoId || '',
                dimension31: data.msid || '',
                dimension33: '',
                dimension132: `TOI_${ssoId ? prc : -1}`,
                dimension143: data.featurePermission || '',
              };
              Object.keys(dimensionData).forEach(key => {
                window.ga('set', key, dimensionData[key]);
              });
            };
            
            // var fireCollectedGa = function(userPrcData){
            //   var ssoId = getCookie('ssoid');
            //   var ticketId =
            //     getCookie('TicketId') || getCookie('Ticketid') || getCookie('ticketId');
            
            //     var iterableGas = Object.keys(window.collectedGas || {});
            //   if (Array.isArray(iterableGas)) {
            //     iterableGas.forEach(function(key) {
            //       var gaObject = window.collectedGas[key] || {};
            //       var recordAndFireGa = function(){
            //         gaObject.otherParams = gaObject.otherParams || {};
            //         var dataToBepassed = gaObject.otherParams;
            //         if (userPrcData) {
            //             dataToBepassed = Object.assign({}, gaObject.otherParams, {accessiblefeatures: userPrcData.accessibleFeatures});
            //         }
            //         userPrcData = userPrcData || {};
            //         setCustomDimension(Object.assign({}, userPrcData, dataToBepassed ));
            //         fireGA(gaObject);
            //         // sendDataToGAWithGRX(dataToBepassed);
            //         delete window.collectedGas[key];
            //       };
            
            //       if (gaObject?.doNotWait || !(ssoId && ticketId)) {
            //         recordAndFireGa();
            //       } else if (ssoId && ticketId && userPrcData) {
            //         recordAndFireGa();
            //       }
            //     });
            //   }
            // };
            
      
        return {
          init: init,
		        showLogoutToast: showLogoutToast,
		        showTextOnLoginScreen: showTextOnLoginScreen,
		        bindEvents: bindEvents,
		        loadUserStatusMessage: loadUserStatusMessage,
		        makereq: makereq,
		        makereq_post_body: makereq_post_body,
		        makereq_get_header: makereq_get_header,
		        openPlanPage_2: openPlanPage_2,
		        succesScreen: succesScreen,
		        toiBlockerScreen: toiBlockerScreen,
		        failureScreen: failureScreen,
		        epu: epu,
		        efu: efu,
		        pendingScreen: pendingScreen,
		        bindEventsonScreen: bindEventsonScreen,
		        appendScriptToHead: appendScriptToHead,
		        choosePlan: choosePlan,
		        triggerMailOnContactUs: triggerMailOnContactUs,
		        processOrder: processOrder,
		        gotoPaymentPage: gotoPaymentPage,
		        config_native: config_native,
		        collectParametersforPopup: collectParametersforPopup,
		        displayPopup: displayPopup,
		        fetch_order_status: fetch_order_status,
		        closePopups:closePopups,
		        unreachableScreen:unreachableScreen,
		        gaEvents:gaEvents,
		        fetchLocation:fetchLocation,
		        savingCallIfTimesPrime: savingCallIfTimesPrime,
		        newPlanpageMetaData: newPlanpageMetaData,
		        doNotAppendUrlIfEmpty: doNotAppendUrlIfEmpty,
		        redirectToNewPlanpage: redirectToNewPlanpage,
		        getEncTicket: getEncTicket,
		        fireGA4: fireGA4,
		        setPrcCookieInSession: setPrcCookieInSession,
		        
        }
      })()
     if (!window.nativePayment){
        window.nativePayment = nativePayment;
        nativePayment.init();
    }
        var testingcallback=function(){
            //console.log("****************");
        }
        var onDocReady = function(){
            if (!constants.autoinit) {
                return;
            }
            
            if($(constants.selector_ad_free_nudge_Container).length > 0){
                if(window.TimesApps && TimesApps.PopUpManager){
                    popup_callbacks = TimesApps.PopUpManager.registerPopup("prime_adfreenudeg", primePaymentFlow.show_ad_free_nudge);
                    popup_callbacks && popup_callbacks.onReadyCallback(1);
                }
            }
            
            $(doc).on('click', constants.selector_subcription_swingIcon, function(){
                var $this = $(this);
                var $blockerPopUp = $(constants.selector_blockerPopUp);
                if($blockerPopUp.hasClass('minimized')){
                    $blockerPopUp.removeClass('minimized');
                    setTimeout(function(){setFooterHeight()},300)
                }
                else{
                    $blockerPopUp.addClass('minimized');
                    setTimeout(function(){setFooterHeight()},300)
                }
            });
            
            $(doc).on('click', '[data-prime="free-trial"]', function(e){
                /* Dont remove stop propagation */
                e.stopPropagation();
                fireGAonUserAction($(this));
                constants.subscribeDirect=false;
                constants.freeTrialEvt = e;
                require(["tiljs/apps/times/mobilelogin"], function(login) {
                    var user = login.getUser();
                    if (user){
                        startPrimeActivationFlow();
                    }else{
                        var flowObj = getFlowObj();
                        loginUser(login, e, flowObj);    
                    }
                });
            });
            
            $(doc).off("click",'[data-prime="logoutandlogin"]').on('click','[data-prime="logoutandlogin"]',             function (e) {
                     e.preventDefault();
                     //toiprops.directSubscribe=true;
                      var prcValue = getPrcCookieValue();
                     require(["tiljs/login"], function(login) {
                         var user = login.getUser();
                        if(user){
                            nativePayment.gaEvents('','prime-login_blocker|LoginCTA','Ps-'+prcValue,1)
                            login.logout();
                            setTimeout(function(){
                                $(config_native.selector_planPage).fadeOut("fast");
                                //primePaymentFlow.loginUser(login);
                                login.login();
                                setTimeout(function() {
                                    nativePayment.showLogoutToast()
                                }, 1000);
                                // nativePayment.showLogoutToast();
                            }, 2000);
                                
                        }
                        else{
                            nativePayment.gaEvents('','prime-login_blocker|LoginCTA','Ps--1',1)
                            login.login();
                           // primePaymentFlow.loginUser(login);
                            $(config_native.selector_planPage).fadeOut("fast");
                        }
                     });
                    })
            $(doc).on('click', '[data-prime="sign-in-now"]', function(){
                //fireGAonUserAction($(this));
                require(["tiljs/login"], function(login) {
                    // For Desktop
                    login.login();
                });
            });
            
            $(doc).on('click', '[data-prime="prime-offer"]', function(e){
                fireGAEvent('prime-login_blocker|Offers', 'login_blocker-' + prcValue);
                learnMoreHandler(e);
            });
            
            $(doc).on('click', '[data-prime="goto-timesprime"]', function(){
                fireGAEvent('prime_login_blocker|success_screen', prcValue);
            });
            
            $(doc).on('click', '[data-prime="goto-timespoints"]', function(){
                fireGAEvent('prime-login_blocker|success_screen', 'TimesPoints-'+prcValue);
            });
            
            $(doc).on('click', '[data-prime="learn-more"]', function(e){
                var $this = $(this);
                fireGAonUserAction($this);
                 learnMoreHandler($this.data('redirecturi'), e);
            });
            
            $(doc).on('click', '[data-prime="continue-read"]', function(){
                fireGAonUserAction($(this));
                closeAndReload();
            });
            
            $(doc).on('click', '[data-prime="renew-close"]', function(){
                storeRenewNudgeCloseTime();
                $('[data-prime="inline-widget"]').removeClass('showoldflow');
                $('[data-prime="inline-widget"]').css('display', 'none !important');
            });
            
             $(doc).on('click', '[data-prime="login-subscribe"]', async function(e){
                 e.preventDefault();
                 if(window.plsObj.isAllowedReadAccessCountries){
                    return false;
                }
                 nativePayment.config_native.ordertype="SUBSCRIPTION";                                
                let isShowPlanPage=this.getAttribute('data-show');
                //if(isShowPlanPage !== "plan-page" && this.id !=='plan-select'){
                if(this.id !=='plan-select'){
                //  uncomment this prerna
                    if(killMasterSwitch){
                        nativePayment.toiBlockerScreen();
                        $(".common_blocker").remove();
                        return false
                    }
                   // nativePayment.openPlanPage_2();
                    var $this = $(this);
                    
                    e.stopPropagation();
                    if(!!$this && !!$this.data('action') && !!$this.data('label')) {
                        fireGAonUserAction($this);
                    }
                }else{
                //   uncomment this prerna
                    if(killMasterSwitch) {
                        nativePayment.toiBlockerScreen();
                         $(".common_blocker").remove();
                         return false;
                     }
                    constants.subscribeDirect=true;
                    constants.subscribeEvent=e;
                    constants.freeTrialEvt = e;
                    var prcValue = getPrcCookieValue();
                    nativePayment.gaEvents('','TOIPlus_PlanPage_Click_TOIPlusPAID','Ps-'+prcValue+'/TOIPlusPAID',1)
                    if (typeof toiprops != "undefined"){toiprops.directSubscribe=true;} 
                    var $this = $(this);
                    
                     e.stopPropagation();
                      if(!!$this && !!$this.data('action') && !!$this.data('label')) {
                    fireGAonUserAction($this);
                     }
                    
                    
                    require(["tiljs/login"], function(login) {
                        
                        var user = login.getUser();
                     
                       
                        if (user){
                            // alert("Payment page is in progress.....")
                            //subscribeNow($this.data('redirecturi'), e);
                         
                           startPrimeActivationFlow();
                        }else{
                             var dataObj = {
    	                        isMobileLogin : true,
    	                        isPrimePaymentFlow: true,
    	                    };
    	                    //firing Ga forlogin screen
    	                    nativePayment.gaEvents('','Login_Screen','load-'+ window.location.href)
                            var flowObj = getFlowObj_paid();
                            login.login(function () {
                              checkPrimeUserNoFreeTrial(startPrimeActivationFlow, window.location.reload)
                            },undefined, flowObj, e, dataObj);
                            
                            $(nativePayment.config_native.selector_planPage).fadeOut("fast");
                            
                        //   showTextOnLoginScreen(); 
                        }
                    });
                    
                    setTimeout(function(){
                        showTextOnLoginScreen(); 
                    },100)
                 
                }
                setNudgeClickInfo('subscribe-now');
                var prcValue = getPrcCookieValue();
                //  var sendDataToGAWithGRXStatus =  await sendDataToGAWithGRX({})
                        //   if(sendDataToGAWithGRXStatus){
                         
                              require(["tiljs/login"], function(login) {
                                    var user = login.getUser();
                                    var dataToBepassed = {
                                         accessiblefeatures: window.userPrcData?.accessibleFeatures,
                                         msid: window.msid,
                                        //  analytics_cdp: Object.assign({eventName: grxParams[0]}, cdpParamsObj, cdpInfo),
                                         objUserData: {
                                            email: typeof user?.getEmail !== 'undefined'? user.getEmail() : '',
                                            fname: typeof user?.getFirstName !== 'undefined'? user.getFirstName() : ''
                                         },
                                         ga4Items: nativePayment.fireGA4({
                                            action: 'click',
                                            item_category4: e.target.innerText || '',
                                            item_category3: 'Briefs_inline_Nudge',
                                          })
                                        };
                                    
                                     sendDataToGAWithGRX(dataToBepassed).then(function(){
                                          if (user){
                                                nativePayment.getEncTicket().then(function(innerData){
                                                    window.location.href = nativePayment.redirectToNewPlanpage(nativePayment.newPlanpageMetaData({...window.unifiedNodes['prc' + prcValue],acqSubSource:'Briefs_inline_Nudge'}, innerData));
                                                });
                                                 
                                            }
                                            else{
                                                 window.location.href = nativePayment.redirectToNewPlanpage(nativePayment.newPlanpageMetaData({...window.unifiedNodes['prc' + prcValue],acqSubSource:'Briefs_inline_Nudge'}));
                                            }
                                         
                                     });
                                    
                                });
                        //   }
            });
            $(doc).on('click','.apple_app_link a', function(e){
            //   e.preventDefault();
                var prcValue = getPrcCookieValue();
                setNudgeClickInfo('prime-login_blocker_Radio_CTA');
                require(["tiljs/login"], function(login) {
                    var user = login.getUser();
                    if (user){
                        ga("send", "event", 'blocked_prime-login_blocker_CTA', 'web-newprimeshow', 'Ps-'+prcValue)
                    }
                    else{
                        ga("send", "event", 'blocked_prime-login_blocker_CTA', 'web-newprimeshow', 'Ps--1')
                    }
                });
                  
            })
            $(doc).on('click', '[data-prime="login-1yearplan"]', function(e){
                e.preventDefault();
                var prcValue = getPrcCookieValue();
                setNudgeClickInfo('prime-login_blocker_Radio_CTA');
                require(["tiljs/login"], function(login) {
                    var user = login.getUser();
                    if (user){
                        nativePayment.gaEvents('','prime-login_blocker_Radio_CTA','Ps-'+prcValue,1);
                    }
                    else{
                        nativePayment.gaEvents('','prime-login_blocker_Radio_CTA','Ps--1',1);
                    }
                });
                var originalUTM = decodeURIComponent(document.location.href).split('?')[1];
                if(originalUTM){
                    window.location.href = "https://timesofindia.indiatimes.com/toi-plus/plans?isPrimeArticle=true&" + 'ru='+ window.location.origin + window.location.pathname +'?'+  originalUTM ;
                }
                else{
                    window.location.href = "https://timesofindia.indiatimes.com/toi-plus/plans?isPrimeArticle=true" + '&ru='+ window.location.href;
                }            
            })
            
            $(doc).on('click', '.staticBlocker [data-prime="view-allplans"]', function(e){
                e.preventDefault();
                var prcValue = getPrcCookieValue();
                setNudgeClickInfo('prime-login_blocker_Radio_CTA');
                require(["tiljs/login"], function(login) {
                    var prcValue = getPrcCookieValue();
                    var user = login.getUser();
                    if (user){
                        ga('send', 'event', 'web-toiplusnl_'+ window._nltype, 'prime-login_blocker_Radio_CTA', 'PS-'+prcValue);
                    }
                    else{
                        ga('send', 'event', 'web-toiplusnl_'+ window._nltype, 'prime-login_blocker_Radio_CTA', 'PS--1');
                    }
                });
                var originalUTM = decodeURIComponent(document.location.href).split('?')[1];
                if(originalUTM){
                    window.location.href = "https://timesofindia.indiatimes.com/toi-plus/plans?isPrimeArticle=true&" + 'ru='+ window.location.origin + window.location.pathname +'?'+  originalUTM ;
                }
                else{
                    window.location.href = "https://timesofindia.indiatimes.com/toi-plus/plans?isPrimeArticle=true" + '&ru='+ window.location.href;
                }            
            })
            
              $("#banner_outercontent").on("click", "[data-bannertab='true']", function(e) {
                 e.preventDefault();
    	                   var $tabButton = $( this );
                            var url = $tabButton.attr("data-bannerhref")
                            var prcValue = getPrcCookieValue();
                            var currentCountry =  (window.geoinfo && window.geoinfo.CountryCode) || comgetCookie('geo_country') || 'IN';
                            var setplatform = (isMobile(window.navigator.userAgent))?`&amp;platform=web`:`&amp;platform=wap`
                            url = `${url}&prc=${prcValue}&cc=${currentCountry}${setplatform}`
                            
                            console.log('url', url);
                             $.ajax({
                                  url: url,
                                  cache: false
                                })
                                  .done(function( html ) {
                                  console.log('data received')
                                    var finalHtml = $(html).find('#banner_outercontent').html();
                                    //console.log('finalHtml===', finalHtml)
                                    var current_date  = new Date();
                                    $( "#banner_outercontent").html(finalHtml);
                                  });
                            
                    });
                    
            $("#banner_outercontent").on("click", "[data-buildwitutms='true']", async function(e) {
                           e.preventDefault();
                           
                           
                           
    	                   var $bannerButton = $(this);
    	                    var url = $bannerButton.attr("href") || '';
    	                    var index = $bannerButton.attr("data-index");
    	                    require(["tiljs/login"], function(login) {
                                var user = login.getUser();
                                if (user){
                                    nativePayment.gaEvents('','Click_whytoiplus_subs CTA '+index,'Ps-'+prcValue,1);
                                }
                                else{
                                    nativePayment.gaEvents('','Click_whytoiplus_subs CTA '+index,'Ps--1',1);
                                }
                            });
    	                    var url_params = '';
    	                    var bannerBenefit_content = $("#banner_outercontent .bannerBenefit_content h4")?.[index-1]?.innerText;
    	                    var windowhref = window.location.href.split('?')[0]
    	                    var windowhrefParams = window.location.href.split('?')[1]
    	                    
    	                    var currentUrl = window.location.href;
                              var currUrlObj = new URL(currentUrl);
                              var utmSource = currUrlObj.searchParams.get('utm_source') || '';
                              var utmMedium = currUrlObj.searchParams.get('utm_medium') || '';
                              var utmCampaign = currUrlObj.searchParams.get('utm_campaign') || '';
                              
                              var appendUtm = ``; //`utm_source=${utmSource}&utm_medium=${utmMedium}&utm_campaign=${utmCampaign}`;
                              
                              if(utmSource){
                                 appendUtm =  `utm_source=${utmSource}`;
                              }
                              
                              if(utmMedium){
                                 appendUtm =  `utm_medium=${utmMedium}`;
                              }
                              if(utmCampaign){
                                 appendUtm =  `utm_campaign=${utmCampaign}`;
                              }
                              
                               var grxId = comgetCookie("_grx");
                              
                              if(grxId){
                                 appendUtm =  `grxId=${grxId}`;
                              }
                              
                              
                               var acqSubSource = `paywall_blocker_other_benefits_cta_${window.msid}`  || 'TOIWeb';
                              
                              if(acqSubSource){
                                  windowhrefParams =  windowhrefParams+`&acqSubSource=${acqSubSource}`;
                              }
                             
                             
                             
                              var appendRU =  (windowhref.indexOf('toidev.indiatimes.com')>-1) ? encodeURIComponent(`${windowhref}?primetemplate=1&${windowhrefParams}&${grxId}`) : encodeURIComponent(`${windowhref}?${windowhrefParams}&${grxId}`) ;
                             
                             
                             
                              if(url.indexOf('?')>-1){
                                  url_params = `&${windowhrefParams}&ru=${appendRU}`;
                              }else{
                                   url_params = (windowhrefParams)?`?${windowhrefParams}&ru=${appendRU}`:`?ru=${appendRU}`;
                              }
                               
                             // console.log('ru with UTM === ',`${url}${url_params}` )
                             require(["tiljs/login"], function(login) {
                                    var user = login.getUser();
                                    var prcValue = getPrcCookieValue();
                                    var grxParams = [
                                      'paywall', {
                                        client_source: 'cdp',
                                        event_nature: 'click',
                                        event_category: 'subscription',
                                        cta_txt: bannerBenefit_content ? bannerBenefit_content + ' ' + e?.target?.innerText.trim() : e?.target?.innerText.trim(),
                                        // event_section: 'storypage_paywall_blocker',
                                        // event_sub_section: '',
                                        // landing_l1: 'plan_page',
                                        // landing_l2: '',
                                        // landing_l3: '',
                                        // landing_page_template: 'plan_page',
                                        // landing_url: nativePayment.redirectToNewPlanpage(
                                        //   nativePayment.newPlanpageMetaData(window.unifiedNodes['prc' + prcValue]),
                                        // ),
                                        // position: 3,
                                        unique_subscription_id: comgetCookie("_grx") + '_' + (new Date()).getTime(),
                                      },
                                    ];
                                    var cdpInfo = {}; 
                                    if (typeof window.grx !== 'undefined' && typeof window?.grx_module?.hitPaywallEventReact === 'function') {
                                      window.grx_module.hitPaywallEventReact(...grxParams);
                                       cdpInfo = window.grx_module.getCdpInfo() || {};
                                    } else {
                                      window.Times.setGRXDataInLocalStorage('GRX_QUEUE_EVENT', {
                                        eventName: grxParams[0],
                                        payload: grxParams[1],
                                      });
                                    }
                                    var cdpParamsObj = grxParams[1] || {};
                                    var dataToBepassed = {
                                         accessiblefeatures: window.userPrcData?.accessibleFeatures,
                                         msid: window.msid,
                                         analytics_cdp: Object.assign({eventName: grxParams[0]}, cdpParamsObj, cdpInfo),
                                         objUserData: {
                                            email: typeof user?.getEmail !== 'undefined'? user.getEmail() : '',
                                            fname: typeof user?.getFirstName !== 'undefined'? user.getFirstName() : ''
                                         },
                                         ga4Items: nativePayment.fireGA4({
                                            action: 'click',
                                            item_category4: e.target.innerText || '',
                                            item_category3: 'paywall_blocker_other_benefits_cta',
                                            location_id: `${index}_${bannerBenefit_content ? bannerBenefit_content : ''}`
                                          })
                                        };
                                    
                                     sendDataToGAWithGRX(dataToBepassed).then(function(){
                                          window.location.href =  `${url}${url_params}`;
                                         
                                     }); 
                             });
            });
             
           
             $("#banner_outercontent").on("click", "[data-accordion='true']", function(e) {
                e.preventDefault();
                 var $accordionStrip = $(this);
                 
                 if($accordionStrip.hasClass('enableState')){
                      $accordionStrip.removeClass('enableState');
                 }else{
                     $('.faqinxslt li').removeClass('enableState');
                     $accordionStrip.addClass('enableState');
                 }
                
                 
            });  
            
             $("#banner_outercontent").on("click", "[data-loadmorefaq='true']", function(e) {
                e.preventDefault();
                 var $accordionStrip = $(this);
                 $('.faqinxslt li').removeAttr("style")
                 $accordionStrip.remove();
                 
            });  
            
           function credLoginSuccessCallback(resp){
                        let ticketId;
                        let ssoId;
                        if(resp && resp.data){
                            ticketId = resp.data.ticketId || resp.data.ticketid || resp.data.ticket;
                            ssoId = resp.data.ssoid || resp.data.ssoId || resp.data.sso;
                        }
                        if (ssoId && ticketId) {
                            require(["tiljs/login", "tiljs/cookie"], function(login, cookie) {
                                const jssoCrosswalkObj = new JssoCrosswalk("toi", "WAP");
                			        jssoCrosswalkObj.getValidLoggedInUser(function(response){
                			        if (response.code=='200'){
                    				    login.init();
                                        var user = login.getUser();
                                        var options = {};
                                        options.ssoId = ssoId;
                                        options.ticketId = ticketId;
                                        nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                                            if(data.planStatus === 5 || data.planStatus === 1){
                                                window.plsObj.isToiPlusUser = true
                                                sessionStorage.setItem('already_prime_user', 1);
                                            }
                                            else if(data.otps && data.otps.length > 0){
                                                for(i=0;i<data.otps.length;i++){
                                                    if(data.otps[i].source && data.otps[i].source=="cred" && data.otps[i].msids){
                                                        if(data.otps[i].msids.includes(window.msid.toString())){
                                                            window.plsObj.isCredPPSUser = true;
                                                        }
                                                    }
                                                    if(data.otps[i].source && data.otps[i].source=="others" && data.otps[i].msids){
                                                        if(data.otps[i].msids.includes(window.msid.toString())){
                                                            window.plsObj.isToiPPSUser = true;
                                                        }
                                                    }
                                                }
                                            }
                                                if(!window.plsObj.isToiPPSUser && !window.plsObj.isCredPPSUser && !window.plsObj.isToiPlusUser){
                                                    nativePayment.config_native.ordertype="PAY_PER_ARTICLE";
                                                    nativePayment.config_native.planid = null;
                                                    nativePayment.config_native.msid = (!!window.msid)? window.msid.toString() : null;
                                                    nativePayment.choosePlan(nativePayment.config_native.planid,'credUnlock');
                                                }
                                                else{
                                                    if(window.plsObj.isToiPPSUser){
                                                        sessionStorage.setItem('already_pps_user', 1);
                                                    }
                                                    if (["toidev.indiatimes.com", "spmdev.timesofindia.com", "toistg.indiatimes.com", "spmstg.indiatimes.com"].indexOf(document.location.hostname) > -1) {
                                                        window.location.href = getPrimeSuccessReloadUrl();
                                                    }
                                                    else{
                                                        window.location.reload(true);
                                                    }
                                                }
                                        });
                                    }
                                })
                            })
                        }
                    }
           function credLoginFailCallback(){
                        localStorage.setItem('cred_pps_error',"NO_CRED_ACCOUNT");
                        localStorage.removeItem('cred_access_token');
                        localStorage.removeItem('cred_refresh_token');
                        nativePayment.closePopups();
                        nativePayment.collectParametersforPopup('PAYMENT_FAILED').then(function(data) {
                                nativePayment.displayPopup(data);
                                var prcValue = primePaymentFlow.getPrcCookieValue();
                                require(["tiljs/login"], function(login) {
                                    var user = login.getUser();
                                    if(user){
                                        nativePayment.gaEvents('', 'TOIPlus_Payment_fail_CRED_view' ,'Ps-'+prcValue,1);
                                    }else{
                                        nativePayment.gaEvents('', 'TOIPlus_Payment_fail_CRED_view' ,'Ps--1',1);
                                    }
                                })
                                localStorage.removeItem("cred_flow_initiated");
                        });
                    }
            
            var credLogin =  function(requestId,code){
                nativePayment.collectParametersforPopup('LOADER').then(function(data) {
                    nativePayment.displayPopup(data);
                    localStorage.setItem("cred_flow_initiated", 1);
                    var options = {};
                    options.requestId = requestId;
                    options.code = code;
                    nativePayment.makereq_get_header(nativePayment.config_native.fetch_cred_access_token, options).then(function(resp) {
                        if(resp && resp.status==="SUCCESS" && resp.data){
                            localStorage.setItem("cred_access_token",  resp.data.access_token);
                            localStorage.setItem("cred_refresh_token",  resp.data.refresh_token);
                            nativePayment.config_native.access_token = resp.data.access_token;
                            nativePayment.config_native.refresh_token = resp.data.refresh_token;
                            require(["tiljs/login"], function(login) {
                                login.loginWithCred(resp.data.access_token , credLoginSuccessCallback,credLoginFailCallback)
                            })
                        }else{
                            credLoginFailCallback();
                        }
                    })
                    .catch(function(error){
                         credLoginFailCallback();
                    })
                });
            }
            
            function getCredBtnClickHandler (ref) {
                const credKey = nativePayment.config_native.cred_key;
                const credAuth = window.CRED_ACCESS.init({
                publicKey: credKey,
                referrer: window.location.href,
                });
                 credAuth.handleAccessBtnClick(
                     ref,
                    (code, requestId) => {
                      if (!code) {
                        // failure state
                        // user is not gated in CRED
                        console.log('code, requestId', code, requestId);
                        credLogin(requestId,code);
                      } else {
                        // user is gated in call the API here
                        // use the response show/set data.
                        credLogin(requestId,code);
                      }
                    }, // action with code
                    requestId => {
                      console.log('requestId', requestId);
                      if(requestId){
                          credLogin(requestId,null);
                      }
                    },
                  );
            }
            
            var credUnlockFlow = function (ref){
                getCredBtnClickHandler(ref);
            }
            
             $(doc).on('click', '[data-prime="login-credunlock"]', function(e){
                  e.stopPropagation();
                    var $this = $(this);
                    setNudgeClickInfo('prime-login_blocker_RadioCTA_Cred');
                    require(["tiljs/login"], function(login) {
                        var user = login.getUser();
                        if (user){
                            if(user && (window.plsObj.isToiPPSUser || window.plsObj.isCredPPSUser)){
                                return false;
                            }
                            nativePayment.gaEvents('','prime-login_blocker_RadioCTA_Cred','Ps-'+prcValue,1);
                        }else{
                            nativePayment.gaEvents('','prime-login_blocker_RadioCTA_Cred','Ps--1',1);
                        }
                    });
                 var ref = document.getElementById("credCTA");
                 credUnlockFlow(ref);
             })
            
            $(doc).on('click', '[data-prime="login-payperstory"]', function(e){
                if(window.plsObj.isAllowedReadAccessCountries){
                    return false;
                }
                localStorage.removeItem("cred_flow_initiated");
                
                 nativePayment.config_native.ordertype="PAY_PER_ARTICLE";
                 nativePayment.config_native.planid = null;
                 nativePayment.config_native.msid = (!!window.msid)? window.msid.toString() : null;
                 if(window.location.href.indexOf('frmapp=yes')>-1){return ;}
                 
                //   uncomment this prerna
                    if(killMasterSwitch) {
                        nativePayment.toiBlockerScreen();
                         $(".common_blocker").remove();
                         return false;
                     }
                    constants.subscribeDirect=true;
                    constants.clickEventButton = e;
                   
                    if (typeof toiprops != "undefined"){toiprops.directSubscribe=true;} 
                    
                    // nativePayment.gaEvents('','prime-login_blocker|CTA_PerStory','Ps-'+prcValue+'/NudgeType-Bottom/CTA-PAY NOW',1);
                    // if (typeof toiprops != "undefined"){toiprops.directSubscribe=true;} 
                    var $this = $(this);
                    
                     e.stopPropagation();
                     if(!!$this && !!$this.data('action') && !!$this.data('label')) {
                        fireGAonUserAction($this);
                      }
                    
                     var gacta = $this.attr("data-gacta");
                     var prcValue = getPrcCookieValue();
                    
                    require(["tiljs/login"], function(login) {
                        var user = login.getUser();
                        if (user){
                            if(user && window.plsObj.isToiPlusUser){return false;}
                            
                            
                            if(gacta=="pps-radio"){
                                nativePayment.gaEvents('','prime-login_blocker_RadioCTA_PerStory','Ps-'+prcValue,1);
                                setNudgeClickInfo('prime-login_blocker_RadioCTA_PerStory');
                             }
                             else if(gacta=="pps-buy-now"){
                                nativePayment.gaEvents('','prime-login_blocker|CTA_PerStory','Ps-'+prcValue,1);
                                setNudgeClickInfo('prime-login_blocker|CTA_PerStory');
                             }
                            
                            
                            startPrimeActivationFlow();
                        }else{
                             var dataObj = {
    	                        isMobileLogin : false,
    	                        isPrimePaymentFlow: true,
    	                    };
    	                    //firing Ga forlogin screen
    	                    
    	                    
    	                    if(gacta=="pps-radio"){
                                nativePayment.gaEvents('','prime-login_blocker_RadioCTA_PerStory','Ps--1',1);
                                setNudgeClickInfo('prime-login_blocker_RadioCTA_PerStory');
                             }
                             else if(gacta=="pps-buy-now"){
                                nativePayment.gaEvents('','prime-login_blocker|CTA_PerStory','Ps--1',1);
                                setNudgeClickInfo('prime-login_blocker|CTA_PerStory');
                             }
    	                    
    	                    nativePayment.gaEvents('','Login_Screen','load-'+ window.location.href);
    	                    
    	                    
                            var flowObj = getFlowObj_paid();
                            login.login(function () {
                    checkPrimeUser(startPrimeActivationFlow, window.location.reload)
                },undefined, flowObj, e, dataObj);
                        }
                    });
                    
            })    
                
           
            $(doc).on('click', '[data-prime="subscribe-now"]', function(e){
                
                let isShowPlanPage=this.getAttribute('data-show');
                if(isShowPlanPage !== "plan-page" && this.id !=='plan-select'){
                    nativePayment.openPlanPage_2()
                }else{
                
                    //console.log("testing2")
                    constants.subscribeDirect=true;
                    var prcValue = getPrcCookieValue();
                    nativePayment.gaEvents('','TOIPlus_PlanPage_Click_TOIPlusPAID','Ps-'+prcValue+'/TOIPlusPAID',1)
                    var $this = $(this);
                   
                    constants.clickEventButton = e;
                    require(["tiljs/login"], function(login) {
                        var user = login.getUser();
                        if (user){
                            startPrimeActivationFlow();
                        }else{
                            //first hide the plan page then open login
                            $(nativePayment.config_native.selector_planPage).fadeOut("fast");
                            loginUser(login, e);
                        }
                    });
                }
            });
            
            
            require(['jquery','tiljs/event'],function($, event) {
                event.subscribe("user.status",function(user) {
                    timesPointsOnPaidSubscription = undefined;
                    timesPointsOnFreeTrialActivation = undefined;
                    var _isFTU = isFTU();
                    var prcValue = getPrcCookieValue();
                //    if(isPrcNotSet(prcValue)){
                        require(['tiljs/apps/times/tpmodal'], function(tpmodal){
                            tpmodal.getActivityObjinCallBack(constants.freeTrialActivationActivityCode, function(activityObj){
                                if(activityObj && activityObj.assign_points){
                                    timesPointsOnFreeTrialActivation = activityObj.assign_points;
                                }
                //                userStatusActions(user);
                            });
                        });
                    //}
            //        else if(_isFTU || !isPrimeActiveUser()){
                        require(['tiljs/apps/times/tpmodal'], function(tpmodal){
                            tpmodal.getActivityObjinCallBack(constants.paidSubscriptionActivityCode, function(activityObj){
                                if(activityObj && activityObj.assign_points){
                                    timesPointsOnPaidSubscription = activityObj && activityObj.assign_points;
                                    
                                }
                                else
                                {
                                    timesPointsOnPaidSubscription=constants.subscribe_tp_error
                                    
                                }
                  //              userStatusActions(user);
                            });
                        });
              //      }
                //    else{
                        userStatusActions(user);
                  //  }
                });
            });
            
            // set PRC value for initial use
            window.__prc = getPrcCookieValue();
            require(['jquery','tiljs/event'],function($, event) {
                event.subscribe("user.login",function(user) {
                    /*var prc = prcValue = getPrcCookieValue();
                    if (prc != window.__prc){
                        refreshPage(user);
                    }*/
                    checkIdPayPerStoryArticle(constants.subscribeEvent);
                    const urlSearchParams = new URLSearchParams(window.location.search);
                    const params = Object.fromEntries(urlSearchParams.entries());
                    if(sessionStorage.getItem("geFlag") && JSON.parse(sessionStorage.getItem("geFlag")) && Object.keys(params).length !== 0 && params.utm_source === 'newsshowcase'){
                       googleExtendedAccessFlow(true);
                    }
               });
               
               event.subscribe("user.logout",function(user) {
                    resendOTPClickCounter = 0;
                    const urlSearchParams = new URLSearchParams(window.location.search);
                    const params = Object.fromEntries(urlSearchParams.entries());
                    if(sessionStorage.getItem("geFlag") && JSON.parse(sessionStorage.getItem("geFlag")) && Object.keys(params).length !== 0 && params.utm_source === 'newsshowcase'){
                        if(Object.keys(params).length !== 0 && params.constructor === Object && params.entitlementcheck){
                            urlSearchParams.delete('entitlementcheck');
                        }
                        window.location.href = window.location.pathname +'?'+ urlSearchParams.toString();
                    }
                    /*var prc = prcValue = getPrcCookieValue();
                    if (prc != window.__prc){
                        refreshPage(null, window.__prc);
                    }*/
               });
            });
            
            
            var urlSearchParams = new URLSearchParams(window.location.search);
            var params = Object.fromEntries(urlSearchParams.entries());
           if(Object.keys(params).length !== 0 && params.constructor === Object){
               if(params.pageName == "ToiPlusPlanpage" && window.__prc !== 5 && window.__prc !== 1) {
                   //nativePayment.openPlanPage_2();
                   window.location.href = 'https://timesofindia.indiatimes.com/toi-plus/plans';
               }
           }
            
            
            
            
            setGACustomDimension();
            init();
            fmSsoidHandler();
            //appendVerifyMobileScreenHTMLtoBody();
        }
        var fmSsoidHandler = function(){
            var ssoid = getCookie("ssoid");
            // console.log("ssoid fm",ssoid);
            if (typeof window !== 'undefined' && typeof window.FM !== 'undefined' && ssoid && ssoid.length > 0 && typeof window.FM.identify === 'function') {
                FM.identify(ssoid);
            }
        }
        var checkIdPayPerStoryArticle = function () {
            require(["tiljs/cookie"], function(cookie) {
                console.log(constants.clickEventButton);
                var ifPayPerStoryInitiator = (constants.clickEventButton && ($(constants.clickEventButton.target).attr("data-prime") == "login-payperstory" || $(constants.clickEventButton.target).closest("[data-prime='login-payperstory']").length > 0)) ? true : false;
		        var options = {}
                options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
                options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
                if(options.ssoId!=''){ 
                    nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                        if(data.otps && data.otps.length > 0){
                            for(i=0;i<data.otps.length;i++){
                                if(data.otps[i].source && data.otps[i].source=="cred" && data.otps[i].msids){
                                    sessionStorage.setItem('credstories', data.otps[i].msids.toString());
                                    if(window.msid && data.otps[i].msids.includes(window.msid.toString())){
                                        window.location.reload();
                                    }else{
                                        if(ifPayPerStoryInitiator){
                                            checkPrimeUserNoFreeTrial(startPrimeActivationFlow, window.location.reload);                
                                        }
                                    }
                                }
                                if(data.otps[i].source && data.otps[i].source=="others" && data.otps[i].msids){
                                    sessionStorage.setItem('paidstories', data.otps[i].msids.toString());
                                    if(window.msid && data.otps[i].msids.includes(window.msid.toString())){
                                        window.location.reload();
                                    }else{
                                        if(ifPayPerStoryInitiator){
                                            checkPrimeUserNoFreeTrial(startPrimeActivationFlow, window.location.reload);                
                                        }
                                    }
                                }
                            }
                        }
                        else{
                            if(ifPayPerStoryInitiator){
                                checkPrimeUserNoFreeTrial(startPrimeActivationFlow, window.location.reload);                
                            }
                        }
                        
                   });
                }
            })
        };
                            
        var removeParam = function removeParam(key, sourceURL) {
            var rtn = sourceURL.split("?")[0],
                param,
                params_arr = [],
                queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
            if (queryString !== "") {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                    }
                }
                rtn = rtn + "?" + params_arr.join("&");
            }
            return rtn;
        }
        
        var appendVerifyMobileScreenHTMLtoBody = function(){
            // if($(constants.selector_toiplus_verifymobile_popup).length === 0){
            //     $.get(constants.toiplusVerifymobileScreenAPIURL, function(responseHTML) {
            //         $('body').append(responseHTML);
            //     });
                
            // }
            //kepping as it was exposed earlier, before need to remove all references
            return;
        }
        
        var showpaidstorymessage = function(mssgObj, type){
            require(["tiljs/login"], function(login) {
                    var user = login.getUser();
                    var prcValue = getPrcCookieValue();
                    const params = getUrlParams();
                    var unlocked_stories_arr;
                    if(type === 'ppStory'){
                        unlocked_stories_arr = (sessionStorage.getItem("paidstories") && sessionStorage.getItem("paidstories") != null) ? sessionStorage.getItem("paidstories").split(",") : [];
                    }else if (type === 'credStory') {
                        unlocked_stories_arr = (sessionStorage.getItem("credstories") && sessionStorage.getItem("credstories") != null) ? sessionStorage.getItem("credstories").split(",") : [];
                    }
                    if(typeof window.msid !='undefined' && user && unlocked_stories_arr.includes(window.msid.toString()) && mssgObj && (type === 'ppStory' || type === 'credStory')){
                        if(prcValue != undefined){
                            let _key = (prcValue == 7 || prcValue == 8 ) ?"prc6" : "prc"+prcValue;
                            let _obj = mssgObj[_key];
                            if(_obj != undefined){
                                let _html = `<div class="story_paid_message"> 
                                <h2>${_obj.h1}</h2>
                                <p>${_obj.h2}</p>
                                </div>`;
                            $(".story_paid").html(_html);
                            $(".story_paid").off("click").on("click",".story_paid_message a",function(){
                                if(type === 'ppStory'){
                                    nativePayment.gaEvents('','TOIPlus_PinkStrip_CTAClick',toiprops.articleTitle,1);
                                }
                            });
                            }
                        }
                    }else{
                        nativePayment.makereq(nativePayment.config_native.toiplus_json, 1).then(function(data) {
                                console.log("****######****"+data);
                                var _paidstories_arr= (sessionStorage.getItem("paidstories") && sessionStorage.getItem("paidstories") != null) ? sessionStorage.getItem("paidstories").split(",") : [];
                                if(typeof window.msid !='undefined' && user && _paidstories_arr.includes(window.msid.toString()) && data.PayPerStoryStrip && type === 'ppStory'){
                                    if(prcValue != undefined){
                                        var _key = (prcValue == 7 || prcValue == 8 ) ?"prc6" : "prc"+prcValue;
                                        var _obj = data.PayPerStoryStrip[_key];
                                        if(_obj != undefined){
                                            var _html = `<div class="story_paid_message"> 
                                            <h2>${_obj.h1}</h2>
                                            <p>${_obj.h2}</p>
                                            </div>`;
                                        $(".story_paid").html(_html);
                                        $(".story_paid").off("click").on("click",".story_paid_message a",function(){
                                            nativePayment.gaEvents('','TOIPlus_PinkStrip_CTAClick',toiprops.articleTitle,1);
                                        });
                                        }
                                    }
                                }else if(!sessionStorage.getItem("geFlag") && type === 'geStory' && !window.plsObj.isToiPPSUser && !window.plsObj.isToiPlusUser && !window.plsObj.isCredPPSUser && Object.keys(params).length > 0 &&
                                    (params.utm_source === 'newsshowcase' || params.utm_source === 'GE_Access')){
                                        if(prcValue != undefined){
                                            let _key = (prcValue == 7 || prcValue == 8 )? "prc6" : (prcValue == -1)? "prc0": "prc"+prcValue;
                                            var _obj = mssgObj[_key];
                                            if(_obj != undefined){
                                                var _html = `<div class="story_paid_message"> 
                                                <h2>${_obj.h1}</h2>
                                                <p>${_obj.h2}</p>
                                                </div>`;
                                            $(".story_paid").html(_html);
                                            $(".story_paid").off("click").on("click",".story_paid_message a",function(){
                                                nativePayment.gaEvents('','TOIPlus_PinkStrip_CTAClick',toiprops.articleTitle,1);
                                            });
                                            }
                                        }
                                }
                            });
                        
                    }
                   
                });
        }
        var showPpsPriceonImage = function (PPSPriceWidget){
            require(["tiljs/login"], function(login) {
            var prcValue = getPrcCookieValue();
            var prc = `prc${prcValue}`
            if(PPSPriceWidget){
                if(prcValue != undefined && prcValue!=1 && prcValue!=5){
                        var _obj = PPSPriceWidget[prc];
                            if(_obj != undefined){
                                var _html = `<span class="pps_message"> ${_obj.h1}</span>`;
                                $(".ppspricewidget").html(_html);
                                var ppsmsid = $(".ppspricewidget").attr('data-ppsMsid');
                                $(".ppspricewidget").each(function(){
                                    var user = login.getUser();
                                    var _paidstories_arr= (sessionStorage.getItem("paidstories") && sessionStorage.getItem("paidstories") != null) ? sessionStorage.getItem("paidstories").split(",") : [];
                                    var _credstories_arr= (sessionStorage.getItem("credstories") && sessionStorage.getItem("credstories") != null) ? sessionStorage.getItem("credstories").split(",") : [];
                                    if(ppsmsid && user && (_paidstories_arr.includes(ppsmsid.toString()) || _credstories_arr.includes(ppsmsid.toString()))){
                                        $(".ppspricewidget").remove();
                                    }
                                });
                        }
                }
            }
            });
        }
        var showRenewPinkStrip = function(renewalStoryStrip,key){
            if(renewalStoryStrip){
                var _obj = renewalStoryStrip[key];
                var expiryDate = sessionStorage ? sessionStorage.getItem("EndTimeStamp") : null ;
                var remainingHours = sessionStorage ? sessionStorage.getItem("remainingHours") : null ;
                remainingHours = parseInt(remainingHours);
                var days;
                if(remainingHours > 0 && remainingHours <= 24){
                    days = 'Today';
                }
                else if(remainingHours > 24){
                    remainingDays = Math.ceil(remainingHours/24);
                    days = `in ${remainingDays} days`;
                }
               if(_obj != undefined){
                    let _html = `<div class="renew_message"> 
                    <h2>${_obj.h1}</h2>
                    <p>${_obj.h2}</p>
                    </div>`;
                    if(expiryDate!="undefined" && expiryDate!=null){
                        try{
                         _html = JSON.stringify(_html).replace(/<gracedate>/g, expiryDate);
                        }
                        catch(e){
                        }
                    }
                    if(days!="undefined" && days!=null && key==='preExpiry'){
                        try{
                         _html = JSON.stringify(_html).replace(/<remainingDays>/g, days);
                        }
                        catch(e){
                        }
                    }
                    _html = JSON.parse(_html);
                    $(".story_paid").html(_html);
                    $(".story_paid").off("click").on("click",".renew_message a",function(){
                        ga("send", "event", 'TOIPlus_renew_PinkStrip_CTAClick', 'web', toiprops.articleTitle)
                    });
                   
                    document.querySelector('.renew_message a') && document.querySelector('.renew_message a').addEventListener('click' ,function(e){
                        
                     e.preventDefault();
          
                      
                         
                              require(["tiljs/login"], function(login) {
                                    var user = login.getUser();
                                    var prcValue = getPrcCookieValue();
                                    var grxParams = [
                                      'paywall', {
                                        client_source: 'cdp',
                                        event_nature: 'click',
                                        event_category: 'subscription',
                                        cta_text: e?.target?.innerText.trim(),
                                        unique_subscription_id: comgetCookie("_grx") + '_' + (new Date()).getTime(),
                                      },
                                    ];
                                    var cdpInfo = {}; 
                                    if (typeof window.grx !== 'undefined' && typeof window?.grx_module?.hitPaywallEventReact === 'function') {
                                      window.grx_module.hitPaywallEventReact(...grxParams);
                                       cdpInfo = window.grx_module.getCdpInfo() || {};
                                    } else {
                                      window.Times.setGRXDataInLocalStorage('GRX_QUEUE_EVENT', {
                                        eventName: grxParams[0],
                                        payload: grxParams[1],
                                      });
                                    }
                                    var cdpParamsObj = grxParams[1] || {};
                                    var item_category3 = 'EarlyRenew_FreeAS_Inline_Nudge';
                                     if(window.userPrcData?.inGracePeriod){
                                         item_category3 = 'Grace_FreeAS_Inline_Nudge';
                                     }
                                    
                                    var dataToBepassed = {
                                         accessiblefeatures: window.userPrcData?.accessibleFeatures,
                                         msid: window.msid,
                                         analytics_cdp: Object.assign({eventName: grxParams[0]}, cdpParamsObj, cdpInfo),
                                         objUserData: {
                                            email: typeof user?.getEmail !== 'undefined'? user.getEmail() : '',
                                            fname: typeof user?.getFirstName !== 'undefined'? user.getFirstName() : ''
                                         },
                                         ga4Items: nativePayment.fireGA4({
                                            action: 'click',
                                            item_category4: e.target.innerText || '',
                                            item_category3: item_category3,
                                          })
                                        };
                                     sendDataToGAWithGRX(dataToBepassed).then(function(){
                                         if (user){
                                         
                                        nativePayment.getEncTicket().then(function(innerData){
                                             window.location.href = nativePayment.redirectToNewPlanpage(nativePayment.newPlanpageMetaData({...window.unifiedNodes['prc' + prcValue],acqSubSource: item_category3 + '_' + window.msid}, innerData));
                                        });
                                         
                                    }
                                    else{
                                        
                                          window.location.href = nativePayment.redirectToNewPlanpage(nativePayment.newPlanpageMetaData({...window.unifiedNodes['prc' + prcValue],acqSubSource: item_category3+ '_' + window.msid}));
                                    }
                                })
                                    
                                });
                           
                          
                    });
                }
            }
        }
       var renderJson = function(text, id, container, dataToBePassed,feed) {
           
          // console.log('renderJson',nativePayment.config_native.plans_api,container,text,id)
                return new Promise(function(resolve, reject) {
                    var promise_plans_api = nativePayment.makereq(nativePayment.config_native.plans_api,1);
                    var promise_translation_api = nativePayment.makereq(feed,1)
                    var planPage = {}
                    Promise.all([promise_plans_api, promise_translation_api]).then(function(data) {
                        
                        if (id === 'script_inline') {
                            var widget = data[1]?.inlineWidgetShort;
                            var prcWidgetExists = widget?.[dataToBePassed.prc];
                            var graceWidgetExists = widget?.[dataToBePassed.inGracePeriod ? 'grace' : ''];
                            var preExpiryWidgetExists = widget?.[dataToBePassed.inPreExpiredPeriod ? 'preExpiry' : ''];
                        
                            if (!prcWidgetExists && !(dataToBePassed.inGracePeriod === 'true' && graceWidgetExists) && !(dataToBePassed.inPreExpiredPeriod === 'true' && preExpiryWidgetExists)) {
                                resolve(null);
                            }
                        }
                        //console.log('data',data);
                        if(data[1]){
                           window.unifiedNodes = data[1].unifiedNodes; 
                        }
                        
                        
                        var planDetails = data[0].data.subscriptions[0].plans[0];
                        var json = data[1];
                        var name = "Guest";
                        var expirydate="";
                        window.currencyCode=planDetails.currency;
                        setCookie('currencyCode', window.currencyCode);
                        if (dataToBePassed && dataToBePassed.name) {
                            name = dataToBePassed.name ? dataToBePassed.name : 'Guest';
                        }
                        if (dataToBePassed && dataToBePassed.expirydate) {
                            expirydate = dataToBePassed.expirydate;
                        }
                        
                        try{
                        var planDetails = data[0].data.subscriptions[0].plans[0];
                        var value = planDetails.value;
                        var discountedValue = planDetails.discountedValue;
                        var currency = '₹';
                        var graceExpiryDate = sessionStorage ? sessionStorage.getItem("EndTimeStamp") : null ;
                        var remainingHours = sessionStorage ? sessionStorage.getItem("remainingHours") : null ;
                        var userMobile = sessionStorage && sessionStorage.getItem("userMobile") ? sessionStorage.getItem("userMobile") : '' ;
                        var userEmail = sessionStorage && sessionStorage.getItem("userEmail") ? sessionStorage.getItem("userEmail") : '' ;
                        var credDate = sessionStorage && sessionStorage.getItem("credDate") ? sessionStorage.getItem("credDate") : '' ;
                        remainingHours = parseInt(remainingHours);
                        var days;
                        if(remainingHours > 0 && remainingHours <= 24){
                            days = 'Today';
                        }
                        else if(remainingHours > 24){
                            remainingDays = Math.ceil(remainingHours/24);
                            days = `in ${remainingDays} days`;
                        }
                        var old = JSON.stringify(json).replace(/<name>/g, name).replace(/<value>/g, value).replace(/<discuountedvalue>/g, discountedValue).replace(/<strikeoffcurrency>/g, currency).replace(/<currency>/g, currency).replace(/<timespoint>/g, '200').replace(/<expiryDate>/g, expirydate).replace(/<gracedate>/g, graceExpiryDate).replace(/<remainingDays>/g, days).replace(/<userEmailId>/g, userEmail).replace(/<userPhoneNumber>/g,userMobile).replace(/<date>/g,credDate);
                        }
                        catch(e){
                         var old = JSON.stringify(json).replace(/<name>/g, name).replace(/<timespoint>/g, '200').replace(/<expiryDate>/g, expirydate);   
                        }
                        var json = JSON.parse(old);
                        var temp=Math.floor(Math.random() * 10001);
                        $("body").append('<script id="js_' + temp + '" type="text/x-jsrender">' + text + '</script>');
                        var template = $.templates('#js_' + temp);
                        var htmlOutput = template.render(json);
                        $(container).html(htmlOutput);
                        var inGracePeriod = sessionStorage.getItem("inGracePeriod") ? sessionStorage.getItem("inGracePeriod") : false;
                        var prcValue = getPrcCookieValue();
                        var inPreExpirePeriod = sessionStorage.getItem("inPreExpirePeriod") ? sessionStorage.getItem("inPreExpirePeriod") : false;
                        if(data[1] && data[1].PayPerStoryStrip && !window.plsObj.isToiPlusUser && !window.plsObj.isCredPPSUser && !inGracePeriod){
                            setTimeout(showpaidstorymessage(data[1].PayPerStoryStrip, 'ppStory'),1000);
                        }
                        if(data[1] && data[1].PayPerStoryStrip && !window.plsObj.isToiPlusUser && !window.plsObj.isToiPPSUser && !inGracePeriod){
                            setTimeout(showpaidstorymessage(data[1].credStoryStrip, 'credStory'),1000);
                        }
                        if(data[1] && data[1].GEStoryStrip && !window.plsObj.isToiPlusUser){
                            const params = getUrlParams();
                            if(params && (params.utm_source === 'newsshowcase' || params.utm_source === 'GE_Access')){
                                getAllowedMsids().then((allowedMsids)=>{
                                    if(allowedMsids.includes(window.msid)){
                                        setTimeout(showpaidstorymessage(data[1].GEStoryStrip, 'geStory'),1000);
                                    }
                                })
                            }
                        }
                        if(data[1] && data[1].PPSPriceWidget && !window.plsObj.isAllowedReadAccessCountries){
                            console.log("ppsprice",data[1].PPSPriceWidget);
                            showPpsPriceonImage(data[1].PPSPriceWidget);
                        }
                        if(data[1] && data[1].renewalStoryStrip && inGracePeriod === 'true' && prcValue != undefined && prcValue === 5){
                            showRenewPinkStrip(data[1].renewalStoryStrip,'grace')
                        }
                        else if(data[1] && data[1].renewalStoryStrip && inPreExpirePeriod === 'true' && prcValue != undefined && prcValue === 5){
                            showRenewPinkStrip(data[1].renewalStoryStrip,'preExpiry')
                        }
                        else if(data[1] && data[1].renewalStoryStrip && inGracePeriod === 'true' && window.location.href.indexOf('frmapp=yes')>-1){
                            showRenewPinkStrip(data[1].renewalStoryStrip,'frmappgrace')
                        }
                        resolve(htmlOutput)
                    })
                })
                //  return new Promise(function(resolve, reject) {
                //      primePaymentFlow.makereq("/json_toiplus_nudges.cms").then(function(json) {
                //          $("body").append('<script id="' + id + '" type="text/x-jsrender">' + data + '</script>');
                //          var template = $.templates('#' + id);
                //          var htmlOutput = template.render(json);
                //          $(container).html(htmlOutput);
                //          resolve()

                //      })

                //  })
            }
        var makereq = function(api) {
		    return new Promise(function(resolve, reject) {
		        $.ajax({
		            url: api,
		            success: function(content) {
		                resolve(content);
		            },
		            error: function(XMLHttpRequest, textStatus, errorThrown) {
		                console.log(errorThrown)
		                reject({})
		            }

		        });
		    })
		}

        return {
            //test_showcongratsscreen: test_showcongratsscreen,
            init: init,
            loginUser:loginUser,
            getUserExpireDate: getUserExpireDate,
            startPrimeActivationFlow: startPrimeActivationFlow,
            onDocReady: onDocReady,
            showBlockerScreenInit: showBlockerScreenInit,
            appendVerifyMobileScreenHTMLtoBody: appendVerifyMobileScreenHTMLtoBody,
            show_ad_free_nudge:show_ad_free_nudge,
            isPrimeActiveUser: isPrimeActiveUser,
            isFTU: isFTU,
            getPrcCookieValue:getPrcCookieValue,
            fireGAEvent: fireGAEvent,
            expiryDate:expiryDate,
            renderJson:renderJson,
            makereq:makereq
        };
    })();
    
    var SubscribeNudge = (function() {
        var config = {
            api: '/prime_subscribe_nudge.cms',
            storageName : 'SubscribeNudge',
            show_after_session : 3, // show first time on third session,
            show_after_session_rest : 5, // show after 5th session of user
            max_limit_in_month : 5,
            page_visit : 2, // show after 2 page visit,
            popupmanager: 'SubscribeNudge',
            selector: '[data-prime="SubscribeNudge"]',
            listOrShow:['Prime-Home','Prime-articleshow','Prime-HPListing','Prime-photoshow', 'Prime-videoshow', 'newslettertoi']
        }
        
        var run = 0;
        var popup_callbacks;
        var alreadyRunning = false;
        
        var registerwithpopup = function() {
            if (window.TimesApps && TimesApps.PopUpManager) {
                popup_callbacks = TimesApps.PopUpManager.registerPopup(config.popupmanager, SubscribeNudge.init);
            }
        }
        
        function checkRenderRequired(isLogin){
            var mounted = false;
            var isApp = location.href.indexOf('frmapp=yes') === -1; 
            var isPrimePage = config.listOrShow.indexOf(toiprops._Tmpl_pg) > -1;
            var geoInfo = ((typeof(geoinfo) !== "undefined" && typeof geoinfo.CountryCode !='undefined' && geoinfo.CountryCode !='IN'));
            if (isPrimePage || (toiprops && toiprops.adFreeLayerSections != '1') || !isLogin || !isApp || geoInfo || (primePaymentFlow.isPrimeActiveUser() && !primePaymentFlow.isFTU())){
                return mounted;
            }
            
            var localStorageObj = JSON.parse(localStorage.getItem(config.storageName) || '{}');
            var date = new Date();
            if (
                !localStorageObj.timestamp ||
                localStorageObj.timestamp < date.getTime()
            ) {
                date.setDate(date.getDate() + 30);
                localStorageObj.timestamp = date.getTime();
                localStorageObj.session = 0;
            }
            
            localStorageObj.session = parseInt(localStorageObj.session || 0, 10);
            var sessionObj = JSON.parse(sessionStorage.getItem(config.storageName) || '{}');
            
            let increment = false;
            if (!sessionObj.session) {
                increment = true;
            }
            sessionObj.session = sessionObj.session || 1;
            
            var showInSession = (localStorageObj.session === config.show_after_session) || ((localStorageObj.session - config.show_after_session) / config.show_after_session_rest ===1);
            
            var seenCounter = localStorageObj.count || 0;
            
            if (
                localStorageObj.session &&
                seenCounter < config.max_limit_in_month &&
                showInSession
            ) {
                sessionObj.pageview = (sessionObj.pageview || 0) + 1;
                if (sessionObj.pageview === config.page_visit) {
                    mounted = true;
                    localStorageObj.count = seenCounter + 1;
                }
            }
            
            localStorageObj.session += sessionObj.session;
            
            if ((increment && !showInSession) || (mounted && showInSession)) {
                localStorage.setItem(config.storageName, JSON.stringify(localStorageObj));
            }
            sessionStorage.setItem(config.storageName, JSON.stringify(sessionObj), true);
            
        
            return mounted
        }
    
        var showpopup = function() {
            
            var dataToBePassed = {
                prc: primePaymentFlow.getPrcCookieValue()
            };
            
            removePoupup();
            $.get(config.api, dataToBePassed, function(data) {
                if (data != "") {
                    //var $container=$("body");
                    //$("body").append(data);
                    var $div = $('<div class="subscribe_nudge" style="display:none" />').appendTo('body');
                    primePaymentFlow.renderJson(data,'script_subscribenudge',$div,dataToBePassed,nativePayment.config_native.toi_json).then(function(res){
                    setTimeout(function(){
                            $div.show('slow');
                            bindEvents();
                            var prc = primePaymentFlow.getPrcCookieValue();
                            primePaymentFlow.fireGAEvent('SubscribeNudge-Loginuser_View', 'ps-'+ prc +'_'+ location.href,1);
                        
                    },2000);
                        
                    })
                    
                }
            });
        }
    
        var bindEvents = function() {
            $(config.selector).on('click', '[data-closeBtn="SubscribeNudge"]', function() {
                $(config.selector).fadeOut("fast");
                var prc = primePaymentFlow.getPrcCookieValue();
                primePaymentFlow.fireGAEvent('SubscribeNudge-Loginuser_Dismiss', 'ps-'+ prc +'_'+ location.href,1);
            });
            $(config.selector).on('click', '[data-prime="subscribe-now"]', function() {
                var prc = primePaymentFlow.getPrcCookieValue();
                primePaymentFlow.fireGAEvent('SubscribeNudge-Loginuser_CTA_Subscribe Now', 'ps-'+ prc +'_'+ location.href,1);
            });
        }
        
        var removePoupup = function() {
            if ($(config.selector).length > 0){
                $(config.selector).remove();
            }
        }
        
        var _start = function (show){
            require(["tiljs/login"], function(login) {
                var user = login.getUser();
                if (checkRenderRequired(user)){
                    if (show && !alreadyRunning){
                        alreadyRunning = true;
                        showpopup();
                    }else{
                        if (popup_callbacks && mounted) {
                            popup_callbacks.onShowCallback(true);
                        } 
                    }
                }
            });
        }
        
        var init = function(){
            _start(true);
        }
        
        
        require(['tiljs/event'], function(event) {
            event.subscribe("user.status",function(user) {
                _start(true);
            });
            
            event.subscribe("user.logout",function(user) {
                removePoupup();
                alreadyRunning = false;
            });
        });
        
        setTimeout(registerwithpopup, 100);
    
        return {
            init: init,
            checkRenderRequired: checkRenderRequired,
            showpopup: showpopup
        };
    })();
    
    if (!win.SubscribeNudge){
        win.SubscribeNudge = SubscribeNudge;
    }
    
    if (!win.primePaymentFlow){
        win.primePaymentFlow = primePaymentFlow;
    }
    
    
    
   
    
    
    function christmasSaleNudge(){
        var endDate = ((window.geoinfo && window.geoinfo.CountryCode) || getCookie('geo_country')) === 'IN'? new Date('Dec 26, 2021 23:59:00').getTime() : new Date('Dec 31, 2021 23:59:00').getTime();
        var startDate = new Date('Dec 22, 2021 23:00:00').getTime();
        var todayDate = Date.now();
        var passedTime = todayDate - startDate;
        var remainingTime = endDate - todayDate;
        if (passedTime >= 0 && remainingTime >= 0) {
          $("body").addClass('sale_nudge');
        } else {
          $("body").removeClass('sale_nudge');
        }
    }
    
    function initializeEASwg(alreadyConfigured){
            function checkShowcaseUrl(){
                const urlSearchParams = new URLSearchParams(window.location.search);
                const params = Object.fromEntries(urlSearchParams.entries());
                if(Object.keys(params).length !== 0 && params.utm_source === 'newsshowcase'){
                   return true;
                }else{
                    return false;
                }
            }
            function isArticleFree(){
                return false;
            }
    
          (window.SWG = window.SWG || []).push(subscriptions => {
              if(!alreadyConfigured){
                  subscriptions.init('timesofindia.com:showcase');
              }
              
            function getUserState(ssoid){
              const ssoid1 = ssoid || getCookie('ssoid') || getCookie('ssoId');
              const timestamp = parseInt(new Date().getTime() / 1000, 10);
              var key = 'toi_userstate_'+ ssoid1;
              let userStateDetails = localStorage && localStorage.getItem(key)!='' && JSON.parse(localStorage.getItem(key));
              let userState = '';
              if(userStateDetails && userStateDetails?.userState && (userStateDetails?.stored_at + 30*24*60*60) > timestamp) {
                  userState = userStateDetails.userState;
              }
              if (!userState) {
                userState =
                  (ssoid1 && {
                    metering: {
                      state: {
                        id: ssoid1,
                        // Standard attributes which affect your meters.
                        standardAttributes: {
                          registered_user: {
                            timestamp,
                          },
                        },
                      },
                    },
                  }) ||
                  '';
                if(userState) {
                    localStorage.setItem(key, JSON.stringify(
                        {
                            userState: userState,
                            stored_at: timestamp,
                        }
                    ));
                }
              }
              return userState;
            };
            
            //entitlements with publisher promise 
            const checkPublisherSubscriberEntitlements = 
                new Promise(function (resolve, reject) {
                    let publisherEntitlement = {};
                    var paidstories_arr = (sessionStorage.getItem("paidstories") 
                    && sessionStorage.getItem("paidstories") != null ) ? sessionStorage.getItem("paidstories").split(",") : [];
                    var credstories_arr = (sessionStorage.getItem("credstories") && sessionStorage.getItem("credstories") != null ) ? sessionStorage.getItem("credstories").split(",") : [];
                    if(isUserPrc()) {
                        publisherEntitlement = {granted:1, grantReason: 'SUBSCRIBER'};
                    }else if(typeof window.msid != 'undefined' && typeof paidstories_arr !='undefined' && paidstories_arr.length >0){
                        if(paidstories_arr.includes(window.msid.toString())){
                            publisherEntitlement = {granted:1, grantReason: 'SUBSCRIBER'};
                        }
                    }
                    else if(typeof window.msid != 'undefined' && typeof credstories_arr !='undefined' && credstories_arr.length >0){
                        if(credstories_arr.includes(window.msid.toString())){
                            publisherEntitlement = {granted:1, grantReason: 'SUBSCRIBER'};
                        }
                    }
                    resolve(publisherEntitlement);
                });
                
            // See Sync entitlements with Google section
            function checkShowcaseEntitlement(userState) {
                if (userState) {
                // Send userState to Google
                    subscriptions.getEntitlements(userState);
                } else {
                    // If userState is undefined, it’s likely the user isn’t
                    // logged in. Do not send an empty userState to Google in
                    // this case.
                    showGoogleRegwall();
                }
            }
            
            function syncEntitlementsWithGoogle() {
                return checkShowcaseEntitlement(getUserState());
            }
        
            function showGoogleRegwall(){
              window.GaaMeteringRegwall.show({
                iframeUrl: 'https://timesofindia.indiatimes.com/toi_reg_test.cms',
              }).then(credentialResponse => {
                 $('body.prime-body').removeClass('ga-overflowy-hide'); 
                 const channel = 'toi';
                 if(credentialResponse && credentialResponse.credential){
                  
                const jsso = new JssoCrosswalk(channel, 'web');
                let ticketId;
                let ssoId;
                jsso.gpOneTapLogin(credentialResponse.credential, ssoResponse => {
                  ticketId = ssoResponse?.data?.ticket;
                  jsso.getUserDetails(userData => {
                    ssoId = userData?.data?.ssoid;
                    // console.log('middle>>>>>>', ssoId, ticketId, nativePayment.makereq_get_header);
                    if (ssoId && ticketId) {
                        require(["tiljs/cookie"], function(cookie) {
                        var options = {}
                        var planName = '';
                        const userState = getUserState(ssoId);
                        options.ssoId = cookie.get('ssoid') || cookie.get('ssoId') || '';
                        options.ticketId = cookie.get('TicketId') || cookie.get('ticket') || '';
                        if(options.ssoId!=''){ 
                            nativePayment.makereq_get_header(nativePayment.config_native.fetch_plan_status_api, options).then(function(data) {
                                 window.userPrcData = data;
                                //  if(window.userPrcData){
                                //   nativePayment.fireCollectedGa(window.userPrcData);
                                //  }
                                if(data.accessibleFeatures){
                                    window.permission = data.accessibleFeatures.join(',');
                                }
                                if(data.accessType){
                       if(data.accessType==="PAY_PER_ARTICLE"){
                                planName="PAY_PER_ARTICLE";
                            }
                            else if(data.accessType==="TOI_PLUS"){
                                planName="TOIPlusPAID";
                            }
                            else if(data.accessType==="TIMESPRIME"){
                                sessionStorage.setItem('accessType', JSON.stringify(data.accessType));
                                planName="TOIPlus_TimesPrimePaid";
                            } 
                            
                        }
                                window.planName = planName;
                                window.planSource = data.source || '';
                                // window.permission = (data.accessibleFeatures!='')? data.accessibleFeatures.join('_'):''
                                if(data.otps && data.otps.length > 0){
                                  for(i=0;i<data.otps.length;i++){
                                      if(data.otps[i].source && data.otps[i].source=="cred" && data.otps[i].msids){
                                          sessionStorage.setItem('credstories', data.otps[i].msids.toString());
                                      }
                                      if(data.otps[i].source && data.otps[i].source=="others" && data.otps[i].msids){
                                          sessionStorage.setItem('paidstories', data.otps[i].msids.toString());
                                      }
                                  }
                                }
                                //returns promise for google entitlement check
                                checkShowcaseEntitlement(userState);
                           });
                        }
                        })
                    }
                  });
                });
              }
              });
            };
        
            require(["tiljs/login", "tiljs/cookie"], function(login, cookie) {
                
                function isUserRegistered() {
                    if(cookie.get("ssoid") || cookie.get("ssoId")){
                        return true;
                    }else{
                         return false;
                    }
                }
            
                if (checkShowcaseUrl()) {
                  if (isArticleFree()) {
                    subscriptions.setShowcaseEntitlement({
                      entitlement: 'EVENT_SHOWCASE_UNLOCKED_FREE_PAGE',
                      isUserRegistered: isUserRegistered(),
                    });
                  } else if(isUserRegistered()){
                      if($('#swg-regwall-container')[0]){
                          window.GaaMeteringRegwall.remove()
                      }
                        $('body.prime-body').removeClass('ga-overflowy-hide');
                        syncEntitlementsWithGoogle();
                  }else {
                    $('body.prime-body').addClass('ga-overflowy-hide'); 
                    showGoogleRegwall();
                    subscriptions.setOnLoginRequest(() => {
                      $("#login-popup").css('z-index', '2999999999');  
                      login.login();
                      $("#login-popup .close-btn")
                        .on("click", function() {
                            $("#login-popup").css('z-index', '1000');  
                        });
                    });
                  }
                }
              });
              
              
            subscriptions.setOnEntitlementsResponse((entitlementsPromise) => {
               // Wait for Google check and publisher check to finish
               Promise.all([entitlementsPromise, checkPublisherSubscriberEntitlements, getAllowedMsids()]).then((entitlements) => {
                 // Determine Google response from publisher response.
                //  debugger;
                  const [googleEntitlement, publisherEntitlement, allowedMsids] = entitlements;
                if(allowedMsids.includes(window.msid)){
            
                    if(publisherEntitlement.granted) {
                       // B.1b) User has access from publisher so unlock article
                       // unlockArticle(); already unlocked
                       // At the same time, share information about the entitlement with Google.
                       // See here for the specification of PublisherEntitlement: https://git.io/Jk1SW
                      if(publisherEntitlement.grantReason === 'SUBSCRIBER') {
                         // B.1ai) The user has access because they have a subscription
                         subscriptions.setShowcaseEntitlement({
                           entitlement: 'EVENT_SHOWCASE_UNLOCKED_BY_SUBSCRIPTION',
                           isUserRegistered: true
                         });
                       }
                   } else if (googleEntitlement.enablesThisWithGoogleMetering()) {
                        // B.2a) Google returned metering entitlement so grant access
                        googleEntitlement.consume(() => {
                          // B.2ai) Consume the entitlement and trigger a dialog that lets the user
                          // know Google provided them with a free read.
                        });
                    }else{
                        subscriptions.setShowcaseEntitlement({
                           entitlement: 'EVENT_SHOWCASE_NO_ENTITLEMENTS_PAYWALL',
                           isUserRegistered: true
                         });
                        const urlSearchParams = new URLSearchParams(window.location.search);
                        const params = Object.fromEntries(urlSearchParams.entries());
                        if(Object.keys(params).length !== 0 && params.constructor === Object && !params.entitlementcheck){
                            window.location.search += '&entitlementcheck=noentitlements';
                        }
                    }
                }
                });
            });
            
            subscriptions.setOnNativeSubscribeRequest(() => {
                window.location.href = 'https://timesofindia.indiatimes.com/toi-plus/plans';
            });
        });
            
    }
    
    function loadGAScriptAndSwgInitialize(alreadyConfigured){
      const swgSrc = 'https://news.google.com/swg/js/v1/swg.js';
      const swgGaaSrc = 'https://news.google.com/swg/js/v1/swg-gaa.js';
      const swgScript = document.createElement('script');
      const swgGaaScript = document.createElement('script');
    
      swgScript.src = swgSrc;
      swgScript.async = true;
    
      swgGaaScript.src = swgGaaSrc;
      swgGaaScript.async = true;
    
      swgGaaScript.setAttribute('subscriptions-control', 'manual');
      swgScript.onload = function(){
        initializeEASwg(alreadyConfigured);
      };
      document.body.appendChild(swgScript);
      document.body.appendChild(swgGaaScript);
    };
    
    function googleExtendedAccessFlow(alreadyConfigured){
        (function(){
            loadGAScriptAndSwgInitialize(alreadyConfigured);
        })();
    }
    
    function timelineInviewBlockerOntap() {
        console.log('timeline click', $('.disableContent'));
        document.getElementById("disableContent").addEventListener("click", function(e) {
            e.preventDefault();
            console.log('timeline click');
	        var eleTopPosition = $('[data-prime="meteredPaywall"]').offset();
	        alert(eleTopPosition.top);
            $("html, body").animate({ scrollTop: eleTopPosition.top });
        });
    }
    
    
    
    function checkAndFireBannerInViewGa () {
        if ($('.banner_outercontent').length) {
            let gaFired = false;
            function handleIntersection(entries, observer) {
              entries.forEach(entry => {
                if (entry.isIntersecting && !gaFired) {
                    require(["tiljs/login"], function(login) {
                        var user = login.getUser();
                        var prcValue = getPrcCookieValue();
                        if (user){
                            nativePayment.gaEvents('','View_whytoiplus','PS-'+prcValue,1);
                        }
                        else{
                            nativePayment.gaEvents('','View_whytoiplus','PS--1',1);
                        }
                    })
                    gaFired = true;
                }
              });
            }

            const observerOptions = {
              root: null,
              threshold: 0.01
            };

            const observer = new IntersectionObserver(handleIntersection, observerOptions);
            observer.observe($('.banner_outercontent')[0]);
        }
        
        var bannerBtns = document.querySelectorAll('.bannerBenefit_btn');
        var options = {
          root: null,
          threshold: 0.1
        };
        
        var callback = function(entries, observer) {
          entries.forEach(function(entry) {
            if (entry.isIntersecting) {
              require(["tiljs/login"], function(login) {
                var user = login.getUser();
                var prcValue = getPrcCookieValue();
                var index = entry.target.getAttribute("data-index");
                if (user) {
                  nativePayment.gaEvents('', 'View_whytoiplus_subs CTA ' + index, 'PS-' + prcValue, 1);
                  observer.unobserve(entry.target);
                } else {
                  nativePayment.gaEvents('', 'View_whytoiplus_subs CTA ' + index, 'PS--1', 1);
                  observer.unobserve(entry.target);
                }
              });
            }
          });
        };
        
        bannerBtns.forEach(function(btn) {
          var observer = new IntersectionObserver(callback, options);
          observer.observe(btn);
        });
    }
    
    $(doc).ready(function(){
        try{
        primePaymentFlow.onDocReady();
        SubscribeNudge.init();
        // killMasterSwitchForSubscription();
        christmasSaleNudge();
        checkAndFireBannerInViewGa();
        if(window.location.href.indexOf("/toi-plus/faq") !== -1) {
            $('div[data-prime="free-trial-top"]').remove();
        }
        
           const urlSearchParams = new URLSearchParams(window.location.search);
           const params = Object.fromEntries(urlSearchParams.entries());
           if(Object.keys(params).length !== 0 && params.constructor === Object){
            const cookieName = params.utm_source ? getCookie(params.utm_source) : "";
               if(cookieName == null) {
                   var date = new Date();
                date.setTime(date.getTime()+(30*24*60*60*1000));
                var expires = "; expires="+date.toGMTString();
                document.cookie = `utm_source=${params.utm_source};${expires}`;
                if(params.utm_source == "admitad") {
                    document.cookie = `utm_source_id=${params.admitad_uid};${expires}`;
                    document.cookie = `utm_admitad_expires=${date};${expires}`;
                }else {
                    document.cookie = "utm_source_id=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
                }
            } else if (params.utm_source == "admitad") {
                var cookieVal = getCookie(params.admitad_uid);
                if(cookieVal == null) {
                    var cookieexpire = `; expires=${getCookie("utm_admitad_expires")}`;
                    document.cookie = `utm_source_id=${params.admitad_uid};${cookieexpire}`;
                }
            }
           }
        }catch(ex){}    
    });
    
    
    
    
    
    
    function getCookie(name) {
    var cookieArr = document.cookie.split(";");
    // Loop through the array elements
    for(var i = 0; i < cookieArr.length; i++) {
        var cookiePair = cookieArr[i].split("=");
        if(name == cookiePair[1].trim()) {
            return decodeURIComponent(cookiePair[1]);
        } else if(name == cookiePair[0].trim()) {
            return decodeURIComponent(cookiePair[1]);
        }
    }
    return null;
}
    function getAllowedMsids() {
        return new Promise(function(resolve, reject) {
            const url = 'https://subs.timesofindia.com/subscriptions/proxy/gsc/fetch-showcase/json';
    
            if (!sessionStorage.getItem("GE_Access_msids")) {
                nativePayment.makereq_get_header(url, {})
                    .then(function (resp) {
                        if (resp && resp.data) {
                            let allowedMsids = resp.data.length > 0 ? resp.data.map((obj) => {
                                return parseInt(obj.msid);
                            }) : [];
                            sessionStorage.setItem("GE_Access_msids", JSON.stringify(
                                {
                                    data: allowedMsids,
                                    stored_at: new Date(),
                                }
                            ));
                            resolve(allowedMsids);
                        } else {
                            resolve([]);
                        }
                    })
                    .catch(function (err) {
                        resolve([]);
                        console.log('Fetch Error :msids', err);
                    });
            } else {
                const msids_data = JSON.parse(sessionStorage.getItem("GE_Access_msids"));
                const now = new Date();
                const expiration = new Date(msids_data.stored_at);
                expiration.setMinutes(expiration.getMinutes() + 10);
    
                if (now.getTime() > expiration.getTime()) {
                    sessionStorage.removeItem("GE_Access_msids");
                    getAllowedMsids().then(function(allowedMsids){
                        resolve(allowedMsids);
                    })
                    .catch(function (err) {
                        resolve([]);
                        console.log('Fetch Error :msids', err);
                    });
                    
                } else {
                    resolve(msids_data.data);
                }
    
            }
        });
    }
    
    function getUrlParams(){
        const urlSearchParams = new URLSearchParams(window.location.search);
        const params = Object.fromEntries(urlSearchParams.entries());
        if(Object.keys(params).length !== 0 && params.constructor === Object){
            return params;
        }
        return null;
    }
    
    var killMasterSwitch = false;
    var alreadyFiredGaStorypopover = false;
    function killMasterSwitchForSubscription() {
               const urlParams1 = new URLSearchParams(window.location.search);
               const myParam = urlParams1.get('test');
            //   if(myParam){
                   $.ajax({
                    url: "https://subs.timesofindia.com/subscriptions/config/toiw/switch?lang=1&fv=668",
                    success: function(content) {
                    content.ps ? "" : hideNudges()
                 //    cookie.set("killSwitch", content.ps);
                    }
                })
            // }
    }
        
        function hideNudges(){
            killMasterSwitch = true;
            setTimeout(function() {
           if(document.querySelector('[data-prime="meteredPaywall"]') !== null && document.querySelector('[data-page="primeshowee"]') === null &&!window.plsObj.isAllowedReadAccessCountries){
            children = document.querySelectorAll('[data-prime="meteredPaywall"]');
            children === null ? "" : document.querySelector('[data-prime="meteredPaywall"]').style.display = "none";    
            }
            }, 1000)
        if(document.querySelector('[data-prime="meteredPaywall"]') !== null){
            children = document.querySelectorAll('[data-prime="meteredPaywall"] .common_blocker_box');
            children !== null ? "" : document.querySelector('[data-prime="meteredPaywall"]').style.display = "none";
        }
        if(document.querySelector('[data-prime="blocker-container"]') !== null){
            if(window.plsObj.isAllowedReadAccessCountries){
              document.querySelector('[data-prime="blocker-container"]').setAttribute("class", "readonlyaccess"); 
              document.querySelector('[data-prime="blocker-container"]').style.display = "block";
            }
            else{
            document.querySelector('[data-prime="blocker-container"]').style.display = "none";
            }
        }
        setTimeout(function() {
            if(document.querySelector('[data-prime="add-free-nudge-container"]') !== null)
            document.querySelector('[data-prime="add-free-nudge-container"]').remove();
        },3000)
        
            
        if(!primePaymentFlow.isPrimeActiveUser()){
            $(".prime").css({"display":"none"})
        }
            
        
        }
        
    
    
})(window, document, jQuery, require);




    define('tiljs/apps/times/tpmodal',[
        "../../util",
        "module",
        "../../page",
        "../../event",
        "../../ajax",
        "../../cookie",
        "../../login"
    ],
    function (util, module, page, event, ajax, cookie, login) {
        var default_config = {};
        var config = util.extend(true, {}, default_config, module.config());
        var tpEndPoint = 'https://tpapi.timespoints.com';
        // var tpEndPoint = 'https://test.timespoints.com/tpapi';
        var userLoggedIn = true;
        var mod_tpmodal = {};
        var tpJSloaded = false;
        var widgetInitialized = false;
        var activitiesMapList = null;
        var gAllActivities = null;
        var activityDependencyQueue = [];
        var loginStatusChanged = false;
        var CAMPAIGN_DAYS = 5;
        
        var constants = {
            apiUrls: {
                allActivities: (window.location.host === 'toidev.indiatimes.com') ? '/tpallactivities_dev.cms': '/tpallactivities_v2.cms',
                tpFAQ: '/tp_faq.cms?msid=76036519'
            },
            historyCampaignName : (window.location.host === 'toidev.indiatimes.com') ? 'campaign233904': 'campaign7514741',
            tpJSSdk: 'https://test-img.timespoints.com/static/tpsdk/tp-sdk.js',
            checkinInfoMsg: 'You are $1 away from $2 TimesPoints',
            checkinInfoMsgPopUp: 'You have earned +$1 points for today’s visit',
            checkinDoneInfoMsg: 'Yay! You just earned $1 TimesPoints',
            module_name : 'timespointPopUp',
            tabIdToCategoryMap: {tab1: 'Earn_TimesPoint', tab2: 'TimesPoints_Activity', tab3: 'TimesPoints_FAQ'},
            offersMapping: {
                top : {
                    offerCount: 2,
                },
                away : {
                    offerCount: 2,
                },
                exclusive : {
                    offerCount: 2,
                }
            }
        };
        
        var $tpModal = $('#times-point-modal');
        var $tpPopup = $('#timespoint-popup');
        var $tpwrapper = $('.timespoint-wrapper');
        var userDetailsTab = $tpModal.find('.tab-content.activity');
        var howToEarnTab = $tpModal.find('.tab-content.how-to');
        var faqTab = $tpModal.find('.tab-content.faq');
        var popUpCallbackTimeoutVal;
        var popUpCancelled = false;
        
        var cachedElements = {
            totalPoints: userDetailsTab.find('[data-userdetails="lifetime"]'),
            redeemed: userDetailsTab.find('[data-userdetails="redeemed"]'),
            expired: userDetailsTab.find('[data-userdetails="expired"]'),
            redeemable: userDetailsTab.find('[data-userdetails="redeemable"]'),
            user: userDetailsTab.find('[data-userdetails="name"]'),
            activityList: howToEarnTab.find('.tp-list'),
            offersDetails: howToEarnTab.find('.offers-detail'),
            rewardsList: howToEarnTab.find('.gift-cards ul'),
            dailyCheckInHtml: howToEarnTab.find('.checkin-list .checkin-parent'),
            checkInDays: howToEarnTab.find('.checkin-days'),
            checkinInfo: howToEarnTab.find('.checkin-info p'),
            checkinInfoLogin: howToEarnTab.find('.checkin-info-login'),
            tpList: howToEarnTab.find('ul.tp-list'),
            tpListDailyActivity: userDetailsTab.find('ul.tp-list'),
            todaysDate: $('#tp-todays-date'),
            profile: userDetailsTab.find('.profile .inner')
        };
        
        var moduleData = {
            didPromiseReturn: false,
            didPopUpShow: false
        };
        
        var fn = {
            startLoggedInUserFlow: function(ssoid) {
                tpsdk('init',{platform:'web',ticketId: fn.getTicketId(), channelCode:'TOI'});
                cachedElements.checkinInfoLogin.hide();
                cachedElements.checkinInfo.show();
                // fn.init(ssoid);
            },
            startNonLoggedInUserFlow: function() {
                tpsdk('init',{platform:'web', channelCode:'TOI'});
                window.tpsdk('fetch','nextEngagement',"" , fn.checkIfUserPointsMerged,fn.apiFailed);
                // fn.init();
            },
            init: function(ssoid) {
                // fn.getUserProfile();
                // fn.getUserRewards();
                // fn.getDailyCheckInDetail();
                // fn.getDailyActivity();
            },
            apiFailed: function() {
                
            },
            getDailyActivity: function() {
              tpsdk('fetch','dailyReport', "", fn.createDailyActivityHtml, fn.apiFailed);  
            },
            sanitizeResult: function(data) {
                if (typeof data === 'string') {
                    data = JSON.parse(data);
                }
                
                return data;
            },
            getNthDate: function(val) {
                if (typeof val !== 'number') {
                    return '';
                }
                
                var num = val % 10;
                var nthStr = val;
                if (val === 11 || val === 12 || val === 13) {
                    nthStr += 'th';
                    return nthStr;
                }
                switch(num) {
                    case 1: 
                        nthStr += 'st';
                        break;
                    case 2:
                        nthStr += 'nd';
                        break;
                    case 3:
                        nthStr += 'rd';
                        break;
                    default:
                        nthStr += 'th';
                        break;
                }
                
                return nthStr;
            },
            getDailyActivityItem: function(activity, activityDetails) {
                var pointsTobeShown = !isNaN(activity.points) ? parseInt(activity.points) : 0;
                
                var tmpl    =   '<li class="flexbox justify-between">'
                            +       '<div class="column">'
                            +           '<h5>' + activityDetails.label + '</h5>';
                            
                if (activityDetails.type === 'checkin' && activity.listBonusDetails && activity.listBonusDetails[0]) {
                    if(pointsTobeShown > 0){
                        var dailyCheckinBonusPoints = activity.listBonusDetails[0].bonus;
                        dailyCheckinBonusPoints = !isNaN(dailyCheckinBonusPoints) ? parseInt(dailyCheckinBonusPoints) : 0;
                        pointsTobeShown = parseInt(activity.points) + dailyCheckinBonusPoints;    
                    }
                    var pointsTobeGivenAtLastDay = fn.getDailyCheckInPlusCheckInBonusPoints();
                    if(activity.listBonusDetails[0].campaignAchieved){
                        tmpl    +=          '<p class="campaign-achieved-text">Great! You just earned ' + pointsTobeGivenAtLastDay + ' TimesPoints</p>';    
                    }
                    else{
                        tmpl    +=          '<p class="red-text">' + activity.listBonusDetails[0].days_left + ' days left for ' + pointsTobeGivenAtLastDay + ' TimesPoints</p>';    
                    }
                    
                }
                else if (activityDetails.dailyTxt){
                    tmpl    +=          '<p>' + activityDetails.dailyTxt + '</p>';
                }
                tmpl        +=      '</div>'
                            +       '<div class="column act-count">'
                            +           '<p>' + (pointsTobeShown > 0? '+': '') + pointsTobeShown + '</p>'
                            +           '<p class="tp-sprite green-text">'+ activityDetails.actDoneTxt.replace('$1', activity.count).replace('$2', (activity.count > 1? 's': '')) + '</p>'
                            +       '</div>'
                            +   '</li>';
                            
                return tmpl;
            },
            createDailyActivityHtml: function(data) {
                data = fn.sanitizeResult(data);
                var date = new Date();
                var dateStr = fn.getNthDate(date.getDate()) + ' ' + fn.getMonth(date.getMonth()) + ' ' + date.getFullYear();
                cachedElements.todaysDate.html(dateStr);
                
                var innerFn = function() {
                    var html = '';
                    if (data && data.responseCode === 'TP_100' && data.response && data.response.activities) {
                        var activities = data.response.activities;
                        for (var objKey in activities) {
                            if (activities.hasOwnProperty(objKey) && activitiesMapList[objKey] && activitiesMapList[objKey].skip !== '1') {
                                // console.log(objKey);
                                html += fn.getDailyActivityItem(activities[objKey], activitiesMapList[objKey]);
                            }
                        }
                        
                        cachedElements.tpListDailyActivity.removeClass('tp-loading').html(html);
                    }
                }
                
                if (activitiesMapList) {
                    innerFn();
                } else {
                    activityDependencyQueue.push(innerFn);
                }
            },
            getUserRewards: function(ssoid) {
                tpsdk('fetch', 'offerDetails',"" , fn.createUserRewardsHtml, fn.apiFailed);
            },
            changeUserProfileData: function(data) {
                data = fn.sanitizeResult(data);
                var originalImg = 'https://timesofindia.indiatimes.com/photo/63379366.cms';
                if (data && data.response && data.responseCode === 'TP_100') {
                    cachedElements.profile.removeClass('tp-loading');
                    var user = login.getUser();
                    var isUserLoggedIn = user && typeof user.getUid === 'function' && user.getUid()? true: false;
                    var redeemable = (isUserLoggedIn? data.response.redeemablePoints: data.response.totalPoints) || 0;
                    cachedElements.totalPoints.text(data.response.totalPoints || 0);
                    cachedElements.redeemed.text(data.response.redeemedPoints || 0);
                    cachedElements.expired.text(data.response.expiredPoints || 0);
                    cachedElements.redeemable.text(redeemable);
                    cachedElements.user.text('Hello ' + (user && user.getFirstName() || 'Guest'));
                    if (user && typeof user.getThumb === 'function' && user.getThumb()) {
                        originalImg = user.getThumb();
                    }
                    cachedElements.profile.find('figure img').attr('src', originalImg);
                    if (redeemable !== 0 && isUserLoggedIn) {
                        $tpModal.find('.tp-redeem').show();
                        $tpModal.find('.redeem-points-sticky').show();
                        $tpModal.find('.redeem-points-sticky .tp-redeem').text('REDEEM ' + redeemable + ' POINTS');
                    } else if (!user || typeof user.getUid !== 'function' || !user.getUid()) {
                        $tpModal.find('.tp-redeem').show();
                        $tpModal.find('.redeem-points-sticky').show();
                        // $tpModal.find('.redeem-points-sticky .tp-redeem').text('LOGIN & REDEEM');
                    } else {
                        $tpModal.find('.tp-redeem').hide();
                        $tpModal.find('.redeem-points-sticky').hide();
                    }
                }
            },
            getUserProfile: function(ssoid) {
                tpsdk('fetch','userPoints',"" , fn.changeUserProfileData, fn.apiFailed);
            },
            getDailyCheckInDetail: function(callback, failCallback) {
                var curDate = new Date().getTime();
                var period = 86400 * 1000 * 7;
                var sDate = curDate - period;
                var eDate = curDate + period;
                if (typeof tpsdk !== 'function') {
                    // fn.loadTpJS();
                    fn.changeUserStatusHandler();
                }
                tpsdk('fetch','campaignHistory', {sdate: sDate, edate: eDate, cname: constants.historyCampaignName}, callback || fn.createDailyCheckInHtml, failCallback || fn.apiFailed);
            },
            getMonth: function(index, shortVal) {
                if (typeof index !== 'number' || index > 11) {
                    return '';
                }
                
                var monStr = '';
                var monArr = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
                monStr = monArr[index];
                if (shortVal) {
                    monStr = monStr.substring(0, 3);
                }
                
                return monStr;
            },
            getDateStr: function(dateVal) {
                return dateVal.getDate() + ' ' + fn.getMonth(dateVal.getMonth(), true);
            },
            getDailyCheckInDays: function(dailyCheckinData, todayIndex) {
                var counter = todayIndex;
                var counterEndIndex = todayIndex - CAMPAIGN_DAYS;
                var checkInDays = 0;
                
                for (; counter >= counterEndIndex; counter--) {
                    if(dailyCheckinData[counter].status !== 1 || (dailyCheckinData[counter].campaignAchieved && counter !== todayIndex)) {
                        break;
                    }
                    
                    checkInDays++;
                }
                
                return Math.min(checkInDays, CAMPAIGN_DAYS);
            },
            
            /* below function is to get daily check-in and check bonus points at lat day of check-in bonus activity */
            getDailyCheckInPlusCheckInBonusPoints: function() {
                var dailyCheckInPlusCheckInBonusPoints = 0;
                var dailyCheckinPoints = 0;
                var dailyCheckinBonusPoints = 0;
                var dailyCheckinPointsFlag = false;
                var dailyCheckinBonusPointsFlag = false;
                if (gAllActivities.data && gAllActivities.data.activities && gAllActivities.data.activities.length > 0) {
                    var lActivityList = gAllActivities.data.activities;
                    for (counter = 0; counter < lActivityList.length; counter++) {
                        var activitycode = lActivityList[counter].code;
                        if(activitiesMapList[activitycode].type === 'checkin'){
                            dailyCheckinPoints = lActivityList[counter].assign_points;
                            dailyCheckinPointsFlag = true;
                        }
                        if(activitiesMapList[activitycode].type === 'checkin_bonus'){
                            dailyCheckinBonusPoints = lActivityList[counter].assign_points;
                            dailyCheckinBonusPointsFlag = true;
                        }
                        if (dailyCheckinPointsFlag && dailyCheckinBonusPointsFlag) {
                            break;
                        }
                    }
                    dailyCheckInPlusCheckInBonusPoints = dailyCheckinPoints + dailyCheckinBonusPoints;
                }
                return dailyCheckInPlusCheckInBonusPoints;
            },
            
            getCheckInStr: function(checkInDays, isCheckinDoneInfoRequired) {
                var checkInStr;
                var days = CAMPAIGN_DAYS - checkInDays;
                var pointsTobeGivenAtLastDay = fn.getDailyCheckInPlusCheckInBonusPoints();
                if (checkInDays < CAMPAIGN_DAYS && pointsTobeGivenAtLastDay > 0) {
                    checkInStr = constants.checkinInfoMsg.replace('$1', days + (days > 1 ? ' days': ' day')).replace('$2', pointsTobeGivenAtLastDay);
                }
                else if(!!isCheckinDoneInfoRequired){
                    checkInStr = constants.checkinDoneInfoMsg.replace('$1', pointsTobeGivenAtLastDay);
                }
                return checkInStr;
            },
            
            getCheckInStrForPopUp: function(checkInDays, pointsEarned) {
                var checkInStr;
                var pointsTobeGivenAtLastDay = fn.getDailyCheckInPlusCheckInBonusPoints();
                if (checkInDays < CAMPAIGN_DAYS && pointsTobeGivenAtLastDay > 0) {
                    checkInStr = constants.checkinInfoMsgPopUp.replace('$1', checkInDays === CAMPAIGN_DAYS? pointsTobeGivenAtLastDay: pointsEarned);
                }
                return checkInStr;
            },
            
            createCarousel: function() {
                if (cachedElements.dailyCheckInHtml.hasClass('slick-initialized')) {
                    return;
                }
                cachedElements.dailyCheckInHtml.slick({
                    //centerMode: true,
                    infinite: false,
                    centerPadding: false,
                    initialSlide: 5,
                    slidesToShow:5,
                    arrows: true,
                    draggable: false,
                    prevArrow: howToEarnTab.find('.checkin-list .btn-grp .prev'),
                    nextArrow: howToEarnTab.find('.checkin-list .btn-grp .next')
                });
            },
            createDailyCheckInHtml: function(data) {
                data = fn.sanitizeResult(data);
                var innerFn = function() {
                    var html = '';
                    var dailyCheckInTmpl    =   '<div>'
                                            +       '<div class="checkin $1">'
                                            +           '<i class="icon tp-sprite"></i>'
                                            +           '<h5>$2</h5>'
                                            +           '<span class="date">$3</span>'
                                            +       '</div>'
                                            +   '</div>';
                    
                    if (data && data.responseCode === 'TP_100' && data.response && data.response.items && data.response.items.length > 0) {
                        var dailyCheckinData = data.response.items;
                        var length = dailyCheckinData.length;
                        var counter = 0;
                        var dateVal;
                        var dateStr;
                        var isToday = false;
                        var todayIndex = -1;
                        var bonusClassMap = {'-1': 'upcoming', '0': 'bonus-lost', '1': 'bonus-earned'};
                        for (; counter < length; counter++) {
                            var pointsTobeShown = 0;
                            if(dailyCheckinData[counter].status !== -1){
                                pointsTobeShown = dailyCheckinData[counter].bonusearned + dailyCheckinData[counter].coinsearned;    
                            }
                            dateVal = new Date(dailyCheckinData[counter].timestamp);
                            dateStr = fn.getDateStr(dateVal);
                            isToday = dailyCheckinData[counter].istoday || false;
                            html += dailyCheckInTmpl
                                    .replace('$1', (bonusClassMap[dailyCheckinData[counter].status] + (isToday? ' todayCheckin': '')))
                                    .replace('$2', pointsTobeShown)
                                    .replace('$3', isToday? 'Today': dateStr);
                            
                            if (isToday) {
                                todayIndex = counter;
                            }
                        }
                    }
                    
                    if (cachedElements.dailyCheckInHtml.hasClass('slick-initialized')) {
                        cachedElements.dailyCheckInHtml.slick('unslick');
                    }
                    
                    cachedElements.dailyCheckInHtml.removeClass('tp-loading').html(html);
                    
                    if ($tpwrapper.is(':visible')) {
                        fn.createCarousel();
                    }
                    
                    var checkInDays = fn.getDailyCheckInDays(dailyCheckinData, todayIndex);
                    var checkInStr = fn.getCheckInStr(checkInDays);
                    
                    cachedElements.checkInDays.text(checkInDays);
                    cachedElements.checkinInfo.html(checkInStr);
                }
                
                if (activitiesMapList) {
                    innerFn();
                } else {
                    activityDependencyQueue.push(innerFn);
                }
            },
            getReorderedList: function (activities, orderDetails) {
                var counter = 0;
                var reorderedArray = [];
                var activityIndex = -1;
                if (activities && activities.length > 0 && orderDetails && orderDetails.length > 0) {
                    for (; counter < activities.length; counter += 1) {
                      activityIndex = orderDetails.indexOf(activities[counter].code);
                      if (activityIndex !== -1) {
                        reorderedArray[activityIndex] = activities[counter];
                      }
                    }
                    return reorderedArray;
                }
                return activities;
            },
            getAllActivities: function() {
                if (gAllActivities) {
                    return;
                }
                ajax.get(constants.apiUrls.allActivities, function(data) {
                    if (data && data.activitiesList && data.activitiesList.data && data.activitiesList.data.activities) {
                        if (typeof data.activityOrder !== 'undefined'){
                            var orderedAllActivities = fn.getReorderedList(data.activitiesList.data.activities, data.activityOrder);
                            data.activitiesList.data.activities = orderedAllActivities;
                        }
                        fn.setActivityDataInLocalStore(data.activitiesList.data.activities);
                        if (data.activitiesMap) {
                            activitiesMapList = data.activitiesMap;
                            gAllActivities = data.activitiesList;
                            if (activityDependencyQueue && activityDependencyQueue.length > 0) {
                                // console.log(activityDependencyQueue.length);
                                for (var i = 0; i < activityDependencyQueue.length; i++) {
                                    (activityDependencyQueue[i])();
                                }
                                
                                activityDependencyQueue = [];
                            }
                        }
                        
                        fn.createAllActivitiesHtml(data.activitiesList.data.activities, data.activitiesMap);
                    }
                    else{
                        gAllActivities= {};
                    }
                    event.publish("tpallactivitiesloaded", data);
                });
            },
            getActivityHtml: function(data, activityInfo) {
                var pointsTobeGivenAtLastDay = 0;
                var pointsTobeShown = activityInfo.assign_points;
                if (data.type === 'checkin' && activityInfo.campaigns && activityInfo.campaigns[0] && activityInfo.campaigns[0].milestoneList && activityInfo.campaigns[0].milestoneList.length > 0) {
                    //Considering day point for check-in bonus points
                    var dailyCheckinBonusPoints = activityInfo.campaigns[0].milestoneList[0].point;
                    dailyCheckinBonusPoints = !isNaN(dailyCheckinBonusPoints) ? parseInt(dailyCheckinBonusPoints) : 0;
                    pointsTobeShown = pointsTobeShown + dailyCheckinBonusPoints;
                    
                    pointsTobeGivenAtLastDay = fn.getDailyCheckInPlusCheckInBonusPoints();
                }
                var dynamicAttributes = '';
                for (let key in data.attrObj) {  
                    dynamicAttributes +=key + '=' +data.attrObj[key] + ' ';
                }
                var activityTmpl    =   '<li ' + dynamicAttributes + ' class="' + data.className + '">';
                if (data.link) {
                    activityTmpl    +=      '<a href="' + data.link + '" class="tp-sprite">';                   
                }
                activityTmpl        +=          '<i class="tp-sprite"></i>'
                                    +           '<h5>' + data.label + '</h5>'
                                    +           '<p>' + data.desc.replace('$1', pointsTobeShown).replace('$2', (pointsTobeShown > 1 ? 's': '')).replace('$3', pointsTobeGivenAtLastDay) + '</p>';
                if (data.link) {
                    activityTmpl    +=      '</a>';                   
                }
                
                activityTmpl        +=   '</li>';
                return activityTmpl;
            },
            createAllActivitiesHtml: function(activitiesList, activitiesMap) {
                var html = '';
                var activityHtml = '';
                var counter = 0;
                var activity;
                if (activitiesList.length > 0 && activitiesMap) {
                    for (; counter < activitiesList.length; counter++){
                        activity = activitiesMap[activitiesList[counter].code];
                        if (activity && activity.skip !== '1') {
                            activityHtml += fn.getActivityHtml(activity, activitiesList[counter]);   
                        }
                    }
                }
                
                cachedElements.tpList.removeClass('tp-loading').html(activityHtml);
            },
            getFaq: function() {
                ajax.get(constants.apiUrls.tpFAQ, function(data) {
                    if (data) {
                        faqTab.html(data);
                    }
                });
            },
            checkIfUserPointsMerged: function(data) {
                // console.log(data);
                data = fn.sanitizeResult(data);
                if (data && data.responseCode === 'TP_100' && data.response && data.response.merged) {
                    $tpModal.find('.redeem-points-sticky .tp-redeem').text('Login to earn TimesPoints');
                    cachedElements.checkinInfoLogin.show();
                    cachedElements.checkinInfo.hide();
                } else {
                    $tpModal.find('.redeem-points-sticky .tp-redeem').text('LOGIN & REDEEM');
                    cachedElements.checkinInfoLogin.hide();
                    cachedElements.checkinInfo.show();
                }
            },
            createUserRewardsHtml: function(data) {
                var rewardsHtml = '';
                data = fn.sanitizeResult(data);
                var rewardsHtmlTmpl =   '<li>'
                                    +       '<a href="$0" target="_blank" rel="noopener nofollow noreferrer">'
                                    +           '<span>$1</span>'
                                    +           '<div class="details flexbox justify-between">'
                                    +               '<div class="partner-logo">'
                                    +                   '<img src="$2" alt=""/>'
                                    +               '</div>'
                                    +               '<div class="card-info">'
                                    +                   '<p><span>$3</span></p>'
                                    +                   '<h3>$4 <i class="icon tp-sprite"></i></h3>'
                                    +               '</div>'
                                    +           '</div>'
                                    +       '</a>'
                                    +   '</li>';
                if(data && data.responseCode === 'TP_100' && data.response && data.response.offers) {
                    var offersMapping = constants.offersMapping;
                    for (var objKey in offersMapping) {
                        if(offersMapping.hasOwnProperty(objKey) && offersMapping[objKey]){
                            var counter = 0;
                            var noOfOffersTobeShown = offersMapping[objKey].offerCount || 0;
                            var offersData = data.response.offers[objKey];
                            if(offersData){
                                var noOfOffersReceived = offersData.length;
                                if (noOfOffersTobeShown > 0 && noOfOffersReceived > 0) {
                                    var length = Math.min(noOfOffersReceived, noOfOffersTobeShown);
                                    for (; counter < length; counter++) {
                                        var offer = offersData[counter];
                                        var redeemText = 'Click to redeem this deal';
                                        if(offer.awaypoints > 0){
                                            redeemText = 'You are ' + offer.awaypoints +' Point(s) away to redeem';    
                                        }
                                        rewardsHtml += rewardsHtmlTmpl.replace('$0', offer.targetUrl)
                                        .replace('$1', redeemText)
                                        .replace('$2', offer.imageurl)
                                        .replace('$3', offer.title)
                                        .replace('$4', offer.point)
                                    }
                                }    
                            }
                        }
                    }
                    cachedElements.rewardsList.removeClass('tp-loading').html(rewardsHtml);
                }
                if(rewardsHtml === ''){
                    cachedElements.offersDetails.hide();
                }
            },
            closeBtnHandler: function() {
                $('.timespoint-wrapper').removeClass('active');
                $('body').removeClass('disable-scroll');
            },
            bindEvents: function() {
                $tpModal
                    .off('click', '.close-btn').on('click', '.close-btn', fn.closeBtnHandler);
                    
                $tpModal
                    .off('click', '.freetrial').on('click', '.freetrial', fn.closeBtnHandler);
                    
                $tpwrapper.off('click').on('click', function(e){
                    var $elem = $(e.srcElement);
                    if($elem.hasClass('timespoint-wrapper')) {
                        fn.closeBtnHandler();
                    }
                });
                
                $tpModal.find('.more-btn').off('click').on('click', function(e) {
                    $(this).parent().hide();
                    cachedElements.tpList.addClass('showall');
                });
                $tpModal.find('.tp-redeem').off('click').on('click', function(e) {
                    var user = login.getUser();
                    var isLoggedIn = false;
                    if (typeof user === 'object' && typeof user.getUid === 'function' && user.getUid()) {
                        isLoggedIn = true;
                    }
                    
                    if (isLoggedIn) {
                        fn.redirectToTpPage();
                    } else {
                        login.login(fn.redirectToTpPage);
                    }
                    
                    var $this = $(this);
                    var label = 'redeem_top';
                    if ($this.hasClass('redeem-points-sticky')) {
                        label = 'redeem';
                        
                    }
                    
                    fn.fireGAEvent(category, '', label);
                });
                $tpModal.find('input[name="tabGroup"]').off('change').on('change', fn.fireGAOnTabChange);
                $tpModal.find('.view-all-btn').off('click').on('click', function() {
                   fn.fireGAEvent('Earn_TimesPoint', 'view_all'); 
                });
            },
            redirectToTpPage: function() {
                window.open('https://www.timespoints.com/products?utm_source=TOI&utm_medium=timespoint&utm_campaign=daily_checkin', '_blank');
            },
            getTicketId: function() {
                return cookie.get("TicketId");
            },
            loadTpJS: function(callback) {
                (function (g, r, o, w, t, h, rx) {
                    g[t] = g[t] || function () {
                        (g[t].q = g[t].q || []).push(arguments)
                    }, g[t].l = 1 * new Date();
                    g[t] = g[t] || {};
                        // h = r.createElement(o),
                        // rx = r.getElementsByTagName(o)[0];
                    // h.async = 1;
                    // h.src = w;
                    // rx.parentNode.insertBefore(h, rx)
                })(window, document, 'script', constants.tpJSSdk, 'tpsdk');
            },
            subscribeLoginEvents: function() {
                // event.subscribe("user.login", function(user){
                //     fn.startLoggedInUserFlow();
                //     loginStatusChanged = true;
                // });
                // event.subscribe("user.logout", function(){
                //     console.log('logout');
                //     if (typeof window.tpsdk === 'function') {
                //         window.tpsdk('logout');
                //     }
                    
                //     fn.startNonLoggedInUserFlow();
                //     loginStatusChanged = true;
                // });
                event.subscribe("user.status",function(user){
                    fn.changeUserStatusHandler(user);
                    loginStatusChanged = true;
                });
            },
            changeUserStatusHandler: function(user) {
                var ssoid = cookie.get("ssoid");
                if (user && ssoid) {
                    fn.startLoggedInUserFlow();
                } else {
                    if (typeof window.tpsdk === 'function') {
                        window.tpsdk('logout');
                    }
                    fn.startNonLoggedInUserFlow();
                }
            },
            setActivityDataInLocalStore: function(data) {
                var counter = 0;
                var activityMap = {};
                if (data && data.length > 0 && typeof window.localStorage !== 'undefined') {
                    for (; counter < data.length; counter += 1) {
                        activityMap[data[counter].code] = data[counter].maxcap;
                        //activityMap[data[counter].code] = data[counter].assign_points;
                    }
            
                    try {
                        window.localStorage.setItem('allActivityConfig', JSON.stringify(activityMap));
                    } catch (e) {
                        // console.log(e);
                    }
                }
            },
            fireGAEvent: function(category, action, label) {
                if (typeof window.ga === 'function') {
                    ga('send', 'event', category, action || window.location.href, label);
                }
            },
            getTabCategory: function() {
                var tabId = $tpModal.find('input[name="tabGroup"]:checked').attr('id');
                var category = constants.tabIdToCategoryMap[tabId];
                return category;
            },
            fireGAOnTabChange: function() {
                var category = fn.getTabCategory();
                fn.fireGAEvent(category, 'open');
            },
            searchActivityObjInList: function(allActivity, activityCode) {
                var activityArr = $.grep(allActivity, function(obj){ return obj.code == activityCode; });
                return activityArr[0];
            }
        };
        
        var popUpFn = {
            loadModal: function() {
                fn.getDailyCheckInDetail(popUpFn.createDailyCheckInHtml, popUpFn.dailyCheckInApiFail);
                // fn.getAllActivities();
            },
            registerWithPopupManager: function() {
                moduleData[constants.module_name] = TimesApps.PopUpManager.registerPopup(constants.module_name, popUpFn.loadModal);
            },
            createDailyCheckInHtml: function(data) {
                var popup_callbacks = moduleData[constants.module_name];
                popup_callbacks.onShowCallback(true);
                data = fn.sanitizeResult(data);
                
                
                
                var innerFn = function() {
                    var html = '';
                    var dailyCheckInTmpl    =   '<li class="$2 active">'
                                            +       '<p>Day $1</p>'
                                            +   '</li>';
                    
                    if (data && data.responseCode === 'TP_100' && data.response && data.response.items && data.response.items.length > 0) {
                        var dailyCheckinData = data.response.items;
                        var length = dailyCheckinData.length;
                        var counter = 7;
                        var dateVal;
                        var dateStr;
                        var isToday = false;
                        var todayIndex = -1;
                        var campaignAchievedDays = 0;
                        var bonusClassMap = {'-1': 'upcoming', '0': 'bonus-lost', '1': 'bonus-earned'};
                        var endIndex = 7 - CAMPAIGN_DAYS;
                        var todayPoints = 0;
                        for (; counter > endIndex; counter--) {
                            /*dateVal = new Date(dailyCheckinData[counter].timestamp);
                            dateStr = (fn.getDateStr(dateVal) || '').split(' ');
                            isToday = dailyCheckinData[counter].istoday || false;
                            html += dailyCheckInTmpl
                                    .replace('$1', bonusClassMap[dailyCheckinData[counter].status])
                                    .replace('$2', dateStr[0])
                                    .replace('$3', dateStr[1])
                                    .replace('$4', isToday? 'active': '');
                                    
                            if (isToday) {
                                todayIndex = counter;
                            }*/
                            if (counter === 7 && !dailyCheckinData[counter].campaignAchieved) {
                                todayPoints = dailyCheckinData[counter].bonusearned + dailyCheckinData[counter].coinsearned;
                            }
                            if (dailyCheckinData[counter].campaignAchieved || dailyCheckinData[counter].status !== 1) {
                                if (counter === 7 && dailyCheckinData[counter].campaignAchieved) {
                                    campaignAchievedDays = CAMPAIGN_DAYS;
                                }
                                break;
                            }
                            
                            campaignAchievedDays++;
                        } 
                        
                        if (campaignAchievedDays !== 0 && campaignAchievedDays <= CAMPAIGN_DAYS) {
                            // var noOfDays = CAMPAIGN_DAYS - campaignAchievedDays;
                            counter = 1;
                            for (; counter < 6; counter++) {
                                html += dailyCheckInTmpl
                                    .replace('$1', counter)
                                    .replace('$2', counter <= campaignAchievedDays? 'bonus-earned': '');
                            }
                        }
                        
                        if (html) {
                            var pointsTobeGivenAtLastDay = fn.getDailyCheckInPlusCheckInBonusPoints();
                            $tpPopup.find('ul.daily-points').html(html);
                            $('#tp-popup-achieved-text').text(campaignAchievedDays === CAMPAIGN_DAYS? 'Bonus Received!': 'Daily Check-in Done!');
                            $tpPopup.show();
                            
                            // var checkInDays = fn.getDailyCheckInDays(dailyCheckinData, todayIndex);
                            var checkInStr = fn.getCheckInStrForPopUp(campaignAchievedDays, todayPoints);
                            if (pointsTobeGivenAtLastDay > 0) {
                                $tpPopup.find('.bonusWrapper .tpPointsToolTip').html(campaignAchievedDays === CAMPAIGN_DAYS? 'Your 5 days daily checkin is complete': ((CAMPAIGN_DAYS - campaignAchievedDays) + ' more days left for <strong>+' + pointsTobeGivenAtLastDay + '</strong> TimesPoints'));
                                $tpPopup.find('.bonusWrapper').removeClass('day1 day2 day3 day4 day5').addClass('day' + campaignAchievedDays);
                            }
                            $tpPopup.find('.check-in-str-popup').text(checkInStr);
                            if($("#timespoint-popup").is(":visible")){$("body").addClass("cube-with-tp-popup");}
                        }
                    }
                }
                
                
                if (activitiesMapList) {
                    innerFn();
                } else {
                    activityDependencyQueue.push(innerFn);
                }
                
                fn.fireGAEvent('Daily_Check_in_pop_up', 'open');
            },
            dailyCheckInApiFail: function() {
                var popup_callbacks = moduleData[constants.module_name];
                popup_callbacks.onShowCallback(false);
            },
            initSdk: function() {
                var ticketId = fn.getTicketId();
                var params = {platform:'web', channelCode:'TOI'};
                if (ticketId) {
                    params.ticketId = ticketId;
                }
                tpsdk('init',params);  
            },
            subscribeLoginEvents: function() {
                var popup_callbacks = moduleData[constants.module_name];
                event.subscribe("user.login", function(user){
                    popUpFn.initSdk();
                    if ($tpPopup.is(':visible')) {
                        popUpFn.loadModal();
                    }
                    
                    loginStatusChanged = true;
                });
                event.subscribe("user.logout", function(){
                    if (typeof window.tpsdk === 'function') {
                        window.tpsdk('logout');
                    }
                    popUpFn.initSdk();
                    if ($tpPopup.is(':visible')) {
                        popUpFn.loadModal();
                    }
                    
                    loginStatusChanged = true;
                });
                event.subscribe("user.status",function(user){
                    clearTimeout(popUpCallbackTimeoutVal);
                    popUpFn.initSdk();
                    if (!popUpCancelled) {
                        popup_callbacks && popup_callbacks.onReadyCallback(1);   
                    }
                    // alert(1);
                    // fn.changeUserStatusHandler();
                });
            },
            bindEvents: function(){
                if(window._geo && window._geo == 1){
                    if (window.TimesApps && TimesApps.PopUpManager ){
                            popUpFn.registerWithPopupManager();
                        
                    } else{
                        require(['tiljs/event'], function(pubSub){
                            pubSub.subscribe('popUpManagerLoaded', popUpFn.registerWithPopupManager);
                        });
                    }
                }
                $tpPopup.off('click', '.tp-btn').on('click', '.tp-btn', function(e) {
                    var user = login.getUser();
                    var isLoggedIn = false;
                    if (typeof user === 'object' && typeof user.getUid === 'function' && user.getUid()) {
                        isLoggedIn = true;
                    }
                    
                    mod_tpmodal.open(isLoggedIn);
                    fn.fireGAEvent('Earn_TimesPoint', 'checkin_popup');
                    fn.fireGAEvent('Daily_Check_in_pop_up', 'know_more');
                });
                
                $tpPopup.off('click', '.close-btn').on('click', '.close-btn', function(e) {
                    $tpPopup.hide();
                    $("body").removeClass("cube-with-tp-popup");
                    fn.fireGAEvent('Daily_Check_in_pop_up', 'close');
                });
            },
            init: function() {
                // fn.loadTpJS();
                fn.getAllActivities();
                if (toiprops && toiprops._Tmpl_pg && toiprops._Tmpl_pg.length > 6 && toiprops._Tmpl_pg.substring(0, 6).toLowerCase() === 'prime-') {
                    return;
                }
                var popup_callbacks = moduleData[constants.module_name];
                popUpFn.bindEvents();
                popUpFn.subscribeLoginEvents();
                popUpCallbackTimeoutVal = setTimeout(function() {
                    popUpCancelled = true;
                    popup_callbacks && popup_callbacks.onReadyCallback(3);
                }, 5000);
            }
        };
        
        
        var commonfn = 
        
        
        
        mod_tpmodal.init = function (isLoggedIn) {
            widgetInitialized = true;
            // fn.loadTpJS();
            if (isLoggedIn) {
                fn.startLoggedInUserFlow();
            } else {
                fn.startNonLoggedInUserFlow();
            }
            fn.init();
            fn.subscribeLoginEvents();
            fn.getAllActivities();
            fn.getFaq();
        };
        
        mod_tpmodal.getDailyCheckInDetail = fn.getDailyCheckInDetail;

        mod_tpmodal.open = function (isLoggedIn) {
            if (!widgetInitialized || loginStatusChanged) {
                // mod_tpmodal.init(isLoggedIn);
                loginStatusChanged = false;
            }
            
            // loginStatusChanged = false;
            
            $tpwrapper.addClass('active');
            $('body').addClass('disable-scroll');
            fn.createCarousel();
            fn.fireGAOnTabChange();
        }
        
        mod_tpmodal.initTpPopUp = popUpFn.init;
        
        mod_tpmodal.getActivityObjinCallBack = function(activityCode, callback){
            if(gAllActivities !== null){
                var activityObj = {};
                if(gAllActivities.data){
                    var allActivity = gAllActivities.data.activities;
                    activityObj = fn.searchActivityObjInList(allActivity, activityCode);    
                }
                callback(activityObj);
            }
            else{
                event.subscribe("tpallactivitiesloaded", function (data) {
                    var allActivity = data.activitiesList.data.activities;
                    var activityObj = fn.searchActivityObjInList(allActivity, activityCode);
                    callback(activityObj);
                });
            }
        }
        
        fn.bindEvents();

        return mod_tpmodal;
    });


    /* To integrate login please do the following:
     * 1. Fork toiusermanagement_js and usermanagementcss and include it in your project
     * 2. Add below JS files in your project. These files should be added globally
     *  a) <script type="text/javascript" src="https://jssocdn.indiatimes.com/crosswalk/jsso_crosswalk_legacy_0.2.4.min.js"></script>
     *  b) <script src="https://www.google.com/recaptcha/api.js" async="true" defer="true"></script>
     * 3. Update GA events category in the toiusermanagement_js as per your project needs
     * 4. Update usermanagementcss file to change skin of Login modal
    */
     var comgetCookie = function(cname) {
                          var name = cname + "=";
                          var decodedCookie = decodeURIComponent(document.cookie);
                          var ca = decodedCookie.split(';');
                          for(var i = 0; i <ca.length; i++) {
                            var c = ca[i];
                            while (c.charAt(0) == ' ') {
                              c = c.substring(1);
                            }
                            if (c.indexOf(name) == 0) {
                              return c.substring(name.length, c.length);
                            }
                          }
                          return "";
                    }
    var currentCountry = comgetCookie('geo_country') || (window.geoinfo && window.geoinfo.CountryCode) || 'IN';
    
    define('tiljs/apps/times/usermanagement',[
        "../../util",
        "module",
        "../../page",
        "../../ajax",
        "../times/api",
        "../../is",
        "../../cookie",
        "../../ui",
        "../../logger",
        "../../event",
        "../../load",
        "../../localstorage",
        "../../user",
        "../../analytics/mytimes",
        "primeuserhandler"
    ],
    function (util, module, page, ajax, api, is, cookie, ui, logger, event, load, localstorage, user, mytimes, puser) {
        window.newLogin = true;// This enables twitter share dialog in /share.cms

        var default_config = {
            autoinit: false,
            multiuser: false, //allows multiple users to login at a time
            login: "",
            logout: "",
            check_user_status: "",
            mapping: null,
            mapping1: null,
            renderer: true, //todo to be implemented
            primePaidSuccessHash: 'success',
            primePaidFailureHash: 'failure',
            primeFreeSuccessHash: 'freetrialsuccess',
            primeFreeFailureHash: 'freetrialfailure',
        };
        var config = util.extend(true, {}, default_config, module.config());
        var fpNoEmailOrMobileErrorMsg=currentCountry==="IN"?`Email/Mobile No. cannot be left blank.`:`Email ID field cannot be left blank.`;
        var fpInvalidEmailErrorMsg=currentCountry==="IN"?`Enter a valid Email/Mobile No.`:`Enter a valid Email ID.`;
        var errorConfig = {
            fpNoEmailOrMobile: fpNoEmailOrMobileErrorMsg,
            fpInvalidEmail: fpInvalidEmailErrorMsg,
            fpInvalidEmailOnly: 'Enter a valid email.',
            fpInvalidMobileOnly: 'Enter a valid mobile no.',
            accountUnregistered: 'This account is not registered with us.',
            emptyPassword: 'Password cannot be left blank.',
            emptyName: 'Enter your full name.',
            wrongName: 'Enter your name without special character or numbers.',
            wrongPassword: 'Invalid Credentials',
            wrongMobile: 'Invalid Mobile number.',
            wrongEmail: 'Invalid Email Id.',
            expiredOTP: 'The OTP you entered has expired.',
            limitExceeded: 'Maximum number of unsuccessful attempts exceeded. Please try again later.',
            wrongOtp: 'Enter valid OTP sent to your mobile no.',
            wrongOtpEmail: 'Enter valid OTP sent to your email.',
            matchLastThree: 'Password cannot match your last three passwords.',
            passwordMismatch: 'Your passwords do not match.',
            captchaUnselected: 'Select the checkbox to proceed.',
            tncNotSelected: 'Accept Terms & Conditions to proceed.',
            tpPolicyNotSelected: 'Select the checkbox to proceed.',
            sharedDataNotSelected: 'Select the checkbox to proceed.',
            userAlreadyRegistered: 'This user is already registered with us.',
            serverError: 'An error occurred while processing your request. Please try again later.',
            connectionError: 'There was an error processing your request. Please check your internet connection and try again.',
            email_failure:"Username or password is incorrect. Please try again.",
            facebook_failure:"Username or password is incorrect. Please try again.",
            facebook_failure_user_denied:"Kindly authenticate facebook request. Please try again.",
            facebook_failure_no_email:"Could not login using this facebook account. Please try again with another account.",
            twitter_failure:"Kindly authenticate twitter request.",
            twitter_link_username_failure:"Username or password is incorrect. Please try again.",
            twitter_link_email_failure:"Email or password is incorrect. Please try again.",
            twitter_failure_unknown:"Kindly authenticate twitter request.",
            twitter_failure_user_denied:"Username or password is incorrect. Please try again.",
            twitter_failure_server_error:"Server did not respond. Please try again.",
            twitter_failure_already_exist:"It seems you have already registered with the Indiatimes network using this Email ID. Try linking your Twitter account with your existing Indiatimes account or use an alternate Email ID.",
            twitter_failure_invalid_email:"It seems you have entered and invalid Email ID. Try linking your Twitter account with your existing Indiatimes account or use an alternate Email ID.",
            unknown_error:"Unknown error has occurred. Please try again."
        };
        
        var constants = {
            oauthUrl: "https://jsso.indiatimes.com/sso/identity/login/socialLogin?channel={$channel}&oauthsiteid={$siteid}",
            //nativePrc:"https://stgpauth.indiatimes.com/prime-auth/prime/status/setCookies",
            nativePrc:"https://pauth.indiatimes.com/prime-auth/prime/status/setCookies"
        };
        
        var cachedElements = {
            loginPopup: $('#login-popup'),
            emailLoginFormContainer: $('#user-sign-in'),
            mobileLoginFormContainer: $('#mobile-login'),
            formContainer: $('#user-sign-in'),
            closeBtn: $('#login-popup .close-btn')
        }
        
        var ssoLoginType = '', 
            jssoCrosswalkObj, 
            recaptchaCode = '', 
            recaptchaWidgetId = '', 
            pageName='', 
            screenName='Login_Screen',
            MeteredGa="",
            registerFormSubmitted = false,
            __isEUUser = true, // defaults to EU,
            callbackToCallAfterConsent,
            userObj,
            isUserCloseActionForConsentOverlay = true;
            
        
        var userList = {};
        
        var single_user_id = "SINGLE_USER";
        
        var call_sso = function () {
            if (localStorage.getItem('_ssodata') != null) {
                __sso(JSON.parse(localStorage.getItem('_ssodata')));
                localStorage.removeItem('_ssodata');
            }
        }
        // to handle ios chrome issue - where parent is undefined
        var sso = function (url, callback) {
            loginWindow = ui.window(url, {
                width: 850,
                height: 780,
                scrollbars: 0
            }, function (result) {
                if (result && result.code === "200") {
                    mod_login.isLoggedIn();
                } else {
                    if (callback) {
                        callback(null, result);
                    }
                }
            });
            loginWindow.moveTo(315, 250);
        };
        var mod_login = {};
        var loginCallback = null;
        var loginData = null;
        var setLoginError = function (loginErrorMsg) {
            setLoginData({
                error: {
                    code: loginErrorMsg,
                    message: config.messages[loginErrorMsg]
                }
            });
        };
        var setLoginData = function (data) {
            loginData = data;
        };
        var reset = function () {
            return;
            if (loginWindow) {
                loginWindow.close();
                loginWindow = null;
            }
            loginData = null;
        };
        
        var setLocation = function (href) {
            if (is.iframe(loginWindow)) {
                loginWindow.src = href;
            } else {
                loginWindow.document.location.href = href;
            }
        };
        var loginResponse = function (site, error) {
            if(site === 'facebook') {
                $("#sso-fblogin-error").html(errorConfig[error]).show();
            } else {
                $("#sso-gplus-error").html(errorConfig[error]).show();
            }         
        };
        
        var loginResponseTwitter = function (url, error, data) {
            setLocation(url);
            if (error) {
                setLoginError(error);
            } else if (data) {
                setLoginData(data);
            }
        };
        
        var loginWindow = null;
        
        var setCriOS;
        
        if (config.autoinit === true) {
            mod_login.init();
        }
        
        try {
            document.domain = page.getDomain();
        } catch (e) {
            logger.info("Domain cannot be set:" + page.getDomain());
        }
        
        // to handle ios chrome issue - where parent is undefined
        if (navigator.userAgent.match('CriOS')) {
            localStorage.removeItem('_ssodata');
            setCriOS = setCriOS || setInterval(function () {
                    call_sso();
                }, 1000);
        }

        mod_login.getLoginCallback = function () {
            return loginCallback;
        };

        window.getLoginCallback = function () {
            return loginCallback;
        };
        window.getLoginData = function () {
            return loginData;
        };
        window.getDomain = function () {
            return page.getDomain();
        };
        
        window.__sso = function (data, url) {
            var $loginPopup = cachedElements.loginPopup;
            logger.log("__sso called");
            logger.log(data);
            logger.log(loginWindow);
            if (data && loginWindow) {
                logger.log(url);
                var currLoginData = loginData ? loginData.data : null;
                var closeWindow = data.closeWindow,
                    isLogout = data.status === "logout",
                    signInSuccess = data.status === "signinsuccess" || data.status === "ssosigninsuccess",
                    fbOrGplusMappingUpdated = (data.site === "facebook" || data.site === "googleplus" ) && data.status === "MappingUpdated";
                data.site = data.site || "";
                if (closeWindow || isLogout || signInSuccess || fbOrGplusMappingUpdated) {
                    logger.log("Close pressed, closing window / popup");
                    loginWindow.close();
                    $("#sso-fblogin-error, #sso-gplus-error").html('').hide();
                    if($loginPopup.is(':visible')) {
                        mod_login.closeBtnHandler();
                    }
                    
                    if(data.site && (signInSuccess || fbOrGplusMappingUpdated)) {
                        mod_login.fireGAEvent(data.site === 'googleplus'? 'Login_Success_Google': 'Login_Success_FB');
                    }
                } else if (data.status == "ssosigninfailure" && data.ssoerror == "E119") { //E119-username with password incorrect
                    loginResponse(data.site, "email_failure");
                } else if (data.status == "ssosigninfailure" && data.ssoerror == "E104") { //E104-email with password incorrect
                    loginResponse(data.site, "email_failure");
                } else if (data.err == "E104" && data.facebooktoken) { //E104-facebook not sending email
                    loginResponse(data.site, "facebook_failure_no_email");
                } else if (data.status == "signinfailure" && data.error == "F101") {
                    loginResponse(data.site, data.site + "_failure");
                } else if (data.status == "signinfailure" && data.error == "user_denied" && data.site == "facebook") { //facebook user denied access to the account
                    loginResponse(data.site, "facebook_failure_user_denied");
                } /* else if (data.status == "signinfailure" && data.error == "twitter" && data.site == "twitter") { // twitter user denied access to account
                    loginResponseTwitter(config.base_url + "/loginview.cms?x=error&site=twitter", "twitter_failure_unknown");
                } else if (data.error == "E104" && data.site == "twitter") { //when log in with twitter and it is not linked
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=twitter", null, {
                        data: data,
                        twitter_connect: true
                    });
                } else if (data.error == "E119" && data.site == "twitter") { //when log in for linking twitter, username/email with wrong pasword
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=twitter", "twitter_link_username_failure");
                    loginData.data = currLoginData;
                } else if (data.status == "signinfailure" && data.error == "T102" && data.site == "twitter") { //when twitter server is not responding
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=" + data.site, "twitter_failure_server_error");
                } else if (data.error == "E103" && data.site == "twitter") { //when trying to create a new account using already existing id after twitter connect
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=" + data.site, "twitter_failure_already_exist", loginData ? loginData.data : null);
                    loginData.data = currLoginData;
                } else if (data.error == "SSO_INVALID_RES_CHK_MAIL_AV" && data.site == "twitter") { //when trying to create a new account a@b.com after twitter connect
                    loginResponseTwitter(config.base_url + "/socialconnect.cms?site=" + data.site, "twitter_failure_invalid_email");
                    loginData.data = currLoginData;
                }*/ else {
                    logger.warn("Login case not handled");
                    loginResponse(data.site, "unknown_error");
                }
            }
            logger.log("Checking user status in __sso");

            mod_login.isLoggedIn(loginCallback);
        };
        mod_login.closeWindow = window.closeLoginWindow = function () {
            if (loginWindow) {
                loginWindow.close();
            }
        };
        
        mod_login.setPrcForUser = function(callback){
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            jssoObj.getValidLoggedInUser(callback);
            return;
        };
        
        mod_login.fireGAEvent = function (label) {
            label += ('-' + window.location.pathname);
            ga('send', 'event', 'WEB_Login', mod_login.getScreenName(), label);
        };
        mod_login.fireGAEventMetered = function (action,label) {
                require(["pgtrack"], function(pgtrack) {
                    pgtrack.track('#' + label + '~' + action);
                });
        };
        
        mod_login.setGa = function (name) {
            MeteredGa = name;
        };
        
        mod_login.getGa = function () {
            return MeteredGa;
        };    
        
        /**
         * Returns false if browser is Opera
         *
         * @param 
         * @param 
         */
        mod_login.showCaptcha = function () {
            return (navigator.userAgent.indexOf("Opera") === -1);
        };
        
        mod_login.registerFormSubmitted = function (isSubmitted) {
            registerFormSubmitted = !!isSubmitted;
        };
        
        mod_login.setLoginWindowDimension = window.setLoginWindowDimension = function (width, height) {
            if (loginWindow) {
                loginWindow.resizeTo(width, height);
                if (loginWindow.reposition) { //TODO not working for window.open - popup
                    loginWindow.reposition();
                }
                loginWindow.focus();
            }
        };
        mod_login.login = function (callback, action, identifier, loginEventObj,dataObj) {
            TimesApps.checkGdprAndCall(function() {
                __isEUUser = false;
                mod_login.showLoginScreen(callback, '', loginEventObj,dataObj);
                cachedElements.loginPopup.addClass('active');
            }, function() {
                mod_login.showLoginScreen(callback, '', loginEventObj,dataObj);
                cachedElements.loginPopup.addClass('active');
            });
        };
        mod_login.loginWithTwitter = function (callback) {
            loginCallback = function (user) {
                event.publish("user.login", user);
                if (callback) {
                    callback(user);
                }
                mod_login.closeBtnHandler();
            };   
            reset();
            
            TimesApps.checkGdprAndCall(function(){
                __isEUUser = false;
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'twitter');
                sso(login_url, callback);
            }, function(){
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'twitter');
                sso(login_url, callback);
            });
        };
        
        mod_login.loginWithFacebook = function (callback) {
            loginCallback = function (user) {
                event.publish("user.login", user);
                if (callback) {
                    callback(user);
                }
                mod_login.closeBtnHandler();
            };    

            reset();
            
            mod_login.initiateFbLogin(callback);
            
        };
        
        mod_login.loginWithCred = function ( token ,succesCallback, failCallback ) {
// 			loginCallback = function ( user ) {
// 				event.publish( "user.login", user );
// 				if( succesCallback ) {
// 					succesCallback( user );
// 				}
// 			};
			
			var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
			if (jssoObj){
				jssoObj.credLogin(token,function(response){
                        if (parseInt(response.code, 10) === 200) {
                            succesCallback(response);
                            // mod_login.isLoggedIn( loginCallback );
                        } else if (typeof failCallback === 'function') {
                            failCallback(null);
                        }
                    });
				}
		};
        
        // Initiate FB Login
        mod_login.initiateFbLogin = function (callback) {
            TimesApps.checkGdprAndCall(function(){
                __isEUUser = false;
                mod_login.setScreenName('Login_Screen');
                mod_login.fireGAEvent('Click_FB');
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'facebook');
                sso(login_url, callback);
            }, function(){
                mod_login.setScreenName('Login_Screen');
                mod_login.fireGAEvent('Click_FB');
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'facebook');
                sso(login_url, callback);
            });
        };
        
        mod_login.loginWithGoogle = function (callback) {
            loginCallback = function (user) {
                event.publish("user.login", user);
                if (callback) {
                    callback(user);
                }
                mod_login.closeBtnHandler();
            };   
            reset();
            mod_login.initiateGplusLogin(callback);
        };
        
        // Initiates Google login 
        mod_login.initiateGplusLogin = function ( callback ) {
            TimesApps.checkGdprAndCall(function(){
                __isEUUser = false;
                mod_login.setScreenName('Login_Screen');
                mod_login.fireGAEvent('Click_Google');
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'googleplus');
                sso(login_url, callback);
            }, function(){
                mod_login.setScreenName('Login_Screen');
                mod_login.fireGAEvent('Click_Google');
                var login_url = constants.oauthUrl.replace('{$channel}', page.getChannel().toLowerCase()).replace('{$siteid}', 'googleplus');
                sso(login_url, callback);
            });
        };
        
        mod_login.handleConsentChange = function(e){
            if ($('#toi-forgot-password').is(':visible')) {
                mod_login.fpInputKeyupHandler(e);
                return;
            }
            var $clickedCB = $(this),
                clickedCBID = $clickedCB.attr('id'),
                $consentCBs = $clickedCB.closest('ul').find('.js-contentCB'),
                mandatoryCBIds = ['sharedDataAllowed', 'agree'],
                mandatoriesCheckedCount = 0;

            $.each($consentCBs, function(){
                var $cb = $(this),
                    cbID = $cb.attr('id');
                
                if(mandatoryCBIds.indexOf(cbID) > -1 && $cb.is(':checked')){
                    mandatoriesCheckedCount++;
                }
            });
            
            // mandatory consent items are checked
            if(mandatoryCBIds.length === mandatoriesCheckedCount){
                // enable buttons
                $('#sso-registerBtn').removeAttr('disabled');
                $('#sso-signInButtonDiv > input').removeAttr('disabled');
                $('#consentAcceptButton').removeAttr('disabled');
            }
            // mandatory consent items are NOT checked
            else{
                // disable buttons
                $('#sso-registerBtn').attr('disabled', 'disabled');
                $('#sso-signInButtonDiv > input').attr('disabled', 'disabled');
                $('#consentAcceptButton').attr('disabled', 'disabled');
            }
        }
        
        mod_login.getConsentHTML = function(){
            var consentHTML = '<li class="checkbox">'
                            +     '<p>'
                            +         '<input type="checkbox" class="js-contentCB" id="agree" name="agree" ' + (!__isEUUser? 'checked="checked"': '') + '>'
                            +         '<label for="agree">I warrant that I am 18 years old, and agree with the '
                            +         '<a href="https://jssocdn.indiatimes.com/policy/termsandcondition.html" target="_blank" rel="noopener noreferrer">Terms & Conditions</a> and '
                            +         '<a href="https://jssocdn.indiatimes.com/policy/' + (__isEUUser? 'euprivacypolicy.html': 'privacypolicy.html') + '" target="_blank" rel="noopener noreferrer">Privacy Policy</a> of Times Internet Ltd.<span class="mandatory-field">*</span></label>'
                            +     '</p>'
                            +     '<div class="errorMsg"></div>'
                            + '</li>'
                            + '<li class="checkbox">'
                            +     '<p>'
                            +         '<input type="checkbox" class="js-contentCB" id="sharedDataAllowed" name="sharedDataAllowed" ' + (!__isEUUser? 'checked="checked"': '') + '>'
                            +         '<label for="sharedDataAllowed">I agree to a single sign on for seamless experience across TIL sites<span class="mandatory-field">*</span></label>'
                            +     '</p>'
                            +     '<div class="errorMsg"></div>'
                            + '</li>';
                            
            return consentHTML;
        }
        
        /**
         * Creates Login Screen UI and inserts in page
         *
         * @param 
         * @param 
         */
        mod_login.showLoginScreen = function (callback, loginScreenHtml, loginEventDataObj,dataObj) {
            var isMobileLogin = false;
            var stopReload = false;
            if(loginEventDataObj){
                isMobileLogin = loginEventDataObj.isMobileLogin || false;
                stopReload = loginEventDataObj.stopReload || false;
            }
            $('#user-sign-in').removeClass('extra-content');
            
            loginCallback = function (user) {
                //if(isMobileLogin){
                    puser.actionPostMobileLogin(user, dataObj);
                //}
                user.stopReload = stopReload;
                event.publish("user.login", user);
                // Trigger GA Event for All Login
                if (window.ga) {

                    ga('send', 'event', 'Login', 'Mast Head', document.location.href, {'nonInteraction': 1});
                }
                if (callback) {
                    callback(user);
                }
            };
            var loginScreen = '';
            var loginplaceholder =currentCountry==="IN"?`Sign In/Sign Up with Email or Mobile No.`:`Sign In/Sign Up with Email.`;
            var changMobEmailMsg=currentCountry==="IN"?`Change Email Or Mobile No.`:`Change Email ID.`;
            loginScreen +=  '<div id="toi-login">'
                        +       '<div class="signin-section">'
                        +           '<figure class="user-icon"><img src="/photo/63379366.cms" src="user-icon" /></figure>'
                        +           '<div id="socialConnectImgDiv">'
                        // +               '<button type="button" id="sso-fb-login" class="fb">Sign in with Facebook</button>'
                        // +               '<span id="sso-fblogin-error" class="errorMsg"></span>'
                        +               '<button type="button" id="sso-gplus-login" class="gplus">Sign in with Google</button>'
                        +               '<span id="sso-gplus-error" class="errorMsg"></span>'
                        +           '</div>'
                        +           '<h4 class="heading small">'
                        +               '<span>or go the traditional way</span>'
                        +           '</h4>'
                        +           '<form class="form" autocomplete="off">'
                        +               '<ul>'
                        +                   '<li class="input-field email">'
                        +                       '<p>'
                        +                            `<input autocomplete="off" type="text" name="emailId" placeholder="${loginplaceholder}" maxlength="100" />`
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       `<a href="javascript:void(0)" id="changeEmailIdDiv" class="secondary-link" style="display: none">${changMobEmailMsg}</a>`
                        +                   '</li>'
                        +                   '<li class="input-field password" id="sso-pwdDiv">'
                        +                       '<p>'
                        +                           '<input autocomplete="off" type="password" name="password" placeholder="Password" maxlength="14" />'
                        +                           '<span class="view-password"></span>'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<a id="sso-generate-otp" href="javascript:void(0)" class="secondary-link">Generate OTP to Login</a>'
                        +                   '</li>'
                        +                   '<li id="sso-login-otp-msg" class="text-field">'
                        +                       '<p></p>'
                        +                   '</li>'
                        +                   '<li class="input-field password" id="sso-otpLoginDiv">'
                        +                       '<p>'
                        +                           '<input type="password" name="otplogin" maxlength="6" placeholder="Enter OTP"/>'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<div class="successMsg"></div>'
                        +                       '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
                        +                       '<a id="sso-regenerate-otp" href="javascript:void(0)" class="secondary-link">Re-Generate OTP</a>'
                        +                       '<span class="regenerate-otp" id="sso-basic-regenerate-otp-timer" style="display:none">Retry in 00:<span id="sso-basic-regenerate-otp-timer-text"></span></span>'
                        +                   '</li>'
                        +                   '<li id="sso-signInButtonDiv" class="submit">'
                        +                       '<input type="submit" class="submit-btn disabled" value="Continue" disabled="disabled" />'
                        +                   '</li>'
                        +               '</ul>'
                        +               '<a href="javascript:void(0)" id="sso-forgot-pass" class="forget-password">Forgot Password?</a>'
                        +           '</form>'
                        +       '</div>'
                        +       '<div id="logout-toast-popup" />'
                        +       '<div class="powered-by">'
                        +           '<img src="https://static.toiimg.com/photo/72142679.cms" />'
                        +       '</div>'
                        +       '<div class="teams-logo">'
                        +          '<span>One Network. One Account</span>'
                        +           '<a href="http://timesofindia.indiatimes.com/" target="_blank" class="toi"/><a href="http://economictimes.indiatimes.com/" target="_blank" class="et"/><a href="http://navbharattimes.indiatimes.com/" class="nbt" target="_blank"/><a href="http://maharashtratimes.indiatimes.com/" class="sm" target="_blank"/><a href="http://www.speakingtree.in/" class="st" target="_blank"/><a href="http://itimes.com/" class="itimes" target="_blank"/>'
                        +       '</div>'
                        +        '<div class="info_txt">You can use this account details to login on Times Group Sites. Any changes to these details will impact all Times Group Sites.</div>'
                        +   '</div>';
            //cachedElements.formContainer = isMobileLogin ? cachedElements.mobileLoginFormContainer : cachedElements.emailLoginFormContainer;                        
            /*if(isMobileLogin){
                cachedElements.emailLoginFormContainer.hide();
                cachedElements.mobileLoginFormContainer.show();
            }else{
                cachedElements.mobileLoginFormContainer.hide();
                cachedElements.emailLoginFormContainer.show();
            }*/
            cachedElements.formContainer.html(loginScreenHtml || loginScreen).find('#toi-login').attr(isMobileLogin ? { 'data-login-type' : 'mobile' } : {'data-login-type' : 'email'});
            $('#user-sign-in').find('input[name="emailId"]').focus();
        };
        
        /**
         * Creates Register Screen UI and inserts in page
         *
         * @param 
         * @param 
         */
        mod_login.showRegisterScreen = function (callback) {
            var inputVal = $('#toi-login input[name="emailId"]').val();
            var loginType = mod_login.getLoginType();
             var regChangMobEmailMsg=currentCountry==="IN"?`Change Email Or Mobile No.`:`Change Email ID.`;
            var registerScreen = '';
            registerScreen  +=      '<div id="toi-register">'
                            +           '<div class="signup-section">'
                            +               '<h4 class="heading">'
                            +                   '<span>Complete Your Profile</span>'
                            +               '</h4>'
                            +               '<form class="form" action="#" autocomplete="off">'
                            +                   '<input type="hidden" id="register-inputVal" value="' + inputVal + '"/>'
                            +                   '<ul>'
                            +                       '<li class="input-field ' + (loginType !== 'email'? 'mobile-no': 'email') + '">'
                            +                           '<p>'
                            +                               (loginType !== 'email'? '<span class="country-code">+91 - </span>': '')
                            +                               '<input autocomplete="off" type="text" name="' + (loginType === 'email'? 'emailId': 'mobile') + '" maxlength="100" disabled="disabled" value="' + inputVal  + '" />'
                            +                           '</p>'
                            +                           `<a href="javascript:void(0)" id="changeRegisterEmailId" class="secondary-link">${regChangMobEmailMsg}</a>`
                            +                       '</li>'
                            +                       '<li class="input-field user-name">'
                            +                           '<p>'
                            +                               '<input autocomplete="off" type="text" name="fullname" placeholder="Full Name" maxlength="30" />'
                            +                           '</p>'
                            +                           '<div class="errorMsg"></div>'
                            +                       '</li>'
                            +                       '<li class="input-field password">'
                            +                           '<p>'
                            +                               '<input autocomplete="off" type="password" name="registerPwd" placeholder="Password" maxlength="14" />'
                            +                               '<span class="view-password"></span>'
                            +                           '</p>'
                            +                           '<div class="password-conditions">'
                            +                               '<p>Password must have:</p>'
                            +                               '<ul>'
                            +                                   '<li id="charCnt" class="error">6-14 characters</li>'
                            +                                   '<li id="lwCnt" class="error">1 Lower case character (a-z)</li>'
                            +                                   '<li id="numCnt" class="error">1 Numeric character (0-9)</li>'
                            +                                   '<li id="spclCharCnt" class="error">1 special character (Such as #, $, %, &, !)</li>'
                            +                               '</ul>'
                            +                           '</div>'
                            +                       '</li>'
                            +                       '<li class="input-field password">'
                            +                           '<p>'
                            +                               '<input autocomplete="off" type="password" name="registerCnfrmPwd" placeholder="Confirm Password" maxlength="14" />'
                            +                               '<span class="view-password"></span>'
                            +                           '</p>'
                            +                           '<div class="errorMsg"></div>'
                            +                       '</li>'
                            +                       '<li class="input-field ' + (loginType === 'email'? 'mobile-no': 'email') + '">'
                            +                           '<p>'
                            +                               (loginType === 'email'? '<span class="country-code">+91 - </span>': '')
                            +                               '<input autocomplete="off" type="text" name="' + (loginType === 'email'? 'mobile': 'emailId') + '" maxlength="' + (loginType === 'email'? '10': '100') + '" placeholder="' + (loginType === 'email'? 'Mobile Number': 'Email') + ' (Optional)" />'
                            +                           '</p>'
                            +                           '<div class="errorMsg"></div>'
                            +                       '</li>';
                            if(mod_login.showCaptcha()) {
                                registerScreen  +=  '<li class="recaptcha-wrapper">'
                                            +           '<div id="recaptcha-container"></div>'
                                            +           '<div class="errorMsg"></div>'
                                            +       '</li>';    
                            }
                            
                            registerScreen += mod_login.getConsentHTML();
                            
                            registerScreen +=       '<li class="submit">'
                            +                           '<input type="submit" id="sso-registerBtn" class="submit-btn" value="Update" ' + (__isEUUser? 'disabled="disabled"': '') + '/>'
                            +                       '</li>'
                            +                   '</ul>'
                            +               '</form>'
                            +           '</div>'
                            +       '</div>';
            cachedElements.formContainer.html(registerScreen);
            mod_login.setRecaptchaCode('');
            // Render racaptcha widget.
            if(typeof grecaptcha === 'object' && mod_login.showCaptcha()) {
                recaptchaWidgetId = grecaptcha.render(
                    'recaptcha-container',
                    {
                        "sitekey": "6LcXeh0TAAAAAO1DsEX1iEF8n8-E_hQB67bIpxIw", 
                        "theme": "light",
                        "callback": mod_login.recaptchaResponse,
                        "error-callback": mod_login.recaptchaErrorCallback,
                        "expired-callback": mod_login.recaptchaExpiredCallback
                    }
                )
            }
        };
        
        /**
         * Creates Forgot Password Screen UI and inserts in page
         *
         * @param 
         * @param 
         */
        mod_login.showForgotPasswordScreen = function (callback, showConsentHtml) {
            var inputVal = $('#toi-login input[name="emailId"]').val();
            var loginType = mod_login.getLoginType();
            var fpScreen = '';
            fpScreen +=  '<div id="toi-forgot-password">'
                        +       '<div class="signin-section">'
                        +           '<h4 class="heading">'
                        +               '<span>Forgot Password</span>'
                        +           '</h4>'
                        +           '<p id="forgot-password-sent">'
                        +               'We have sent a 6 digit verification code ' + (loginType !== 'email'? 'on <strong>+91-': 'to <strong>') + inputVal + '</strong>'
                        +           '</p>'
                        +           '<form class="form" autocomplete="off">'
                        +               '<input type="hidden" id="fp-inputVal" value="' + inputVal + '"/>'
                        +               '<ul>'
                        +                   '<li class="input-field password">'
                        +                       '<p>'
                        +                           '<input type="password" name="otpfp" maxlength="6" placeholder="Enter OTP"/>'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<div class="successMsg"></div>'
                        +                       '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
                        +                       '<a id="sso-fp-regenerate-otp" href="javascript:void(0)" class="secondary-link">Re-Generate OTP</a>'
                        +                       '<span class="regenerate-otp" id="sso-regenerate-otp-timer" style="display:none">Retry in 00:<span id="sso-regenerate-otp-timer-text"></span></span>'
                        +                   '</li>'
                        +                   '<li class="input-field password">'
                        +                       '<p>'
                        +                           '<input autocomplete="off" type="password" name="registerPwd" placeholder="Enter new password" maxlength="14" />'
                        +                           '<span class="view-password"></span>'
                        +                       '</p>'
                        +                           '<span class="subtext">Should not match last 3 passwords.</span>'
                        +                           '<div class="errorMsg"></div>'
                        +                           '<div class="password-conditions">'
                        +                               '<p>Password must have:</p>'
                        +                               '<ul>'
                        +                                   '<li id="charCnt" class="error">6-14 characters</li>'
                        +                                   '<li id="lwCnt" class="error">1 Lower case character (a-z)</li>'
                        +                                   '<li id="numCnt" class="error">1 Numeric character (0-9)</li>'
                        +                                   '<li id="spclCharCnt" class="error">1 special character (Such as #, $, %, &, !)</li>'
                        +                               '</ul>'
                        +                           '</div>'
                        +                   '</li>';
                        if (showConsentHtml) {
                            fpScreen += mod_login.getConsentHTML();
                        }
            fpScreen    +=                  '<li class="submit">'
                        +                       '<input type="submit" id="sso-fp-btn" class="submit-btn disabled" value="Verify & Login" disabled="disabled" />'
                        +                   '</li>'
                        +               '</ul>'
                        +           '</form>'
                        +       '</div>'
                        +   '</div>';
            cachedElements.formContainer.html(fpScreen);
        };
        
        /**
         * Creates Verify OTP Screen UI to be shown after Register page and inserts in page
         *
         * @param Mobile will be set when user tries to Register with mobile and email
         * @param emailId will be set once user verifies Mobile. Format email#mobile
         */
        mod_login.showSignUpOtpScreen = function (ssoid, mobile, emailId, callback) {
            var emailIdArr = emailId && emailId.length > 0? emailId.split('#'): [];
            var inputVal = emailIdArr[0] || $('#register-inputVal').val();
            var email = '';
            var pageName = '';
            var loginType = mod_login.getLoginType();
            if(loginType === 'email' && mobile && mobile.length) {
                pageName = 'mobile';
            } else if(emailIdArr && emailIdArr.length > 0) {
                pageName = 'email';
            } else if(loginType === 'email') {
                pageName = 'email';
            } else {
                pageName = 'mobile';
            }
            
            mod_login.setPageName(pageName);
            
            if(mobile && mobile.length) {
                loginType = 'mobile';
                email = inputVal;
                inputVal = mobile;
            }
            var fpScreen = '';
            fpScreen +=  '<div id="toi-verifyotp-password">'
                        +       '<div class="signin-section">'
                        +           '<h4 class="heading">'
                        +               '<span>Complete Your Profile</span>'
                        +           '</h4>';
            if(emailIdArr.length > 0) {
                fpScreen    +=      '<p class="mn-verified">Mobile number verified: <strong>+91-' + emailIdArr[1] + '</strong><i class="tick"></i>'
                            +       '<p>Verify your email id</p>';
            } else {
                fpScreen    +=      '<p>We have sent a 6 digit verification code on your ' + (loginType !== 'email'? 'Mobile Number': 'Email Id') + '</p>';
            }
                        
            fpScreen    +=          '<form class="form" autocomplete="off">'
                        +               '<input type="hidden" id="verify-inputVal" value="' + inputVal + '"/>'
                        +               '<input type="hidden" id="verify-email" value="' + email + '"/>'
                        +               '<input type="hidden" id="verify-ssoid" value="' + ssoid + '"/>'
                        +               '<input type="hidden" id="verify-logintype" value="' + loginType + '"/>'
                        +               '<ul>'
                        +                   '<li class="input-field ' + (loginType !== 'email'? 'mobile-no': 'email') + '">'
                        +                       '<p>'
                        +                           (loginType !== 'email'? '<span class="country-code">+91 - </span>': '')
                        +                           '<input autocomplete="off" type="text" name="verify-emailid" maxlength="100" disabled="disabled" value="' + inputVal  + '" />'
                        +                       '</p>'
                        +                       '<a href="javascript:void(0)" id="changeRegisterEmailId" class="secondary-link">Change Email/Mobile No.</a>'
                        +                   '</li>'
                        +                   '<li class="input-field password">'
                        +                       '<p>'
                        +                           '<input type="password" name="otpverify" maxlength="6" placeholder="Enter OTP"/>'
                        +                       '</p>'
                        +                       '<div class="errorMsg"></div>'
                        +                       '<div class="successMsg"></div>'
                        +                       '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
                        +                       '<a id="sso-verify-regenerate-otp" href="javascript:void(0)" class="secondary-link">Re-Generate OTP</a>'
                        +                       '<span class="regenerate-otp" id="sso-verify-regenerate-otp-timer" style="display:none">Retry in 00:<span id="sso-verify-regenerate-otp-timer-text"></span></span>'
                        +                   '</li>'
                        +                   '<li class="submit">'
                        +                       '<input type="submit" id="' + (emailId? 'sso-verify-email-btn': 'sso-verify-btn') + '" class="submit-btn disabled" value="' + (emailId? 'Verify': 'Verify and Login') + '" disabled="disabled" />'
                        +                   '</li>'
                        +               '</ul>'
                        +           '</form>'
                        +           '<div class="mandatory-box"><p>*Email or mobile no. verification is mandatory to complete the registration process.</p></div>'
                        +       '</div>'
                        +   '</div>';
            cachedElements.formContainer.html(fpScreen);
        };
        
        mod_login.showSuccessMsgScreen = function (isForgotPassword, data) {
            var successScreen = '';
            successScreen   +=  '<div id="toi-success-screen">'
                            +       '<div class="signin-section">'
                            +           '<h4 class="heading">'
                            +               '<span>' + (isForgotPassword? 'Forgot Password': 'Complete Your Profile') + '</span>'
                            +           '</h4>';
            if(isForgotPassword) {
                successScreen   +=      '<div class="fp-success">'
                                +           '<i class=""></i>'
                                +           '<div class="fp-success-msg">Password changed successfully.</div>'
                                +       '</div>';
            } else {
                successScreen   +=      '<div class="register-success">'
                                +           '<div class="verified">'
                                +               '<div>' + (data.email? 'Email Id': 'Mobile Number') + ' verified:</div>'
                                +               '<div><strong>' + (data.email || data.mobile) + '</strong><i class="tick"></i></div>'
                                +           '</div>'
                                +           '<div class="success-wrapper">'
                                +               '<i class="success-user"></i>'
                                +               '<div class="fp-success-msg">Thank you for registering.</div>'
                                +           '</div>'
                                +       '</div>';
            }
            
            successScreen   +=      '</div>'
                            +   '</div>';
                        
            cachedElements.formContainer.html(successScreen);
            
            setTimeout(function(){
                var $loginPopUp = $("#login-popup");
                if($loginPopUp.hasClass('active')) {
                    mod_login.closeBtnHandler();
                }
            }, 5000);
        };
        
        /**
         * Sets recaptcha code once it is validated
         *
         * @param data - Recaptcha string returned in callback
         * @param 
         */
        mod_login.recaptchaResponse = function (data) {
            var $errorElement = $('li.recaptcha-wrapper');
            mod_login.handleError($errorElement);
            mod_login.setRecaptchaCode(data);
        };
        mod_login.recaptchaErrorCallback = function (err) {
            var $errorElement = $('li.recaptcha-wrapper');
            mod_login.handleError($errorElement, errorConfig.serverError);
        };
        mod_login.recaptchaExpiredCallback = function (data) {
            
        };
        /**
         * Sets recaptcha code
         *
         * @param data - Recaptcha string
         * @param 
         */
        mod_login.setRecaptchaCode = function (data) {
            recaptchaCode = data;
        };
        /**
         * returns recaptcha code
         *
         * @param
         * @param 
         */
        mod_login.getRecaptchaCode = function () {
            return recaptchaCode;
        };
        
        mod_login.setMobileNumber =  function (ticketId, callback){
            require(["tiljs/cookie"], function(cookie) {
                var url = 'https://jsso.indiatimes.com/sso/crossdomain/v1liteUserProfile?ticketId=' + ticketId + '&channel=' + page.getChannel().toLowerCase();
    		    ajax.getJSONP(url, function (data) {
    		         ajax.getJSONP(url, function (data) {
        		        var exist = data.code=='200' && data.verifiedMobile && data.verifiedMobile.length ==10;
        		        callback(exist);
                    });
                });
            });
        };
        
        mod_login.checkMobileInfo = function(ticketId, force, callback){
            var tthis = this;
            require(["tiljs/cookie"], function(cookie) {
                var ckVal = cookie.get('usermn');
    		    if (ckVal && ckVal=='1' && !force){
    		        return;
    		    }
    		    
    		    function setCookieForMobileNumber(status){
    		        var ckVal = status ? 1 : 2;
    	            cookie.set('usermn', ckVal, 1,  '/', document.domain);
                    callback(status);
    		    }
    		    
    		    if (!ticketId){
        		    var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
    			    jssoObj.getValidLoggedInUser(function(response){
    			         if (response.code=='200'){
    			            tthis.setMobileNumber(response.data.encTicket, setCookieForMobileNumber);
    			         }
    			          mod_login.setNativePrc();
    			    });
    		    }else{
    		        tthis.setMobileNumber(ticketId, setCookieForMobileNumber);
    		    }
            });
		};
        
        
        mod_login.logout = function (callback) {
            loginCallback = function () {
                event.publish("user.logout");
                if (callback) {
                    callback();
                }
            };
            reset();
            var logout_url = "https://jsso.indiatimes.com/sso/identity/profile/logout/external?channel=" + page.getChannel().toLowerCase();
            var ifr = load.iframe(logout_url);
            $(ifr).load(function () {
                $(ifr).remove();
                mod_login.removeUser();
                if (window.__sso) {
                    window.__sso();
                }
            });
            localstorage.remove("sso_user");
            sessionStorage.removeItem('nativePrc');
            sessionStorage.removeItem('expirydate');
            var domain = page.getDomain();
            var cookieList = [
                {name: 'ssoid', path: '/', domain: domain},
                {name: 'Fbsecuritykey', path: '/', domain: domain},
                {name: 'fbookname', path: '/', domain: domain},
                {name: 'CommLogP', path: '/', domain: domain},
                {name: 'CommLogU', path: '/', domain: domain},
                {name: 'FaceBookEmail', path: '/', domain: domain},
                {name: 'Fbimage', path: '/', domain: domain},
                {name: 'fbooklocation', path: '/', domain: domain},
                {name: 'Fboauthid', path: '/', domain: domain},
                {name: 'fbname', path: '/', domain: domain},
                {name: 'fbLocation', path: '/', domain: domain},
                {name: 'fbimage', path: '/', domain: domain},
                {name: 'fbOAuthId', path: '/', domain: domain},
                {name: 'MSCSAuth', path: '/', domain: domain},
                {name: 'MSCSAuthDetail', path: '/', domain: domain},
                {name: 'MSCSAuthDetails', path: '/', domain: domain},
                {name: 'Twimage', path: '/', domain: domain},
                {name: 'TwitterUserName', path: '/', domain: domain},
                {name: 'Twoauthid', path: '/', domain: domain},
                {name: 'Twsecuritykey', path: '/', domain: domain},
                {name: 'ssosigninsuccess', path: '/', domain: domain},
                {name: 'prc', path: '/', domain: domain},
                {name: 'ipr', path: '/', domain: domain},
                {name: 'gdpr', path: '/', domain: domain},
                {name: 'usermn', path: '/', domain: domain},
                {name: 'ssoid'},
                {name: 'MSCSAuthDetail'},
                {name: 'articleid'},
                {name: 'txtmsg'},
                {name: 'tflocation'},
                {name: 'tfemail'},
                {name: 'setfocus'},
                {name: 'fbookname'},
                {name: 'CommLogP'},
                {name: 'CommLogU'},
                {name: 'FaceBookEmail'},
                {name: 'Fbimage'},
                {name: 'fbooklocation'},
                {name: 'Fboauthid'},
                {name: 'Fbsecuritykey'},
                {name: 'fbname'},
                {name: 'fbLocation'},
                {name: 'fbimage'},
                {name: 'fbOAuthId'},
                {name: 'MSCSAuth'},
                {name: 'MSCSAuthDetails'},
                {name: 'ssosigninsuccess'},
                {name: 'Twimage'},
                {name: 'TwitterUserName'},
                {name: 'Twoauthid'},
                {name: 'Twsecuritykey'},
                {name: 'prc'},
                {name: 'ipr'},
                {name: 'usermn'}
            ];
            var counter = 0;

            for(; counter < cookieList.length; counter++) {
                if(cookieList[counter].path) {
                    cookie.remove(cookieList[counter].name, cookieList[counter].path, cookieList[counter].domain);
                } else {
                    cookie.remove(cookieList[counter].name);
                }
            };
            
            // Remove GDPR cookie.
            // document.cookie = 'gdpr=null; expires=Thu, 01 Jan 1970 00:00:01 GMT;'
            
            callbackToCallAfterConsent = null;
            userObj = null;
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            jssoObj.signOutUser();
            
            // if (typeof toiprops === 'object' && toiprops.toipr === 1) {
            //     toiprops.toipr = -1;
            // }
        };
        var mod_login_config = {
            check_user_status: function (params, callback) {
                var ssoid = cookie.get("ssoid") || cookie.get("ssoId");
                var MSCSAuthDetails = cookie.get("MSCSAuthDetails");
                if (!ssoid && MSCSAuthDetails) {
                    ssoid = MSCSAuthDetails.split("=")[1];
                }
                
                if(ssoid && ssoid.length > 0) {
                    var jssoCrosswalkObj = mod_login.setAndGetJssoCrosswalkObj();
					jssoCrosswalkObj.getUserDetails( function (response)
					{
					    if (callback) {
							callback(response.data);
						}
					});
                }else{
    			    var jssoCrosswalkObj = mod_login.setAndGetJssoCrosswalkObj();
    			    jssoCrosswalkObj.getValidLoggedInUser(function(response){
    			        if (response.code=='200'){
    			            var data = response.data;    
    			            var jssonappcdurl = 'https://jsso.indiatimes.com/sso/crossdomain/v1validateTicket?ticketId=' + data.encTicket + '&channel=' + page.getChannel().toLowerCase();
        						ajax.getJSONP(jssonappcdurl, function (data) {
        						
                                            if (location.hostname.indexOf(".indiatimes.com") > -1) {
                                            var prc = cookie.get("prc");
                                            if(prc){sessionStorage.setItem('_etnativePrc', prc);}
                                             jssoCrosswalkObj.getUserDetails( function (response)
                            					{
                            					    mod_login.setNativePrc()
                            					    if (callback) {
                            							callback(response.data);
                            						}
                            					});
                                        
                                        }
                               
        						   
        						});
    				// 		}
    				            
    				        
    			        }else {
    						if (callback) {
    							callback(null);
    						}
    			        }	
    					});
                }		
            },
            mapping: {
                "uid": "uid",
                "email": "EMAIL", // map email
                "mobileNumber": "M_N", // map mobile
                "id": "_id",
                "name": "FL_N",
                "username": "D_N_U",
                "fullName": "FL_N",
                "firstName": "F_N",
                "lastName": "L_N",
                "icon": "tiny",
                "link": "profile",
                "CITY": "CITY",
                "thumb": "thumb",
                "followersCount": "F_C",
                "FE_C": "FE_C",
                "I_U_A": "I_U_A",
                "I_I_L": "I_I_L",
                "badges": "badges",
                "rewards": "rewards",
                "whatsonid": "W_ID",
                "ps": "SUB_U_J",
                "primestatus": "U_P_S"
            },
			mapping1: {
				//to : from
				"uid": "ssoid",
				"email": "primaryEmail", // map email
				"id": "ssoid",
				"name": "firstName",
				"username": "D_N_U",
				"fullName": "firstName",
				"firstName": "firstName",
				"lastName": "lastName",
				"icon": "tinyImageUrl",
				"link": "profileImageUrl",
				"CITY": "city",
				"thumb": "thumbImageUrl",
				"followersCount": "F_C",
				"FE_C": "FE_C",
				"I_U_A": "I_U_A",
				"I_I_L": "I_I_L",
				"badges": "badges",
				"rewards": "rewards",
				"whatsonid": "W_ID"
			}
        };
        mod_login.renderPlugins = function (user) {
            user = user || mod_login.getUser();
            $(function () {
                if (user) {
                    $("[data-plugin='user-isloggedin']").show();
                    $("[data-plugin='user-notloggedin']").hide();
                    $("[data-plugin='user-name']").text(user.getFirstName());
                    $("[data-plugin='user-icon']").attr("src", user.getIcon()); //todo debug data-src, was not working, fix in html also
                    $("[data-plugin='user-thumb']").attr("src", user.getThumb());
                    api.getRewards({
                        uid: user.getUid()
                    }, function (rewards) {
                        if (rewards && rewards.output && rewards.output.user && rewards.output.user.levelName) {
                            $("[data-plugin='user-points']").text(( rewards.output.user.statusPoints ));
                            $("[data-plugin='user-level']").text(( rewards.output.user.levelName ));
                            $("[data-plugin='user-points-wrapper']")
                                .show()
                                .addClass("points_" + rewards.output.user.levelName.toLowerCase());
                        } else {
                            $("[data-plugin='user-points-wrapper']").hide();
                        }
                    });
                } else {
                    $("[data-plugin='user-icon']").attr("src", config.default_user_icon); //todo debug data-src, was not working, fix in html also
                    $("[data-plugin='user-thumb']").attr("src", config.default_user_icon);
                    $("[data-plugin='user-isloggedin']").hide();
                    $("[data-plugin='user-notloggedin']").show();
                }

                $("body").toggleClass("loggedin", !!user);
                $("body").toggleClass("notloggedin", !user);
            });
        };
        
        mod_login.register = function () {
            logger.info("Register event called.");
        };
        mod_login.isLoggedIn = function (callback, dontCheckConsent) {
            ajax.get(config.check_user_status, {}, function (result) {
                var _user = user.getNewUser(result, config.mapping1);
                if (_user) {
                    _user.loginType = cookie.get("LoginType");
                    _user.facebook = {
                        name: cookie.get("fbookname"),
                        location: cookie.get("fbooklocation"),
                        image: cookie.get("Fbimage"),
                        email: cookie.get("FaceBookEmail"),
                        oauth: cookie.get("Fboauthid")
                    };
                    _user.twitter = {
                        name: cookie.get("TwitterUserName"),
                        image: cookie.get("Twimage"),
                        oauth: cookie.get("Twoauthid")
                    };
                    mod_login.setUser(_user);
                    
                    var gdprConsentFn = function() {
                        var gdprConsentObj = { 
                            'toi_gdprcookieconsent' : result.toi_gdprcookieconsent, 
                            'toi_gdprpersonalizedconsent' : result.toi_gdprpersonalizedconsent,
                        }
                        mod_login.checkAndUpdateGDPRConsent(_user, gdprConsentObj);
                    };
                    TimesApps.checkGdprAndCall(null, gdprConsentFn);
                    mod_login.checkAndUpdateTimespointValue();
                } else {
                    mod_login.removeUser();
                    if (typeof callback === 'function') {
                        callback();
                        return;
                    }
                }
                
                if (callback) {
                    if (dontCheckConsent || mod_login.isConsentGiven()) {
                        callback(_user);
                    } else {
                        callbackToCallAfterConsent = callback;
                        userObj = _user;
                    }
                }
            });
        };
        mod_login.removeUser = function (userId) {
            if (config.multiuser) {
                if (userId) {
                    delete userList[userId];
                } else {
                    throw new Error("'userId' is required to remove a user.");
                }
            } else {
                delete userList[single_user_id];
            }
            mod_login.statusChange(null);
        };
        mod_login.setUser = mod_login.addUser = function (_user) {
            if (typeof _user !== 'undefined' && !user.isUser(_user)) {
                throw new Error("Object is not an instance of User, use 'user.getNewUser()' to get a User object.");
            }
            if (config.multiuser) {
                userList[_user.id](_user);
            } else {
                userList[single_user_id] = _user;
            }
            mod_login.statusChange(_user);
        };
        mod_login.getUser = function (userId) {
            if (config.multiuser) {
                return util.extend(true, {}, userList[userId]);
            } else {
                return userList[single_user_id];
            }
        };
        
        /*This flow works in EU region only - function call from EU users only*/
        mod_login.checkAndUpdateGDPRConsent = function (user, consentObj) {
            var userId =  user.getUid();
            
            var _mytGdprConsent = consentObj.toi_gdprcookieconsent;
            var _mytGdprPersonalizedConsent = consentObj.toi_gdprpersonalizedconsent;
            
            var _gdprConsentCookie = cookie.get('ckns_policyV2');
            var _gdprPersonalizedConsentCookie = cookie.get('optout');
            
            /*consent is present in myt - sync it to cookie*/
            if(typeof _mytGdprConsent !== 'undefined' && typeof _mytGdprPersonalizedConsent !== 'undefined'){
                //Set it to cookie, if cookie are not present
                TimesApps.checkGdprAndCall(null, function(){
                    _gdprConsentCookie = _mytGdprConsent ? 1 : 0;
                    _gdprPersonalizedConsentCookie = _mytGdprPersonalizedConsent ? 0 : 1;
                    TimesGDPR.common.consentModule.setConsentToCookies(_gdprConsentCookie, _gdprPersonalizedConsentCookie);    
                });
            }
            /*consent is present in cookie - sync it to myt*/
            /*Set myt consent to cookie- as it might be updated through other site*/
            else if(typeof _gdprConsentCookie !== 'undefined' && typeof _gdprPersonalizedConsentCookie !== 'undefined'){
                var toi_gdprcookieconsentVal = !!(parseInt(_gdprConsentCookie, 10));
                var toi_gdprpersonalizedconsentVal = !(parseInt(_gdprPersonalizedConsentCookie, 10));
                //FYI - optout cookie is sync to toi_gdprpersonalizedconsent field in myt.
                var consentObj = { toi_gdprcookieconsent : toi_gdprcookieconsentVal, toi_gdprpersonalizedconsent : toi_gdprpersonalizedconsentVal };
                // mytimes.updateGDPRConsent(userId, consentObj, function(data) { console.log('Consent updated for EU: ' + data)} );
            }
        };
        mod_login.statusChange = function (user) {
            logger.info("User Status:" + ( user ? user.toString() : null ));
            event.publish("user.status", user);
            // Refresh Iframes with data-refreshState attr
            mod_login.refreshIframes();
        };

        mod_login.refreshIframes = function () {


            $(window.parent.document).find('iframe[data-refreshstate]').each(function (i, ele) {

                $(ele).attr('src', $(ele).attr('src'))
            })
        };
        mod_login.onStatusChange = function (callback) {
            event.subscribe("user.status", callback);
        };
        mod_login.updateConfig = function (init_config) {
            if (init_config) {
                config = util.extend(true, {}, config, init_config);
            }
        };
        
        /**
         * Callback that calls forgot password API
         *
         * @param
         * @param 
         */
        mod_login.forgotPasswordBtnHandler = function (e) {
            e.preventDefault();
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#fp-inputVal').val(),
                $fpScreen = $('#toi-forgot-password'),
                otp = $fpScreen.find('input[name="otpfp"]').val(),
                password = $fpScreen.find('input[name="registerPwd"]').val(),
                fnCall;
            var checkboxLen = $fpScreen.find('.js-contentCB').length;
            if (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($fpScreen)) {
                return;
            }
            fnCall = (loginType === 'email'? jssoObj.loginEmailForgotPassword: jssoObj.loginMobileForgotPassword);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, inputVal, otp, password, password, mod_login.handleForgotPasswordVerifyCallback);
                mod_login.fireGAEvent(mod_login.getPageName() + '_PW_Verify');  
            }
        };
        
        mod_login.getTimespointValue = function() {
            return (__isEUUser? '0': '1');
        }
        
        /**
         * Callback returned by Forgot password API with response
         *
         * @param response - Object
         * @param 
         */
        mod_login.handleForgotPasswordVerifyCallback = function (response) {
            var $errorElementOtp = $('#toi-forgot-password input[name="otpfp"]').closest('li');
            var $errorElementPass = $('#toi-forgot-password input[name="registerPwd"]').closest('li');
            var consentCheckboxLen = $('#toi-forgot-password input.js-contentCB').length;
            var loginType = mod_login.getLoginType();
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            if(response.code === 200) {
                // $('#user-sign-in').html('').hide();
                mod_login.fireGAEvent( 'Login_Success_' + mod_login.getPageName());
                // $('#login-popup .close-btn').click();
                if (consentCheckboxLen > 0) {
                    jssoObj.updateUserPermissions('1', '1', mod_login.getTimespointValue(), function() {
                        mod_login.hideLoader();
                        mod_login.showSuccessMsgScreen(true);
                        mod_login.isLoggedIn(loginCallback);
                        // jssoObj.getValidLoggedInUser(function() {
                        //     mod_login.hideLoader();
                        //     mod_login.showSuccessMsgScreen(true);
                        //     mod_login.isLoggedIn(loginCallback);
                        // });
                    });
                } else {
                    mod_login.hideLoader();
                    mod_login.showSuccessMsgScreen(true);
                    mod_login.isLoggedIn(loginCallback);
                }
            } else {
                // Reset error and success messages
                mod_login.handleError($errorElementOtp);
                mod_login.handleError($errorElementPass);
                $('.successMsg').hide();
                switch(response.code) {
                    case 414: 
                        mod_login.handleError($errorElementOtp, (loginType === 'email'? errorConfig.wrongOtpEmail: errorConfig.wrongOtp));
                        break;
                    case 415:
                        mod_login.handleError($errorElementOtp, errorConfig.expiredOTP);
                        break;
                    case 416:
                        mod_login.handleError($errorElementOtp, errorConfig.limitExceeded);
                        break;
                    case 418:
                        mod_login.handleError($errorElementPass, errorConfig.matchLastThree);
                        break;
                    case 503:
                        mod_login.handleError($errorElementPass, errorConfig.connectionError);
                        break;
                    default:
                        mod_login.handleError($errorElementPass, errorConfig.serverError);
                        
                }
                mod_login.fireGAEvent('API_Error_' + response.code);
            } 
        };
        
        /**
         * Click handler of Forgot password link on Login Screen.
         *
         * @param
         * @param 
         */
        mod_login.forgotPasswordHandler = function (e) {
            if($('#sso-forgot-pass').hasClass('disabled')) {
                return;
            }
            var $emailId = $('#toi-login input[name="emailId"]');
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#toi-login input[name="emailId"]').val(),
                $errorElement = $('#toi-login li.email'),
                fnCall;
                
            
            if(inputVal.length === 0) {
                mod_login.handleError($errorElement, errorConfig.fpNoEmailOrMobile);
                return;
            } else if(!loginType) {
                mod_login.handleError($errorElement, errorConfig.fpInvalidEmail);
                return;
            }
            
            mod_login.handleError($errorElement);
            inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            fnCall = (loginType === 'email'? jssoObj.getEmailForgotPasswordOtp: jssoObj.getMobileForgotPasswordOtp);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, inputVal, mod_login.handleForgotPasswordOTPCallback);
            }
            
            mod_login.setPageName(mod_login.getLoginType());
            mod_login.fireGAEvent(mod_login.getPageName() + '_Forgot_PW');
        };
        
        /**
         * Sets error messages on screens
         *
         * @param $errorElement - Parent element within which error messages have to be set
         * @param msg - Error message to be set
         */
        mod_login.handleError = function ($errorElement, msg) {
            if(msg) {
                $errorElement.parent().addClass('error')
                $errorElement.find('p').addClass('error');
                $errorElement.find('.errorMsg').html(msg).show();
            } else {
                $errorElement.find('p').removeClass('error');
                $errorElement.find('.errorMsg').html('').hide();
                $errorElement.parent().removeClass('error')
            }
        };
        
        mod_login.showForgotPasswordScreenAfterConsentCheck = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-login li.email');
            var $emailId = $('#toi-login input[name="emailId"]');
            var loginType = mod_login.getLoginType();
            var showConsentHtml = false;
            if(response && response.code === 200 && response.data) {
                if(response.data.termsAccepted !== '1' || response.data.shareDataAllowed !== '1'){
                    showConsentHtml = true;
                }
                mod_login.showForgotPasswordScreen(undefined, showConsentHtml); 
                // var loginType = mod_login.getLoginType();
                mod_login.setScreenName('Forgot_PW');
            } else {
                if(response.code === 410) {
                    mod_login.handleError($errorElement, (loginType === 'email'? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidMobileOnly));
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        /**
         * Callback after sending OTP for Forgot password
         *
         * @param response - Object
         * @param 
         */     
        mod_login.handleForgotPasswordOTPCallback = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-login li.email');
            var loginType = mod_login.getLoginType();
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                inputVal = $('#toi-login input[name="emailId"]').val();
            inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            if(response && response.code === 200) {
                if(typeof jssoObj.checkUserExists === 'function') {
                    mod_login.showLoader();
                    jssoObj.checkUserExists(inputVal, mod_login.showForgotPasswordScreenAfterConsentCheck);
                }
            } else {
                if([405, 406, 407, 408].indexOf(response.code) !== -1) {
                    mod_login.handleError($errorElement, errorConfig.accountUnregistered);
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else if (response.code === 416) {
                    mod_login.handleError($errorElement, errorConfig.limitExceeded);
                    $('#sso-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').addClass('disabled');
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        /**
         * Keyup event handler for Forgot Password page
         *
         * @param response - Object
         * @param 
         */
        mod_login.fpInputKeyupHandler = function (e) {
            var $this = $(this);
            // setTimeout required for paste events.
            setTimeout(function () {
                var $fpScreen = $('#toi-forgot-password');
                var otp = $fpScreen.find('input[name="otpfp"]').val();
                var password = $fpScreen.find('input[name="registerPwd"]').val();
                var $fbBtn = $('#sso-fp-btn');
                var enableFpBtn = true;
                var checkboxLen = $fpScreen.find('.js-contentCB').length;
                
                // check if OTP is number and length is 6 and password is valid
                if(!(!isNaN(otp) && otp.length === 6) || !mod_login.isPasswordValid(password) || (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($fpScreen))) {
                    enableFpBtn = false;
                }
                
                $fbBtn.prop('disabled', !enableFpBtn);
                if(enableFpBtn) {
                    $fbBtn.removeClass('disabled');
                } else {
                    $fbBtn.addClass('disabled');
                }
                
                // If keyup is for password field call password error function to handle its errors
                if($this.attr('name') === 'registerPwd') {
                    mod_login.passwordErrors.call($this, e);
                }
            }, 0);
        };
        
        mod_login.areMandatoryFieldsSelected = function(parentElem) {
            var $agree = parentElem.find('input[name="agree"]');
            var $sharedDataAllowed = parentElem.find('input[name="sharedDataAllowed"]');
            var sharedDataAllowed = $sharedDataAllowed.is(':checked');
            var agree = $agree.is(':checked');
            return (sharedDataAllowed && agree);
        };
        
        /**
         * Handles Change Email/Mobile link click
         *
         * @param
         * @param 
         */
        mod_login.changeEmailIdHandler = function (e) {
            $('#sso-pwdDiv, #changeEmailIdDiv, #sso-otpLoginDiv, #sso-login-otp-msg').hide();
            $('#toi-login li.checkbox').remove();
            $('#user-sign-in').removeClass('extra-content');
            $('#toi-login input[name="emailId"]').prop('disabled', false).val('').focus();
            $('#sso-signInButtonDiv input[type="submit"]').prop('disabled', true).addClass('disabled');
            $('.errorMsg, .successMsg').hide();
            $('.error').removeClass('error');
            $('#sso-signInButtonDiv > input').val('Continue');
            $('#sso-pwdDiv input[name="password"]').val('');
            $('#sso-otpLoginDiv input[type="password"]').val('');
            $('#sso-regenerate-otp, #sso-fp-regenerate-otp, #sso-verify-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').removeClass('disabled');
            mod_login.fireGAEvent(mod_login.getPageName() + '_Change');
            mod_login.setScreenName('Login_Screen');
        };
        
        /**
         * Shows login screen when user clicks change email on Register page
         *
         * @param
         * @param 
         */
        mod_login.changeRegisterEmailIdHandler = function (e) {
            mod_login.showLoginScreen();
            mod_login.fireGAEvent( mod_login.getPageName() + '_Change');
        };
        
          /**
         * Handles OTP input field on Login page
         *
         * @param
         * @param 
         */
         
        mod_login.handleOtploginKeyUp  = function(e) {
               var $this = $(this);
                var val = $this.val();
                if(val.length > 0) {
                   // enableSignIn = true;
                     $('.errorMsg').html('');
                }
                if(val != '' && val.length == 6) {
                      enableSignIn = true;
                     $('.errorMsg').html('');
                }else {
                    enableSignIn = false;
                }
                 $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                 $ssoSignInInputBtn.prop('disabled', !enableSignIn);
        }
         /**
         * Handles Password input field on Login page
         *
         * @param
         * @param 
         */
        mod_login.handlePasswordKeyUp = function(e) {
              var $this = $(this);
                var val = $this.val();
                if(val.length > 0) {
                    enableSignIn = true;
                     $('.errorMsg').html('');
                }else {
                    enableSignIn = false;
                }
                 $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                 $ssoSignInInputBtn.prop('disabled', !enableSignIn);
                
               
            
        }
        /**
         * Handles Email Id/ Mobile input field on Login page
         *
         * @param
         * @param 
         */
        mod_login.handleEmailIdKeyUp = function (e) {
            var $this = $(this);
            setTimeout(function (e) {
                var val = $this.val(),
                    checkIsEmail = val.indexOf('@'),
                    checkIsMobile = !isNaN(val) && val.length >= 10,
                    enableSignIn = false,
                    $errorElement = $('#toi-login li.email'),
                    $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                    
                    
                if(checkIsEmail && mod_login.getValidEmailId(val).length > 0) {
                    mod_login.setLoginType('email');
                    enableSignIn = true;
                } else if(checkIsMobile && mod_login.getValidMobileNumber(val).length > 0) {
                    mod_login.setLoginType('mobile');
                    enableSignIn = true;
                } else {
                    mod_login.setLoginType('');
                }
                
                $ssoSignInInputBtn.prop('disabled', !enableSignIn);
                mod_login.handleError($errorElement);
                if(enableSignIn) {
                    $ssoSignInInputBtn.removeClass('disabled');
                } else {
                    $ssoSignInInputBtn.addClass('disabled');
                    
                }
            }, 0);
        };
        
        /**
         * API callback of checkUserExists
         *
         * @param response - Response object
         * @param 
         */
        mod_login.checkUserExists = function(response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-login li.email');
            var $emailId = $('#toi-login input[name="emailId"]');
            var $signInBtn = $('#sso-signInButtonDiv > input');
            var errorMsg = '';
            var loginType = mod_login.getLoginType();
            mod_login.handleError($errorElement);
            if(response && response.code === 200 && response.data) {
                if(response.data.statusCode === 212 || response.data.statusCode === 213) {
                    $('#sso-pwdDiv, #changeEmailIdDiv').show();
                    $signInBtn.val('Sign In');
                    if(response.data.termsAccepted !== '1' || response.data.shareDataAllowed !== '1'){
                        if (__isEUUser) {
                            $signInBtn.attr('disabled', 'disabled');
                        }
                        
                        // show and handle consent checkboxes
                        $(mod_login.getConsentHTML()).insertBefore($signInBtn.closest('#sso-signInButtonDiv'));
                        // to handle both fb and google buttons in single line when checkboxes are visible
                        $('#user-sign-in').addClass('extra-content');
                    }
                } else if(response.data.statusCode === 205 || response.data.statusCode === 206 || response.data.statusCode === 214 || response.data.statusCode === 215) {
                    mod_login.registerUser();
                    mod_login.setScreenName('Register_New_User');
                } else {
                    $emailId.prop('disabled', false);
                    errorMsg = response.data.statusCode === 216 ? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidEmail;
                    mod_login.handleError($errorElement, errorMsg);
                }
            } else {
                $emailId.prop('disabled', false);
                if(response.code === 410) {
                    mod_login.handleError($errorElement, (loginType === 'email'? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidMobileOnly));
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        /**
         * Shows register screen
         *
         * @param
         * @param 
         */
        mod_login.registerUser = function() {
            mod_login.showRegisterScreen();
        };
        
        /**
         * Handles Register button click and validates Register form
         *
         * @param
         * @param 
         */
        mod_login.registerButtonHandler = function (e) {
            e.preventDefault();
            mod_login.registerFormSubmitted(true);
            var $register = $('#toi-register');
            var $email = $register.find('input[name="emailId"]');
            var $fullname = $register.find('input[name="fullname"]');
            var $password = $register.find('input[name="registerPwd"]');
            var $cnfrmPassword = $register.find('input[name="registerCnfrmPwd"]');
            var $mobile = $register.find('input[name="mobile"]');
            var recaptcha = mod_login.getRecaptchaCode();
            var $agree = $register.find('input[name="agree"]');
            var $sharedDataAllowed = $register.find('input[name="sharedDataAllowed"]');
            var agree = $agree.is(':checked');
            var isSendOffer = $register.find('input[name="promotions"]').is(':checked');
            // this is to be changed for new value of personalization check box field
            var email = $email.val();
            var fullname = $fullname.val();
            var password = $password.val().trim();
            var cnfrmPassword = $cnfrmPassword.val().trim();
            var mobile = $mobile.val() || '';
            var username = {};
            var validForm = true;
            var loginType = mod_login.getLoginType();
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(), fnCall;
            var $fullNameParent = $fullname.closest('li');
            var $passwordParent = $password.closest('li');
            var $cnfrmPasswordParent = $cnfrmPassword.closest('li');
            var $mobileParent = $mobile.closest('li');
            var $emailParent = $email.closest('li');
            var $agreeParent = $agree.closest('li');
            var $sharedDataAllowedParent = $sharedDataAllowed.closest('li');
            var $recaptchaParent = $('#recaptcha-container').closest('li');
            
            var isValidName = mod_login.checkAndSetFullNameError($fullname, $fullNameParent);
            var isValidCnfrmPassword = mod_login.checkAndSetConfirmPasswordError($cnfrmPassword, $cnfrmPasswordParent);
            var isValidEmailOrMobile = true;
            var isSharedDataAllowed = mod_login.checkAndSetSharedDataTnCError($sharedDataAllowed, $sharedDataAllowedParent);
            var isTnCAgreed = mod_login.checkAndSetAgreeTnCError($agree, $agreeParent);
            
            if(loginType === 'email') {
                isValidEmailOrMobile = mod_login.checkAndSetEmailOrMobileToRegisterError($mobile, $mobileParent, 'mobile');
            } else {
                isValidEmailOrMobile = mod_login.checkAndSetEmailOrMobileToRegisterError($email, $emailParent, 'email');
            }
            
            if(!isValidName || !isValidCnfrmPassword || !isValidEmailOrMobile || !isTnCAgreed || !isSharedDataAllowed) {
                validForm = false;
            }
            
            if(!mod_login.isPasswordValid(password)) {
                validForm = false;
            }
            
            if(mod_login.showCaptcha()) {
                if(!recaptcha) {
                    validForm = false;
                    mod_login.handleError($recaptchaParent, errorConfig.captchaUnselected);
                } else {
                     mod_login.handleError($recaptchaParent);
                } 
            }
            
            $('.password-conditions').show();
            
            if(validForm) {
                username = mod_login.getFirstAndLastName(fullname);
                // Call registerUser API in case of Opera browser
                fnCall = mod_login.showCaptcha()? jssoObj.registerUserRecaptcha: jssoObj.registerUser;
                if(typeof fnCall === 'function') {
                    mod_login.showLoader();
                    if(mod_login.showCaptcha()) {
                        fnCall.call(jssoObj, username.firstName, username.lastName, '', '', email, mobile, password, isSendOffer, recaptcha, '1', '1', mod_login.getTimespointValue(), mod_login.registerUserCallback);
                    } else {
                        fnCall.call(jssoObj, username.firstName, username.lastName, '', '', email, mobile, password, isSendOffer, '1', '1', mod_login.getTimespointValue(), mod_login.registerUserCallback);
                    }
                }
            }
            
            mod_login.fireGAEvent( mod_login.getPageName() + '_Verify' );
        };
        
        /**
         * Handles keyup events on register button
         *
         * @param
         * @param 
         */
        mod_login.registerFormErrorHandler = function (e) {
            if(!registerFormSubmitted) {
                return;
            }
            
            var $inputElem = $(e.target);
            var inputFieldName = $inputElem.attr('name');
            var $elemParent = $inputElem.closest('li');
            
            if(inputFieldName === 'fullname') {
                mod_login.checkAndSetFullNameError($inputElem, $elemParent);
            } else if (inputFieldName === 'registerCnfrmPwd') {
                mod_login.checkAndSetConfirmPasswordError($inputElem, $elemParent);
            } else if (inputFieldName === 'emailId') {
                mod_login.checkAndSetEmailOrMobileToRegisterError($inputElem, $elemParent, 'email');
            } else if (inputFieldName === 'mobile') {
                mod_login.checkAndSetEmailOrMobileToRegisterError($inputElem, $elemParent, 'mobile');
            } else if (inputFieldName === 'agree') {
                mod_login.checkAndSetAgreeTnCError($inputElem, $elemParent);
            } else if (inputFieldName === 'sharedDataAllowed') {
                mod_login.checkAndSetSharedDataTnCError($inputElem, $elemParent);
            }
        };
        
        mod_login.checkAndSetFullNameError = function (inputElem, elemParent) {
            var nameRegex = /^[a-zA-Z\s]*$/;
            var fullname = inputElem.val();
            var validField = true;
            
            if(!(fullname && fullname.length > 0 && nameRegex.test(fullname))) {
                validField = false;
                if(fullname.length === 0) {
                    mod_login.handleError(elemParent, errorConfig.emptyName);
                } else {
                    mod_login.handleError(elemParent, errorConfig.wrongName);
                }
            } else {
                mod_login.handleError(elemParent);
            }
            
            return validField;
        };
        
        mod_login.checkAndSetConfirmPasswordError = function (inputElem, elemParent) {
            var password = $('#toi-register input[name="registerPwd"]').val().trim();
            var confirmPassword = inputElem.val().trim();
            var validField = true;
            if(password !== confirmPassword) {
                validField = false;
                mod_login.handleError(elemParent, errorConfig.passwordMismatch);
            } else {
                mod_login.handleError(elemParent);
            }
            
            return validField;
        };
        
        mod_login.checkAndSetEmailOrMobileToRegisterError = function (inputElem, elemParent, loginType) {
            var inputFieldVal = inputElem.val();
            var validField = true;
            
            if(inputFieldVal.length === 0 ) {
                mod_login.handleError(elemParent);
            } else {
                inputFieldVal = loginType === 'email'? mod_login.getValidEmailId(inputFieldVal): mod_login.getValidMobileNumber(inputFieldVal, true);
                if(inputFieldVal.length === 0) {
                    validField = false;
                    mod_login.handleError(elemParent, (loginType === 'email'? errorConfig.wrongEmail: errorConfig.wrongMobile));
                } else {
                    mod_login.handleError(elemParent);
                }
            }
            
            return validField;
        };
        
        mod_login.checkAndSetAgreeTnCError = function (inputElem, elemParent) {
            var tncAgreed = inputElem.is(':checked');
            var validField = true;
            
            if(!tncAgreed) {
                validField = false;
                mod_login.handleError(elemParent, errorConfig.tncNotSelected);
            } else {
                mod_login.handleError(elemParent);
            }
            
            return validField;
        };
        
        mod_login.checkAndSetSharedDataTnCError = function (inputElem, elemParent) {
            var sharedDataAgreed = inputElem.is(':checked');
            var validField = true;
            
            if(!sharedDataAgreed) {
                validField = false;
                // mod_login.handleError(elemParent, errorConfig.sharedDataNotSelected);
            } else {
                // mod_login.handleError(elemParent);
            }
            
            return validField;
        };
        
        /**
         * Handles Verify button click on Verify OTP page
         *
         * @param
         * @param 
         */
        mod_login.verifyButtonHandler = function (e) {
            e.preventDefault();
            var $verifyParent = $('#toi-verifyotp-password');
            var intent = $("#verify-inputVal").val();
            var ssoId = $("#verify-ssoid").val();
            var otp = $verifyParent.find('input[name="otpverify"]').val();
            var actualLoginType = mod_login.getLoginType();
            var loginType = $('#verify-logintype').val();
            var emailId = $('#verify-email').val() || '';
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            var fnCall = (loginType === 'email'? jssoObj.verifyEmailSignUp: jssoObj.verifyMobileSignUp);
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, intent, ssoId, otp, mod_login.handleSignUpVerifyCallback((actualLoginType !== loginType && emailId? emailId: ''), ssoId));
                mod_login.fireGAEvent(mod_login.getPageName() + '_Verify');
            }
        };
        
        /**
         * Handles Verify Email button click on Verify OTP page
         *
         * @param
         * @param 
         */
        mod_login.verifyEmailButtonHandler = function (e) {
            e.preventDefault();
            // Duplicate method to handle any different functionality if any
            mod_login.verifyButtonHandler(e);
        };
        
        /**
         * Enable Verify button of valid OTP is entered on Verify OTP page
         *
         * @param
         * @param 
         */
        mod_login.enableVerifyButton = function (e) {
            var $this = $(this);
            setTimeout(function(){
                var otp = $this.val();
                var $submitBtn = $('#sso-verify-btn');
                if(!$submitBtn.is(':visible')) {
                    $submitBtn = $('#sso-verify-email-btn');
                }
                if(!isNaN(otp) && otp.length ===6 ) {
                    $submitBtn.prop('disabled', false).removeClass('disabled');
                } else {
                    $submitBtn.prop('disabled', true).addClass('disabled');
                }
            }, 0);
        };
        
        /**
         * Returns callback for Register User API
         *
         * @param emailId, sso - Sets in case user tries to register with both email and mobile
         * @param response - API response
         */
        mod_login.handleSignUpVerifyCallback = function (emailId, sso, response) {
            return function (response) {
                mod_login.hideLoader();
                var $errorElementOtp = $('#toi-verifyotp-password input[name="otpverify"]').closest('li');
                var loginType = $('#verify-logintype').val();
                var mobile = '';
                var $inputVal = $("#verify-inputVal");
                var verifiedData = {};
                if(response && response.code === 200) {
                    mod_login.fireGAEvent( 'Login_Success_' + mod_login.getPageName());
                    if(!emailId || !sso) {
                        if(loginType === 'email') {
                            verifiedData.email = $inputVal.val();
                        } else {
                            verifiedData.mobile = $inputVal.val();
                        }
                        mod_login.showSuccessMsgScreen(false, verifiedData);
                    } else {
                        mobile = $inputVal.val();
                        mod_login.showSignUpOtpScreen(sso, '', emailId + '#' + mobile);
                    }
                    
                    mod_login.isLoggedIn(loginCallback);
                } else {
                    $('.successMsg').hide();
                    switch(response.code) {
                        case 414: 
                            mod_login.handleError($errorElementOtp, (loginType === 'email'? errorConfig.wrongOtpEmail: errorConfig.wrongOtp));
                            break;
                        case 415:
                            mod_login.handleError($errorElementOtp, errorConfig.expiredOTP);
                            break;
                        case 416:
                            mod_login.handleError($errorElementOtp, errorConfig.limitExceeded);
                            break;
                        case 503:
                            mod_login.handleError($errorElementOtp, errorConfig.connectionError);
                            break;
                        default:
                            mod_login.handleError($errorElementOtp, (errorConfig.serverError));
                            
                    }
                    
                    mod_login.fireGAEvent('API_Error_' + response.code);
                }   
            }
        };
        
        
        mod_login.registerUserCallback = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('#sharedDataAllowed').closest('li');
            var mobile = $('#toi-register input[name="mobile"]').val();
            if(response && response.code === 200) {
                mod_login.showSignUpOtpScreen(response.data.ssoid, mobile);
                mod_login.setScreenName('Complete_Profile');
            } else {
                if(response.code === 429) {
                    mod_login.handleError($errorElement, errorConfig.userAlreadyRegistered);
                } else if (response.code === 416) {
                    mod_login.handleError($errorElement, errorConfig.limitExceeded);
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                if(typeof grecaptcha === 'object' && mod_login.showCaptcha()) {
                    grecaptcha.reset(recaptchaWidgetId);
                }
                
                mod_login.setRecaptchaCode('');
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_login.getFirstAndLastName = function (name) {
            var nameArr = [];
            var nameObj = {firstName: '', lastName: ''};
            if(name && name.length > 0) {
                name = name.replace(/  +/g, ' ');
                nameArr = name.split(' ');
                nameObj.firstName = nameArr[0] || '';
                if(nameArr.length > 1) {
                    nameArr.splice(0,1);
                    nameObj.lastName = nameArr.join(' ');
                }
            }
            
            return nameObj;
        };
        
        mod_login.loginWithOTP = function(e, isRegenerate) {
            // Do not perform any action if generate otp is disabled
            if($('#sso-generate-otp').hasClass('disabled')) {
                return;
            }
            
            var $emailId = $('#toi-login input[name="emailId"]');
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#toi-login input[name="emailId"]').val(),
                fnCall;
            
            inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            fnCall = (loginType === 'email'? jssoObj.getEmailLoginOtp: jssoObj.getMobileLoginOtp);
            
            if($('#sso-basic-regenerate-otp-timer') && $('#sso-basic-regenerate-otp-timer-text')) {
                var timeleft = 60;
                
                if($('#sso-regenerate-otp')) {
                    $('#sso-regenerate-otp').hide()
                }
                
                $('#sso-basic-regenerate-otp-timer-text').text(timeleft);
                $('#sso-basic-regenerate-otp-timer').show();
                
                var otpcountdownTimer = setInterval(function(){
                    timeleft = timeleft - 1;
                    $('#sso-basic-regenerate-otp-timer-text').text(timeleft);
                    if(!cachedElements.loginPopup.hasClass('active')) {
                        clearInterval(otpcountdownTimer);
                    }
                    if(timeleft === 0) {
                       if($('#sso-regenerate-otp')) {
                           $('#sso-regenerate-otp').show();
                       }
                        
                        $('#sso-basic-regenerate-otp-timer').hide();
                        
                        clearInterval(otpcountdownTimer);
                    }
       
                    
                },1000);
                
                
            }
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                if($('#toi-login input[name="otplogin"]').val()==''){
                     $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                     $ssoSignInInputBtn.prop('disabled',true);
                    
                }
                fnCall.call(jssoObj, inputVal, mod_login.handleLoginOTPCallback(isRegenerate));
                if(isRegenerate) {
                    mod_login.fireGAEvent( mod_login.getPageName() + '_Re_OTP');
                } else {
                    mod_login.fireGAEvent(mod_login.getPageName() + '_OTP_Submit');   
                }
            }
        };
        
        // Duplicate method in case any message needed for regenerate OTP logic        
        mod_login.regenerateLoginOTP = function() {
            // Do not perform any action if regenerate otp is disabled
            if($('#sso-regenerate-otp').hasClass('disabled')) {
                return;
            }
            
            mod_login.loginWithOTP({}, true);
        };
        
        mod_login.fpRegenerateOTP = function () {
            // Do not perform any action if regenerate OTP button is disabled
            if($(this).hasClass('disabled')) {
                return;
            }
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#fp-inputVal').val(),
                fnCall;
  
            fnCall = (loginType === 'email'? jssoObj.getEmailForgotPasswordOtp: jssoObj.getMobileForgotPasswordOtp);
            
            if($('#sso-regenerate-otp-timer') && $('#sso-regenerate-otp-timer-text')) {
                var timeleft = 60;
               
                
                if($('#sso-fp-regenerate-otp')) {
                    $('#sso-fp-regenerate-otp').hide()
                }
                
                $('#sso-regenerate-otp-timer-text').text(timeleft);
                $('#sso-regenerate-otp-timer').show();
                
                var otpcountdownTimer = setInterval(function(){
                    timeleft = timeleft - 1;
                    $('#sso-regenerate-otp-timer-text').text(timeleft);
                    if(!cachedElements.loginPopup.hasClass('active')) {
                        clearInterval(otpcountdownTimer);
                    }
                    if(timeleft === 0) {
                       if($('#sso-fp-regenerate-otp')) {
                           $('#sso-fp-regenerate-otp').show();
                       }
                        
                        $('#sso-regenerate-otp-timer').hide();
                        
                        clearInterval(otpcountdownTimer);
                    }
       
                    
                },1000);
                
            }
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, inputVal, mod_login.handleForgotPasswordRegenerateOTPCallback);
                mod_login.fireGAEvent(mod_login.getPageName() + '_Re_OTP');
            }
        };
        
        mod_login.handleForgotPasswordRegenerateOTPCallback = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('input[name="otpfp"]').parent().parent();
            mod_login.handleError($errorElement);
            if(response && response.code === 200) {
                $('#toi-forgot-password input[name="otpfp"]').val('');
                $('.successMsg').text('OTP has been successfully sent.').show();
            } else {
                $('.successMsg').hide();
                switch(response.code) {
                    case 416:
                        mod_login.handleError($errorElement, errorConfig.limitExceeded);
                        $('#sso-fp-regenerate-otp').addClass('disabled');
                        $('#forgot-password-sent').hide();
                        break;
                    case 503:
                        mod_login.handleError($errorElement, errorConfig.connectionError);
                        break;
                    default:
                        mod_login.handleError($errorElement, errorConfig.serverError);
                    
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_login.verifyPageRegenerateOTP = function () {
            if($('#sso-verify-regenerate-otp').hasClass('disabled')) {
                return;
            }
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = $('#verify-logintype').val(),
                inputVal = $('#verify-inputVal').val(),
                ssoId = $('#verify-ssoid').val(),
                fnCall;
  
            fnCall = (loginType === 'email'? jssoObj.resendEmailSignUpOtp: jssoObj.resendMobileSignUpOtp);
            
            if($('#sso-verify-regenerate-otp-timer') && $('#sso-verify-regenerate-otp-timer-text')) {
                var timeleft = 60;
               
                
                if($('#sso-verify-regenerate-otp')) {
                    $('#sso-verify-regenerate-otp').hide()
                }
                
                $('#sso-verify-regenerate-otp-timer-text').text(timeleft);
                $('#sso-verify-regenerate-otp-timer').show();
                
                var otpcountdownTimer = setInterval(function(){
                    timeleft = timeleft - 1;
                    $('#sso-verify-regenerate-otp-timer-text').text(timeleft);
                    if(!cachedElements.loginPopup.hasClass('active')) {
                        clearInterval(otpcountdownTimer);
                    }
                    if(timeleft === 0) {
                       if($('#sso-verify-regenerate-otp')) {
                           $('#sso-verify-regenerate-otp').show();
                       }
                        
                        $('#sso-verify-regenerate-otp-timer').hide();
                        
                        clearInterval(otpcountdownTimer);
                    }
       
                    
                },1000);
                
            }
            if(typeof fnCall === 'function') {
                mod_login.showLoader();
                fnCall.call(jssoObj, inputVal, ssoId, mod_login.handleSignUpVerifyRegenerateOTPCallback);
                mod_login.fireGAEvent(mod_login.getPageName() + '_Re_OTP');
            }
        };
        
        mod_login.handleSignUpVerifyRegenerateOTPCallback = function (response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-verifyotp-password li.password:visible');
            mod_login.handleError($errorElement);
            if(response && response.code === 200) {
                $('#toi-verifyotp-password input[name="otpverify"]').val('');
                $('.successMsg').text('OTP has been successfully sent.').show();
            } else {
                $('.successMsg').hide();
                switch(response.code) {
                    case 416:
                        mod_login.handleError($errorElement, errorConfig.limitExceeded);
                        $('#sso-verify-regenerate-otp').addClass('disabled');
                        break;
                    case 503:
                        mod_login.handleError($errorElement, errorConfig.connectionError);
                        break;
                    default:
                        mod_login.handleError($errorElement, errorConfig.serverError);
                    
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_login.handleLoginOTPCallback = function(isRegenerate) {
            return function (response) {
                mod_login.hideLoader();
                var $errorElement = $('#toi-login li.password:visible');
                mod_login.handleError($errorElement);
                if(response && response.code === 200) {
                    var loginType = mod_login.getLoginType();
                    var inputVal = $('#toi-login input[name="emailId"]').val();
                    inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
                    $('#sso-pwdDiv').hide();
                    $('#sso-otpLoginDiv, #sso-login-otp-msg').show();
                    $('#sso-login-otp-msg > p').text('We have sent a 6 digit verification code ' + (loginType === 'email'? 'to ': 'on +91-') + inputVal);
                    if(isRegenerate) {
                        $('#toi-login input[name="otplogin"]').val('');
                        $('#sso-otpLoginDiv .successMsg').text('OTP has been successfully sent.').show();
                    }
                } else {
                    $('#sso-otpLoginDiv .successMsg').hide();
                    switch(response.code) {
                        case 416:
                            mod_login.handleError($errorElement, errorConfig.limitExceeded);
                            // Disable Regenerate OTP button and remove text message specifying OTP has been sent
                            $('#sso-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').addClass('disabled');
                            $('#sso-login-otp-msg > p').text('');
                            break;
                        case 503:
                            mod_login.handleError($errorElement, errorConfig.connectionError);
                            break;
                        default:
                            mod_login.handleError($errorElement, errorConfig.serverError);
                        
                    }
                    
                    mod_login.fireGAEvent('API_Error_' + response.code);
                }
            }
        };
        
        mod_login.fbLoginHandler = function (e) {
            var callback = function () {
                mod_login.closeBtnHandler();
            };
            
            mod_login.initiateFbLogin(callback);
        };
        
        mod_login.gplusLoginHandler = function () {
            var callback = function () {
                mod_login.closeBtnHandler();
            };
            
            mod_login.initiateGplusLogin(callback);
        };
        
        mod_login.remvoePrcInSession = function() {
            sessionStorage.removeItem('nativePrc');
        }
        mod_login.removeIpr = function() {
             cookie.remove("ipr", "/", ".indiatimes.com");
        }
        mod_login.setPrcInSession = function() {
            var prc = cookie.get("prc");
            if(window && window.activePlanName!=""){
    			             sessionStorage.setItem('planName', window.activePlanName);
    			             localStorage.setItem('planName', window.activePlanName);
    		}
             if(prc){
                 
                sessionStorage.setItem('nativePrc', prc);
  
             }
        }
        mod_login.getFromServer=function(){
            var prc = sessionStorage.getItem('nativePrc');
            var fetchfromServer = false;

            if (prc) {
                cookie.set("prc", prc, 1, "/", ".indiatimes.com");
            } else {
                fetchfromServer = true;
            }
            return fetchfromServer;
        }
        
        mod_login.handleLoginCallback_andPrcFPrime = function(response) {
            if (mod_login.getFromServer()) {
                $.ajax({
                    url: constants.nativePrc,
                    //headers: options,
                    xhrFields: {
                        withCredentials: true
                    },
                    success: function(data) {
                        mod_login.setPrcInSession()
                        mod_login.handleLoginCallback(response);
                        mod_login.removeIpr()

                    },
                    error: function(XMLHttpRequest, textStatus, errorThrown) {
                        mod_login.setPrcInSession()
                        mod_login.handleLoginCallback(response);
                        mod_login.removeIpr()
                    }
                });
            }
        }
        mod_login.setNativePrc = function() {
            if (mod_login.getFromServer()) {
                $.ajax({
                    url: constants.nativePrc,
                    xhrFields: {
                        withCredentials: true
                    },
                    success: function(data) {
                        mod_login.setPrcInSession();
                        mod_login.removeIpr()
                    },
                    error: function() {
                        mod_login.setPrcInSession();
                        mod_login.removeIpr();
                    }
                });
            }
        }
        mod_login.handleLoginCallback = function (response) {
            mod_login.hideLoader();
            var isOtpDivVisible = $('#sso-otpLoginDiv').is(':visible');
            var $errorElement = $('#toi-login li.password:visible');
            var loginType = mod_login.getLoginType();
            if(response && response.code === 200) {
                mod_login.closeBtnHandler();
                mod_login.isLoggedIn(loginCallback);
                mod_login.fireGAEvent('Login_Success_' + mod_login.getPageName());
                 $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                 $ssoSignInInputBtn.prop('disabled', false);
                 setTimeout(function(){
                       window.location.reload(false);   //need to check with @ashok.singh1, but will improve it later... 
                 },2000)
            } else {
                $('.successMsg').hide();
                switch(response.code) {
                    case 415:
                        mod_login.handleError($errorElement, (!isOtpDivVisible? errorConfig.wrongPassword: errorConfig.expiredOTP));
                        break;
                    case 416:
                        mod_login.handleError($errorElement, errorConfig.limitExceeded);
                        break;
                    case 503:
                        mod_login.handleError($errorElement, errorConfig.connectionError);
                        break;
                    default:
                        mod_login.handleError($errorElement, (!isOtpDivVisible? errorConfig.wrongPassword: (loginType === 'email'? errorConfig.wrongOtpEmail: errorConfig.wrongOtp )));
                        
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_login.handleEmailIdClick = function (e) {
            e.preventDefault();
            var $password = $('#sso-pwdDiv input[name="password"]');
            var $otp = $('#sso-otpLoginDiv input[type="password"]');
            var $emailId = $('#toi-login input[name="emailId"]');
            var password = '';
            var $errorMsgElem = $('#toi-login li.password:visible .errorMsg');
            
            var $loginCont = $('#toi-login');
            var $agree = $loginCont.find('input[name="agree"]');
            var $sharedDataAllowed = $loginCont.find('input[name="sharedDataAllowed"]');
            var $agreeParent = $agree.closest('li');
            var $sharedDataAllowedParent = $sharedDataAllowed.closest('li');
            var sharedDataAllowed = mod_login.checkAndSetSharedDataTnCError($sharedDataAllowed, $sharedDataAllowedParent) ? '1' : '0';
            var tnCAgreed = mod_login.checkAndSetAgreeTnCError($agree, $agreeParent) ? '1' : '0';
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#toi-login input[name="emailId"]').val(),
                fnCall,
                isGDPRSpecific = $('#toi-login input.js-contentCB').length > 0,
                inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            
            $emailId.prop('disabled', true);
            
            if($password.is(':visible') || $otp.is(':visible')) {
                // fnCall = (loginType === 'email'? jssoObj.verifyEmailLogin: jssoObj.verifyMobileLogin);
                if (isGDPRSpecific && (sharedDataAllowed !== '1' || tnCAgreed !== '1')) {
                    return;
                }
                fnCall = (function(){
                    var fn;
                    // consent checkboxes are visible on form use gdpr specific api methods
                    if(isGDPRSpecific){
                        if(loginType === 'email'){
                            fn = jssoObj.verifyEmailLoginGdpr;
                        }
                        else{
                            fn = jssoObj.verifyMobileLoginGdpr;
                        }
                    }
                    // use non gdpr api methods
                    else if(loginType === 'email'){
                        fn = jssoObj.verifyEmailLogin;
                    }
                    else{
                        fn = jssoObj.verifyMobileLogin;
                    }
                    return fn;
                })();
                password = $password.is(':visible')? $password.val(): $otp.val();
                mod_login.fireGAEvent(mod_login.getPageName() + ($password.is(':visible')? '_PW': '_OTP') + '_Entry');
                if(password.length === 0) {
                    $errorMsgElem.html(errorConfig.emptyPassword).show();
                    return;
                } else if(typeof fnCall === 'function') {
                    $('.errorMsg').html('').hide();
                    mod_login.showLoader();
                    $ssoSignInInputBtn = $('#sso-signInButtonDiv > [type="submit"]');
                    $ssoSignInInputBtn.prop('disabled', true);
                    if(isGDPRSpecific){
                        fnCall.call(jssoObj, inputVal, password, tnCAgreed, sharedDataAllowed, mod_login.getTimespointValue(), mod_login.handleLoginCallback_andPrcFPrime);
                    }
                    else{
                        fnCall.call(jssoObj, inputVal, password, mod_login.handleLoginCallback_andPrcFPrime);
                    }
                }
            } else {
                if(typeof jssoObj.checkUserExists === 'function') {
                    mod_login.showLoader();
                    jssoObj.checkUserExists(inputVal, mod_login.checkUserExists);
                    mod_login.setPageName(loginType);
                    mod_login.fireGAEvent(mod_login.getPageName() + '_Continue');
                } else {
                    $emailId.prop('disabled', false);
                }
            }
        };
        
        mod_login.getValidEmailId = function (email) {
            var regEmail = /^([A-Za-z0-9_\-\.])+\@([A-Za-z0-9_\-\.])+\.([A-Za-z]{2,6})$/;
            var emailId = '';
            if(regEmail.test(email)) {
                emailId = email;
            }
            
            return emailId;
        };
        
        // withoutPrefix parameter is needed to check for valid number without +91 or 0 appended
        mod_login.getValidMobileNumber = function (mobile, withoutPrefix) {
            var regMobile = (withoutPrefix? /^[6789]\d{9}$/ : /^(\+91)?[0]?[6789]\d{9}$/);
            var notAllowedNumbers = ['6666666666', '7777777777', '8888888888', '9999999999'];
            var mobileNo = '';
            var length = mobile.length;
            if(regMobile.test(mobile)) {
                mobileNo = mobile.substring(mobile.length - 10, mobile.length);
            }
            
            if(notAllowedNumbers.indexOf(mobileNo) !== -1) {
                mobileNo = '';
            }
            
            return mobileNo;
        };
        
        mod_login.closeModalOnEscapeKeyPress = function (e) {
            if(!cachedElements.loginPopup.hasClass('active')) {
                return;
            }
            var keyCode = e.keyCode || e.which;
            if(keyCode === 27) {
                cachedElements.closeBtn.click();
            }
        };
        
        mod_login.isPasswordValid = function (password){
            return password && password.length >= 6 && password.length <= 14 && mod_login.hasNumber(password) && mod_login.hasSpecialCharacters(password) && mod_login.hasLowerCase(password);
        };
        
        mod_login.hasLowerCase = function (str) {
            return (/[a-z]/.test(str));
        };
        
        mod_login.hasNumber = function (str) {
            return (/[0-9]/.test(str));
        };
        
        mod_login.hasSpecialCharacters = function (str) {
            return (/[!@#$%^&*()]/.test(str));
        };
        
        mod_login.passwordErrors = function (e) {
            var $this = $(this);
            setTimeout(function(){
                var password= $this.val();
                if(password.length < 6 || password.length > 14){
                    $("#charCnt").removeClass('success').addClass('error');
                }else{
                    $("#charCnt").removeClass('error').addClass('success');
                }
                if(mod_login.hasLowerCase(password)){
                    $("#lwCnt").removeClass('error').addClass('success');
                }else{
                    $("#lwCnt").removeClass('success').addClass('error');
                }
                if(mod_login.hasNumber(password)){
                    $("#numCnt").removeClass('error').addClass('success');
                }else{
                    $("#numCnt").removeClass('success').addClass('error');
                }
                if(mod_login.hasSpecialCharacters(password)){
                    $("#spclCharCnt").removeClass('error').addClass('success');
                }else{
                    $("#spclCharCnt").removeClass('success').addClass('error');
                }
            }, 0);
            
            // return validPassword;
        };
        
        mod_login.showPassword = function (e) {
            var $this = $(this);
            $this.prev().attr('type', 'text');
            $this.removeClass('view-password').addClass('hide-password');
        };
        
        mod_login.hidePassword = function (e) {
            var $this = $(this);
            $this.prev().attr('type', 'password');
            $this.removeClass('hide-password').addClass('view-password');
        };
        
        mod_login.showPasswordCondition = function (e) {
            e.stopPropagation();
            $('.password-conditions').show();
        };
        
        mod_login.stopEventProp = function (e) {
            e.stopPropagation();  
        };
        
        mod_login.setLoginType = function (type) {
            ssoLoginType = type;
        }
        
        mod_login.getLoginType = function () {
            return ssoLoginType;
        }
        
        mod_login.setPageName = function(loginType) {
            pageName = (loginType === 'email'? 'Email': 'MobNo');
        }
        
        mod_login.getPageName = function() {
            return pageName;
        }
        
        mod_login.setScreenName = function (name) {
            screenName = name;
        };
        
        mod_login.getScreenName = function (name) {
            return screenName;
        };
        
        mod_login.setAndGetJssoCrosswalkObj = function () {
            var jssoObj = {};
            if(typeof jssoCrosswalkObj === 'object') {
                jssoObj = jssoCrosswalkObj;
            } else if (typeof JssoCrosswalk === 'function') {
                jssoCrosswalkObj = new JssoCrosswalk('toi', 'web');
                jssoObj = jssoCrosswalkObj;
            }
            
            return jssoObj;
        }
        
        mod_login.showLoader = function() {
            cachedElements.formContainer.addClass('loader');
        }
        
        mod_login.hideLoader = function() {
            cachedElements.formContainer.removeClass('loader');
        }
        
        mod_login.closeBtnHandler = function() {
            cachedElements.loginPopup.removeClass('active');
            $('body').removeClass('scroll-block');
            mod_login.setScreenName('Login_Screen');
            $('body').removeClass('disable-scroll');
            $('#user-sign-in.toggle').removeClass("toi-user-login");
            if(typeof grecaptcha === 'object' && $('#toi-register').is(':visible') && mod_login.showCaptcha()) {
                grecaptcha.reset(recaptchaWidgetId);   
            }
        };
        
        mod_login.showConsentPopUp = function(){
            var popUpHtml = '<div class="userConsentPopUp">'
                          +     '<div class="consentHeader">'
                          +         '<h2>Welcome Back to THE TIMES OF INDIA</h2>'
                          +         '<span class="closeBtn">+</span>'
                          +     '</div>'
                          +     '<div class="consentDescription">'
                          +         '<p><strong>One Last Step!</strong></p>'
                          +         '<p>We tailor your experience and understand how you and other visitors use this website by using cookies and other technologies. This means we are able to keep this site free-of-charge to use.</p>'
                          +         '<p>Please provide consent for the following scenarios so that we can ensure an enjoyable experience for you on our websites and mobile apps.</p>'
                          +     '</div>'
                          +     '<ul class="consentItemsList">'
                          +         mod_login.getConsentHTML()
                          +     '</ul>'
                          +     '<div class="btn-container">'
                          +         '<input id="consentAcceptButton" type="button" value="AGREE" ' + (__isEUUser? 'disabled="disabled"': '') + '/>'
                          +     '</div>'
                          + '</div>';
            
            isUserCloseActionForConsentOverlay = true;
            
            TimesApps.overlayModule.create({
                id : 'userConsentPopUp',
                isFullscreen : true,
                html : popUpHtml,
                classString: 'login-consent',
                _onRenderCb: function(){
                    //bind events
                    //checkbx change
                    $('#vcw').off('change', 'input.js-contentCB').on('change', 'input.js-contentCB', mod_login.handleConsentChange);
                    //accept btn click
                    $('#consentAcceptButton').off('click').on('click', mod_login.consentPopUpAcceptBtnHandler);
                    $('#vcw .consentHeader .closeBtn').off('click').on('click', function() {
                        if(isUserCloseActionForConsentOverlay){
                            mod_login.logout();
                            TimesApps.overlayModule.close();
                        }
                    });
                    //handle overlay closed by user
                    require(["tiljs/event"], function(eventBus){
                        eventBus.subscribe("overlayClosed", function(overlay){
                            if(overlay.id === 'userConsentPopUp' && isUserCloseActionForConsentOverlay){
                                mod_login.logout();
                            }
                        });
                    });
                }
            })  
        };
        
        mod_login.consentPopUpAcceptBtnHandler = function(){
            var $overlay = $('#vcw');
            var $agree = $overlay.find('input[name="agree"]');
            var $sharedDataAllowed = $overlay.find('input[name="sharedDataAllowed"]');
            var $agreeParent = $agree.closest('li');
            var $sharedDataAllowedParent = $sharedDataAllowed.closest('li');
            var sharedDataAllowed = mod_login.checkAndSetSharedDataTnCError($sharedDataAllowed, $sharedDataAllowedParent) ? '1' : '0';
            var tnCAgreed = mod_login.checkAndSetAgreeTnCError($agree, $agreeParent) ? '1' : '0';
            var formValid = true;
            
            if(sharedDataAllowed !== '1' || tnCAgreed !== '1'){
                formValid = false;
            }
            
            if(formValid){
                mod_login.updateUserPermissions(true);
            }
        }
        
        mod_login.updateUserPermissions = function(allowCallbackAfterLogin) {
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            if(typeof jssoObj.updateUserPermissions === 'function') {
                jssoObj.updateUserPermissions('1', '1', mod_login.getTimespointValue(), function(response){
                    isUserCloseActionForConsentOverlay = false;
                    TimesApps.overlayModule.close();
                    if (allowCallbackAfterLogin && typeof callbackToCallAfterConsent === 'function') {
                        callbackToCallAfterConsent(userObj);
                        callbackToCallAfterConsent = null;
                    }
                    
                    // jssoObj.getValidLoggedInUser();
                });
            }
            
        }
        
        mod_login.checkAndUpdateTimespointValue = function() {
            var consentAgreedVal = cookie.get('gdpr');
            if (consentAgreedVal && consentAgreedVal.substr(0, 4) === '1#1#') {
                if ((consentAgreedVal[4] !== '0' && __isEUUser) || (consentAgreedVal[4] !== '1' && !__isEUUser)) {
                    mod_login.updateUserPermissions();
                }   
            }
        };
        
        mod_login.isConsentGiven = function() {
            var consentAgreed = cookie.get('gdpr');
            return (consentAgreed === '1#1#1' || consentAgreed === '1#1#0'|| !__isEUUser && consentAgreed ==='n#n#n' );
        };
        
        mod_login.init = function (init_config) {
            var initCallback = function() {
                var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
                
                cachedElements.loginPopup.show();
                mod_login.updateConfig(init_config);
                if (config.renderer === true) {
                    mod_login.onStatusChange(function (_user) {
                        mod_login.renderPlugins(_user);
                    });
                }
                mod_login.isLoggedIn(function (user) {
                    var _cbq = window._cbq = (window._cbq || []);
                    if (user && typeof user === 'object') {
                        event.publish("user.autologgedin", user);
                        require(['primeuserhandler'], function(puser) {
                            var isPrime = puser.isPrimeActiveUser();
                            if (isPrime) {
                                _cbq.push(['_acct', 'prime']);
                            } else {
                                _cbq.push(['_acct', 'lgdin']);
                            }
                            
                            TimesApps.loadChartBeatCalls();
                            var hashVal = window.location.hash.toLowerCase();
                            if ((hashVal === ('#' + config.primeFreeSuccessHash) || hashVal === ('#' + config.primePaidSuccessHash))) {
                                // slice off the remaining '#' in HTML5:
                                if (typeof window.history.replaceState == 'function') {
                                    window.history.replaceState({}, '', window.location.href.substr(0, window.location.href.indexOf('#')));
                                }
                                mod_login.setPrcForUser(puser.getPrimeCongratsPopup.bind(puser, true, true));
                            }
                            /*else if( !puser.isPrimeActiveUser() && puser.isPrimeActiveUser(user.getPrimeStatus()) ){
                                mod_login.setPrcForUser(puser.getPrimeCongratsPopup.bind(puser, true, true));
                            }*/
                            
                            // if (isPrime && typeof TimesApps.SavingsAPI === 'object') {
                            //     TimesApps.SavingsAPI.initializeApi();
                            // }
                            
                            // if (typeof TimesApps.SavingsAPI === 'object') {
                            //     TimesApps.SavingsAPI.initializeApi();
                            // }
                        }); 
                    } else {
                        _cbq.push(['_acct', 'anon']);
                        TimesApps.loadChartBeatCalls();
                    }
                });
                
                mod_login.onStatusChange(function (_user) {
                    if(__isEUUser && _user && !mod_login.isConsentGiven()){
                        mod_login.showConsentPopUp();
                    }
                });
                
                
                mod_login.initActions();
            }
            
            TimesApps.checkGdprAndCall(function(){
                __isEUUser = false;
                initCallback();
            }, function(){
                initCallback();
            });
        };
        
        mod_login.getConfig = function(){
            return config;
        }
        
        mod_login.getErrorConfig = function(){
            return errorConfig;
        }
        
        mod_login.addHoverEffect = function(element, callback) {
            element.addEventListener('mouseover', callback);
        }
        
        mod_login.initActions = function () {
            cachedElements.closeBtn
                .on("click", function() {
                    mod_login.closeBtnHandler();
                    mod_login.fireGAEvent('Close');
                });
            
            $("[data-plugin='user-isloggedin']")
                .on("click", "[data-plugin='user-logout']", function () {
                    mod_login.logout();
                });
                
            $("[data-plugin='user-isloggedin']").on("click", "[data-prime='redeem_benefits']", function (e) {
                    var  dataLayer = window.dataLayer || [];
                    dataLayer.push({
                        event: 'redeem_benefits',
                        steps_name: 'cta_click'
                    });
                });
                
            $("[data-plugin='user-notloggedin']")
                .on("click", "[data-plugin='user-login']", function () {
                    // handled by mobile login
                    if(typeof toiprops !== 'undefined' && toiprops.primetemplate === true){
                        return;
                    }
                    $('body').addClass('disable-scroll');
                    cachedElements.loginPopup.addClass('active');
                    mod_login.showLoginScreen();
                    mod_login.setScreenName('Login_Screen');
                    mod_login.fireGAEvent('Load');
                })
                .on("click", "[data-plugin='user-register']", function () {
                    mod_login.register();
                })
                .on("click", "[data-plugin='user-login-facebook']", function () {
                    mod_login.loginWithFacebook();
                })
                .on("click", "[data-plugin='user-login-twitter']", function () {
                    mod_login.loginWithTwitter();
                })
                .on("click", "[data-plugin='user-login-google']", function () {
                    mod_login.loginWithGoogle();
                });
                
            $(document).on('keyup', mod_login.closeModalOnEscapeKeyPress);
            var element = document.querySelector("[data-plugin='user-isloggedin']");
            mod_login.addHoverEffect(element, function(){
                if(!window.isReedemGAfired){
                    var  dataLayer = window.dataLayer || [];
                    dataLayer.push({
                        event: 'redeem_benefits',
                        steps_name: 'view'
                    });
                    window.isReedemGAfired = true;
                    element.removeEventListener('mouseover', callback);
                }
            });
            
            cachedElements.formContainer
                .off('keyup paste', '#toi-login input[name="emailId"]').on('keyup paste', '#toi-login input[name="emailId"]', mod_login.handleEmailIdKeyUp)
                 .off('keyup paste', '#toi-login input[name="password"]').on('keyup paste', '#toi-login input[name="password"]', mod_login.handlePasswordKeyUp)
                  .off('keyup paste', '#toi-login input[name="otplogin"]').on('keyup paste', '#toi-login input[name="otplogin"]', mod_login.handleOtploginKeyUp)
                .off('click', '#toi-login[data-login-type="email"] #sso-signInButtonDiv [type="submit"]').on('click', '#toi-login[data-login-type="email"] #sso-signInButtonDiv input[type="submit"]', mod_login.handleEmailIdClick)
                .off('submit', '#toi-login[data-login-type="email"] #toi-login form').on('submit', '#toi-login[data-login-type="email"] #toi-login form', mod_login.handleEmailIdClick)
                .off('click', '#toi-login[data-login-type="email"] #changeEmailIdDiv').on('click', '#toi-login[data-login-type="email"] #changeEmailIdDiv', mod_login.changeEmailIdHandler)
                .off('click', '#changeRegisterEmailId').on('click', '#changeRegisterEmailId', mod_login.changeRegisterEmailIdHandler)
                .off('click', '#sso-forgot-pass').on('click', '#sso-forgot-pass', mod_login.forgotPasswordHandler)
                .off('click', '#sso-fb-login').on('click', '#sso-fb-login', mod_login.fbLoginHandler)
                .off('click', '#sso-gplus-login').on('click', '#sso-gplus-login', mod_login.gplusLoginHandler)
                .off('click', '#sso-generate-otp').on('click', '#sso-generate-otp', mod_login.loginWithOTP)
                .off('click', '#toi-login[data-login-type="email"] #sso-regenerate-otp').on('click', '#sso-regenerate-otp', mod_login.regenerateLoginOTP)
                .off('click', '#sso-fp-regenerate-otp').on('click', '#sso-fp-regenerate-otp', mod_login.fpRegenerateOTP)
                .off('click', '#sso-verify-regenerate-otp').on('click', '#sso-verify-regenerate-otp', mod_login.verifyPageRegenerateOTP)
                .off('click', '#sso-registerBtn').on('click', '#sso-registerBtn', mod_login.registerButtonHandler)
                .off('submit', '#toi-register form').on('submit', '#toi-register form', mod_login.registerButtonHandler)
                .off('click', '#sso-verify-btn').on('click', '#sso-verify-btn', mod_login.verifyButtonHandler)
                .off('click', '#sso-verify-email-btn').on('click', '#sso-verify-email-btn', mod_login.verifyEmailButtonHandler)
                .off('submit', '#toi-verifyotp-password form').on('submit', '#toi-verifyotp-password form', mod_login.verifyButtonHandler)
                .off('click', '#sso-fp-btn').on('click', '#sso-fp-btn', mod_login.forgotPasswordBtnHandler)
                .off('submit', '#toi-forgot-password form').on('submit', '#toi-forgot-password form', mod_login.forgotPasswordBtnHandler)
                .off('focus', 'input[name="registerPwd"]').on('focus', 'input[name="registerPwd"]', mod_login.showPasswordCondition)
                .off('keyup paste', '#toi-register input[name="registerPwd"]').on('keyup paste', '#toi-register input[name="registerPwd"]', mod_login.passwordErrors)
                .off('keyup paste', '#toi-register input[type="text"]').on('keyup paste', '#toi-register input[type="text"]', mod_login.registerFormErrorHandler)
                .off('keyup paste', '#toi-register input[name!="registerPwd"][type="password"]').on('keyup paste', '#toi-register input[name!="registerPwd"][type="password"]', mod_login.registerFormErrorHandler)
                .off('change', '#toi-register input[name="agree"]').on('change', '#toi-register input[name="agree"]', mod_login.registerFormErrorHandler)
                // .off('focus blur', '[placeholder]:not(input[name="registerPwd"])').on('focus blur', '[placeholder]:not(input[name="registerPwd"])', mod_login.stopEventProp)
                .off('focus blur', '[placeholder]').on('focus blur', '[placeholder]', mod_login.stopEventProp)
                .off('keyup paste', '#toi-forgot-password input').on('keyup paste', '#toi-forgot-password input', mod_login.fpInputKeyupHandler)
                .off('keyup paste', '#toi-verifyotp-password input[name="otpverify"]').on('keyup paste', '#toi-verifyotp-password input[name="otpverify"]', mod_login.enableVerifyButton)
                .off('click', '.view-password').on('click', '.view-password', mod_login.showPassword)
                .off('click', '.hide-password').on('click', '.hide-password', mod_login.hidePassword)
                .off('change', '#toi-register input[name="sharedDataAllowed"]').on('change', '#toi-register input[name="sharedDataAllowed"]', mod_login.registerFormErrorHandler)
                .off('change', 'input.js-contentCB').on('change', 'input.js-contentCB', mod_login.handleConsentChange)
        };
        
        cachedElements.loginPopup.off('click').on('click', function(e){
           if(e.srcElement && e.srcElement.id === 'login-popup') {
               cachedElements.closeBtn.click();
           }
        });
        mod_login.updateConfig(mod_login_config);
        return mod_login;
    });
    
    define( 'login',[ "tiljs/apps/times/usermanagement" ],
    function ( login) {

        return login;
    } );


    
    (function () {
            var gstScreen = '';
             var cachedElements = {
                formContainer: $('#gst-add-form'),
            }
            var formObj = {
                username: '',
                address: '',
                address2: '',
                pincode: '',
                city: '',
                state: '',
                country: '',
                ugstnumber: '',
            };
            var formErrObj = {
                username: '',
                address: '',
                address2: '',
                pincode: '',
                city: '',
                state: '',
                country: '',
                ugstnumber: '',
            };
            var validateStringData = function(str){
              if (str) {
                return str.replace(/[^\w\s]/gi, '')
              }
            };
            
          var getCachedOrderId = function(){
            let id;
            let orderData;
        
            try {
              var jsonData = localStorage.getItem('toi_subscription');
              orderData = JSON.parse(jsonData);
            } catch (e) {
              orderData = null;
            }
            if (orderData && orderData.order_id) {
              id = orderData.order_id;
            }
            return id;
          };
            
            var containsSpecialChars = function(str){
              var specialChars = `\`!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?~`;
              var result = specialChars.split('').some(specialChar => {
                if (str.includes(specialChar)) {
                  return true;
                }
                return false;
              });
            
              return result;
            }
            
            var checkUserName = function(str){
              if (str) {
                return str.replace(/^[a-zA-Z,-. ]{2,30}$/, '')
              }
            };
            
            
            var isNormalString = function(str){
              var regUsername = /^[a-zA-Z ]+$/;
              if (str) {
                return regUsername.test(str)
              }
            };
            
            var isNormalStringwithhypen = function(str){
              var regUsername = /^[a-zA-Z- ]+$/;
              if (str) {
                return regUsername.test(str)
              }
             };
            
            var isAddressString = function(str){
             var regAddress =  /^[a-zA-Z0-9-.&:',@/#\[\]() ]+$/;
              if (str) {
                return regAddress.test(str)
              }
            };
            
            var isAlphaNumaricString = function(str){
              var regUsername = /^[a-zA-Z0-9 ]+$/;
              if (str) {
                return regUsername.test(str)
              }
            };
            
            var isAlphaNumaricStringWithoutSpace = function(str){
              var regUsername = /^[a-zA-Z0-9]+$/;
              if (str) {
                return regUsername.test(str)
              }
            };

            function getCookie(name) {
                var cookieArr = document.cookie.split(";");
                // Loop through the array elements
                for(var i = 0; i < cookieArr.length; i++) {
                    var cookiePair = cookieArr[i].split("=");
                    if(name == cookiePair[1].trim()) {
                        return decodeURIComponent(cookiePair[1]);
                    } else if(name == cookiePair[0].trim()) {
                        return decodeURIComponent(cookiePair[1]);
                    }
                }
                return null;
            }
  
            function makereq_get_header(url, header) {
		        return new Promise(function(resolve, reject) {
		            $.ajax({
		                url: url,
		                headers: header,
		                success: function(data) {
		                    resolve(data)
		                },
                         error: function(XMLHttpRequest, textStatus, errorThrown)
                        {
                         reject({})
         
                       }
		            });
		        })
		    }

		    function makereq_post_body(url, data, headersObj) {
		        return new Promise(function(resolve, reject) {
		            $.ajax({
		                url: url,
		                type: "POST",
		                dataType: "json",
		                data: JSON.stringify(data),
		                headers: headersObj,
		                contentType: "application/json",
		                success: function(data) {
		                    resolve(data)
		                },
                        error: function() {
                            reject({status:'FAILED'})
                        }
		            });
		        })
		    }
		    
		    function generateFullUrl(params) {
		        var GSTFORM_GETDATA = 'https://subs.timesofindia.com/subscriptions/user-address/';
                const url = `${GSTFORM_GETDATA}${params.isWapView ? "web" : "web"}`;
                return url;
            }
		    
            function fetchGSTFormData(params) {
              var url = generateFullUrl(params);
              if (params.rqtype === 'POST') {
                return makereq_post_body(url, params.postData, {
                    'Content-Type': 'application/json',
                    TicketId: getCookie('TicketId'),
                    ssoid: getCookie('ssoid'),
                  })
              } else {
                return makereq_get_header(url, {
                    'Content-Type': 'application/json',
                    TicketId: getCookie('TicketId'),
                    ssoid: getCookie('ssoid'),
                  })
              }
            }
           
            var updateFormWithData = function(){
                var gstForm = $('.gst-input-form')[0];
                var gstFormLis = $('.gst-input-form ul li');
                if(formObj['username']){
                    gstForm[0].value = formObj['username'];
                    gstFormLis[0].className = 'inputClicked';
                }
                if(formObj['address']){
                    gstForm[1].value = formObj['address'];
                    gstFormLis[1].className = 'inputClicked';
                }
                if(formObj['address2']){
                    gstForm[2].value = formObj['address2'];
                    gstFormLis[2].className = 'inputClicked';
                }
                if(formObj['pincode']){
                    gstForm[3].value = formObj['pincode'];
                    gstFormLis[3].className = 'inputClicked';
                }
                if(formObj['city']){
                    gstForm[4].value = formObj['city'];
                    gstFormLis[4].className = 'inputClicked';
                }
                if(formObj['state']){
                    gstForm[5].value = formObj['state'];
                    gstFormLis[5].className = 'inputClicked';
                }
                if(formObj['country']){
                    gstForm[6].value = formObj['country'];
                    gstFormLis[6].className = 'inputClicked';
                }
                if(formObj['ugstnumber']){
                    gstForm[7].value = formObj['ugstnumber'];
                    gstFormLis[7].className = 'inputClicked';
                }
                
            }
            
            var checkForMandatoryAndSubmitEnablement = function(){
                if(formObj['username'] && formObj['address'] && formObj['pincode'] && formObj['city'] && formObj['state'] && formObj['country']){
                  if(formErrObj['username'] === '' && formErrObj['address'] === '' && formErrObj['address2'] === '' && formErrObj['pincode'] === '' &&
                  formErrObj['city'] === '' && formErrObj['state'] === '' && formErrObj['country'] === '' && formErrObj['ugstnumber'] === ''){
                       $('.gst-input-form .submitbtn input').removeClass('disabled');
                       return true;
                    } else {
                        $('.gst-input-form .submitbtn input').addClass('disabled');
                        return false;
                    } 
                } else {
                     $('.gst-input-form .submitbtn input').addClass('disabled');
                     return false;
                } 
            } 
            
            var updateFormWithErrorData = function(){
                var gstFormField = $('.gst-input-form .inputValue + span');
                gstFormField[0].className = formErrObj['username'].length>0 ? 'errorMsg' : '';
                gstFormField[1].className = formErrObj['address'].length>0 ? 'errorMsg' : '';
                gstFormField[2].className = formErrObj['address2'].length>0 ? 'errorMsg' : '';
                gstFormField[3].className = formErrObj['pincode'].length>0 ? 'errorMsg' : '';
                gstFormField[4].className = formErrObj['city'].length>0 ? 'errorMsg' : '';
                gstFormField[5].className = formErrObj['state'].length>0 ? 'errorMsg' : '';
                gstFormField[6].className = formErrObj['country'].length>0 ? 'errorMsg' : '';
                gstFormField[7].className = formErrObj['ugstnumber'].length>0 ? 'errorMsg' : '';
                // filling innerHTML
                gstFormField[0].innerHTML = formErrObj['username'];
                gstFormField[1].innerHTML = formErrObj['address'];
                gstFormField[2].innerHTML = formErrObj['address2'];
                gstFormField[3].innerHTML = formErrObj['pincode'];
                gstFormField[4].innerHTML = formErrObj['city'];
                gstFormField[5].innerHTML = formErrObj['state'];
                gstFormField[6].innerHTML = formErrObj['country'];
                gstFormField[7].innerHTML = formErrObj['ugstnumber'];
                
                checkForMandatoryAndSubmitEnablement();
            }
            
            var fetchPinCodeData = (pincode) => {
                 var GSTFORM_PINCODEDATA = 'https://api.postalpincode.in/pincode/';
                 if (pincode && pincode.toString().length == 6 && pincode > 100000 && pincode <= 999999) {
                  var pinCodeURL = `${GSTFORM_PINCODEDATA}${pincode}`;
                  return makereq_get_header(pinCodeURL)
                    .then(function(innerres){
                      var res = innerres[0];
                      if (res) {
                        if (res.Status === "Error") {
                          
                          
                        } else {
                          var pincodeData = res.PostOffice[0];
                          console.log('pincodeData', pincodeData);
                          formObj['city'] = pincodeData.District;
                          formObj['state'] = pincodeData.State;
                          formObj['country'] = pincodeData.Country;
                          updateFormWithData();
                          checkForMandatoryAndSubmitEnablement();
                        }
                      } else {
                        
                      }
                    })
                    .catch(err => {
                      console.log(err)
                      
                    });
                }
            }
             var handleInputValidation = function(e){
                var $inputElem = $(e.target);
                var value = $inputElem[0].value.trim();
                if($inputElem[0].name === 'username'){
                    if(value.length<3 && e.type === 'focusout'){
                       formErrObj['username'] = value ? 'Invalid Name' : 'This field is mandatory' 
                    } else if(value && !isNormalString(value)){
                        formErrObj['username'] = 'only characters A-Z, a-z and space is permitted'
                    } else {
                        formErrObj['username'] = ''
                    } 
                }
                if($inputElem[0].name === 'address'){
                    if(value.length<3 && e.type === 'focusout'){
                       formErrObj['address'] =  value ? 'Invalid Address' : 'This field is mandatory' 
                    } else if(value && !isAddressString(value)){
                        formErrObj['address'] = 'Invalid Address (please avoid using special characters)'
                    } else {
                        formErrObj['address'] = ''
                    } 
                }
                if($inputElem[0].name === 'address2'){
                    if(value !== '' && !isAddressString(value)){
                        formErrObj['address2'] = 'Invalid Address (please avoid using special characters)'
                    } else {
                        formErrObj['address2'] = ''
                    } 
                }
                if($inputElem[0].name === 'pincode'){
                    const pincode = Number(value);
                    if(!value && e.type === 'focusout'){
                        formErrObj['pincode'] = 'This field is mandatory'
                    }else if (value && !(pincode.toString().length == 6 && pincode > 100000 && pincode <= 999999)) {
                      formErrObj['pincode'] = 'Invalid Pincode'
                    } else {
                        formErrObj['pincode'] = ''
                    }
                }
                if($inputElem[0].name === 'city'){
                    if(value.length<3 && e.type === 'focusout'){
                       formErrObj['city'] =  value ? 'Invalid City' : 'This field is mandatory' 
                    } else if(value && !isAddressString(value)){
                        formErrObj['city'] = 'Invalid City (please avoid using special characters)'
                    } else {
                        formErrObj['city'] = ''
                    } 
                }
                if($inputElem[0].name === 'state'){
                    if(value.length<3 && e.type === 'focusout'){
                       formErrObj['state'] =  value ? 'Invalid State' : 'This field is mandatory' 
                    } else if(value && !isAddressString(value)){
                        formErrObj['state'] = 'Invalid State (please avoid using special characters)'
                    } else {
                        formErrObj['state'] = ''
                    } 
                }
                if($inputElem[0].name === 'country'){
                    if(value.length<3 && e.type === 'focusout'){
                       formErrObj['country'] = value ? 'Invalid Country' : 'This field is mandatory' 
                    } else if(value && !isAddressString(value)){
                        formErrObj['country'] = 'Invalid Country (please avoid using special characters)'
                    } else {
                        formErrObj['country'] = ''
                    } 
                }
                if($inputElem[0].name === 'ugstnumber'){
                    if(value !== '' && !isAlphaNumaricStringWithoutSpace(value)){
                        formErrObj['ugstnumber'] = 'Invalid GST Identification Number'
                    } else {
                        formErrObj['ugstnumber'] = ''
                    } 
                }
                updateFormWithErrorData();
            }
            var handleInputChange = function(e){
                console.log("formObj", formObj);
                var $inputElem = $(e.target);
                formObj[$inputElem[0].name] = $inputElem[0].value;
                if($inputElem[0].name === 'pincode'){
                    fetchPinCodeData($inputElem[0].value);
                }
                handleInputValidation(e)
            }
            
            var handleInputClick = function(e){
                var $inputElem = $(e.target);
                $inputElem.closest('li').addClass('inputClicked');
            }
            
            var defaultGaOption = {
              cd38 : '',
              cd53 : '',
              GAtype: '',
              actEvt:''
            }
            
            var firedGaWithDimension = function(option = defaultGaOption){
                 // console.log("firedGaWithDimension userPrcData", userPrcData);
                  var GAObj = {
                    "GF_viewed": { "ea": "view" },
                    "GF_submit": { "ea": "submit" },
                    "GF_closeBtnClicked": { "ea": "crossclick" },
                    "GF_closeBtnViewed": { "ea": "crossview" },
                    "GF_reconsider": { "ea": "reconsider" },
                    "GF_reconsiderStart": { "ea": "reconsidertrue" },
                    "GF_reconsiderClosed": { "ea": "reconsiderskip" }
                  }
                
                  if (option.actEvt && GAObj[option.actEvt]) {
                    if (typeof window !== 'undefined') {
                      var cachedOrderId = getCachedOrderId();
                      ga('set', 'dimension50', cachedOrderId);
                      if (window.userPrcData) {
                       // console.log("userPrcData", userPrcData)
                        ga('set', 'dimension53', window.userPrcData.source);
                        var gaEl = `Ps-${window.userPrcData.planStatus}/${window.userPrcData.accessType}`;
                        ga(
                          'send',
                          'event',
                          'TOIPlus_Addressform',
                          `Address_update_form_${GAObj[option.actEvt].ea}`,
                          gaEl,
                        );
                       
                      }
                    }
                  }
                };
            console.log("formObj", formObj);
           
                var handleCloseButton = function(e){
                    e.stopPropagation();
                    e.preventDefault();
                    firedGaWithDimension({ actEvt: 'GF_closeBtnClicked' });
                    $('.gstform').addClass('hide');
                    $('.reconsider').removeClass('hide');
                    firedGaWithDimension({ actEvt: 'GF_reconsider' });
                }
                
                var gstFormRestartMandateHandler = function(e){
                    e.stopPropagation();
                    e.preventDefault();
                    // setShowGstMendateScreen(false)
                    $('.gstform').removeClass('hide');
                    $('.reconsider').addClass('hide');
                    firedGaWithDimension({ actEvt: 'GF_reconsiderStart' });
                }
                var gstFormSkipMandateHandler = function(e){
                    e.stopPropagation();
                    e.preventDefault();
                    sessionStorage.setItem("gstFormClosedByUser", "true");
                    firedGaWithDimension({ actEvt: 'GF_reconsiderClosed' });
                    $('#gst-add-form').hide();
                    $('body').removeClass('disable-scroll');
                }
                function getGstScreen (node){
            gstScreen +=  '<div id="toi-login">'
                        +       '<div class="gstform">'
                        +        '<h2>' + node.gstAddressForm.title + '<img src="https://static.toiimg.com/photo/' + node.gstAddressForm.labelimg + '.cms" alt="image" /></h2>'
                        +        '<p>' +  node.gstAddressForm.subTitle + '</p>'
                        +        '<div class="formcontainer">'
                        +           '<div class="closeBtn">'
                        +                '<a type="button" name="close" class="closeInput"></a>'
                        +           '</div>'
                        +           '<form class="gst-input-form">'
                        +                '<ul>'
                        +                    '<li>'
                        +                        '<label class="label">Enter your full name</label>'
                        +                        '<input class="inputValue" id="input_username" type="text" name="username" value="' + formObj.username + '"/>'
                        +                        '<span style="display: none"></span>'
                        +                    '</li>'
                        +                    '<li>'
                        +                        '<label class="label">Address line 1</label>'
                        +                        '<input class="inputValue" id="input_address" type="text" name="address" value="' + formObj.address + '"/>'
                        +                        '<span style="display: none"></span>'
                        +                    '</li>'
                        +                    '<li>'
                        +                        '<label class="label">Address line 2 (Optional)</label>'
                        +                        '<input class="inputValue" id="input_address2" type="text" name="address2" value="' + formObj.address2 + '"/>'
                        +                        '<span style="display: none"></span>'
                        +                    '</li>'
                        +                    '<li>'
                        +                        '<label class="label">Pincode</label>'
                        +                        '<input class="inputValue" id="input_pincode" type="text" name="pincode" value="' + formObj.pincode + '"/>'
                        +                        '<span style="display: none"></span>'
                        +                    '</li>'
                        +                    '<li>'
                        +                        '<label class="label">City</label>'
                        +                        '<input class="inputValue" id="input_city" type="text" name="city" value="' + formObj.city + '"/>'
                        +                        '<span style="display: none"></span>'
                        +                    '</li>'
                        +                    '<li>'
                        +                        '<label class="label">State</label>'
                        +                        '<input class="inputValue" id="input_state" type="text" name="state" value="' + formObj.state + '"/>'
                        +                        '<span style="display: none"></span>'
                        +                    '</li>'
                        +                    '<li>'
                        +                        '<label class="label">Country</label>'
                        +                        '<input class="inputValue" id="input_country" type="text" name="country" value="' + formObj.country + '"/>'
                        +                        '<span style="display: none"></span>'
                        +                    '</li>'
                        +                    '<li>'
                        +                        '<label class="label">GST Identification Number (Optional)</label>'
                        +                        '<input class="inputValue" id="input_ugstnumber" type="text" name="ugstnumber" value="' + formObj.ugstnumber + '"/>'
                        +                        '<span style="display: none"></span>'
                        +                   '</li>'
                        +                '</ul>'
                        +                '<div class="submitbtn">'
                        +                  '<input type="button" name="gstFormSubmit" class="gstSubmit disabled" value="' + node.gstAddressForm.ctaText + '" />'
                        +                '</div>'
                        +            '</form>'
                        +        '</div>'
                        +    '</div>'
                        +    '<div class="reconsider hide">'
                        +        '<div class="inner">'
                        +            '<div class="content">'
                        +              '<img src="https://static.toiimg.com/photo/' + node.gstFormReconsider.imageId + '.cms" alt="image" />'
                        +              '<h2 class="">' + node.gstFormReconsider.title + '</h2>'
                        +              '<p class="">' + node.gstFormReconsider.desc + '</p>'
                        +            '</div>'
                        +            '<span class="skipbtn">' + node.gstFormReconsider.skip + '</span>'
                        +            '<div class="reconsidersubmitbtn">'
                        +              '<input type="submit" value="' + node.gstFormReconsider.submit + '" />'
                        +            '</div>'
                        +         '</div>'
                        +   '</div>'
                        +   '</div>';
                        return gstScreen;
                }
            
            
            
            
            var handleGstSubmit = function(){
                if(!checkForMandatoryAndSubmitEnablement()){
                    return;
                }
                var postformData = {
                  "fullName": formObj.username,
                  "addressLine1": formObj.address,
                  "addressLine2": formObj.address2,
                  "pinCode":formObj.pincode,
                  "city" : formObj.city,
                  "state" : formObj.state,
                  "country" : formObj.country,
                  "gstIdentificationNumber": formObj.ugstnumber
                }   
                var params = {
                  "isWapView": false,
                  "rqtype": "POST",
                  "postData": postformData
                };
               fetchGSTFormData(params).then(function(response){
                if (response.status === 'SUCCESS' || response.status === 'GST_ADDRESS_ALREADY_UPDATED') {
                     require(['jquery','tiljs/event'],function($, event) {
                         event.publish("gst.submitted", {'test': 1});
                    });
                    if(window.userPrcData){
                        ga(
                          'send',
                          'event',
                          'Address_update_form_submit',
                          `TOIPlus_PlanPage_View`,
                          `Ps-${window.userPrcData.planStatus}/${window.userPrcData.accessType}`,
                        );
                    }
                    window.isGSTFormSubmit = true;
                    $('#gst-add-form').hide();
                    $('body').removeClass('disable-scroll');
                }
            }) 
            }
            
            
            
            cachedElements.formContainer
            .on('keyup', '.inputValue', handleInputChange)
            .on('focusout', '.inputValue', handleInputChange)
            .on('click focus', '.inputValue', handleInputClick)
            .on('click', '.gstSubmit', handleGstSubmit)
            .on('click', '.closeBtn', handleCloseButton)
            .on('click', '.reconsidersubmitbtn', gstFormRestartMandateHandler)
            .on('click', '.skipbtn', gstFormSkipMandateHandler)
            
             require(['jquery','tiljs/event'],function($, event) {
                event.subscribe("gst.form",function(obj) {
                    window.userPrcData = obj.prcData;
                    gstScreen = getGstScreen(obj.nudgeData);
                    var gstFormClosedByUser = sessionStorage && sessionStorage.getItem("gstFormClosedByUser");
                    if (!(gstFormClosedByUser && gstFormClosedByUser.toLowerCase() == 'true')) {
                        console.log('obj', obj);
                        
                        $('#gst-add-form').addClass('active');
                        $('body').addClass('disable-scroll');
                        $('#gst-add-form').html(gstScreen);
                
                        var params = {
                          "isWapView": false,
                          "rqtype": "GET",
                          "postData": null
                        };
                        firedGaWithDimension({ actEvt: 'GF_viewed' });
                        fetchGSTFormData(params).then(function(response){
                            if (response && response.data && Object.keys(response.data).length && response.data.address) {
                                var gstData = response.data.address;
                                formObj.username = gstData.fullName;
                                formObj.address = gstData.addressLine1;
                                formObj.address2 = gstData.addressLine2;
                                formObj.pincode = gstData.pinCode;
                                formObj.city = gstData.city;
                                formObj.state = gstData.state;
                                formObj.country = gstData.country;
                                formObj.ugstnumber = gstData.gstIdentificationNumber;
                                updateFormWithData();
                                checkForMandatoryAndSubmitEnablement();
                            }
                        })
                    }else{
                        firedGaWithDimension({ actEvt: 'GF_closeBtnViewed' });
                    }
               });
            });
        })();


    /* To integrate login please do the following:
     * 1. Fork toiusermanagement_js and usermanagementcss and include it in your project
     * 2. Add below JS files in your project. These files should be added globally
     *  a) <script type="text/javascript" src="https://jssocdn.indiatimes.com/crosswalk/jsso_crosswalk_legacy_0.2.4.min.js"></script>
     *  b) <script src="https://www.google.com/recaptcha/api.js" async="true" defer="true"></script>
     * 3. Update GA events category in the toiusermanagement_js as per your project needs
     * 4. Update usermanagementcss file to change skin of Login modal
    */
	define('tiljs/apps/times/mobilelogin',[
        "../../util",
        "module",
        "../../page",
        "../../ajax",
        "../times/api",
        "../../is",
        "../../cookie",
        "../../ui",
        "../../logger",
        "../../event",
        "../../load",
        "../../localstorage",
        "../../user",
        "../../analytics/mytimes",
        "primeuserhandler",
        "tiljs/apps/times/usermanagement"
    ], 
    function(util, module, page, ajax, api, is, cookie, ui, logger, event, load, localstorage, user, mytimes, puser, mod_login){
	    
	    var mod_mobilelogin = {};
	    var config = {
	        resendTimeInSec: 60,
	        headingText:'Log in to your account',
	        completeprofile:'COMPLETE </br>YOUR PROFILE',
	        bottomText:''
	    };
	    var config_default = {
	        headingText:'Log in to your account',
	        bottomText:'',

	    };
	    
	    config.primemessages={headingText:'START YOUR </br>FREE TRIAL',bottomText:'Enjoy exclusive articles </br>& premium benefits from'}
	    config.adfreeprimemessages={headingText:'START </br>AD-FREE TRIAL',bottomText:'Enjoy an ad-free experience </br>& premium benefits from'}
	    config.verifymobile={headingText:'VERIFY MOBILE </br>TO SUBSCRIBE',bottomText:''}
	    config.subscribe={headingText:'LOGIN </br>TO SUBSCRIBE',bottomText:''}
	    var errorConfig = {
	        wrongOtp: 'Please Enter a valid OTP',
	        limitExceeded:'Maximum number of attempts to generate otp is exceeded. Please try again later.'
	    }
	    
	    var cachedElements = {
            loginPopup: $('#login-popup'),
            formContainer: $('#user-sign-in'),
            mobileLoginFormContainer: $('#mobile-login'),
            closeBtn: $('#login-popup .close-btn')
        }
        
        var loginCallback = null;
        var updateMobileCallback = null;
        var resendTimeInterval;
        
        var fireGAEvent = function(_action, _label) {
            require(["pgtrack"], function(pgtrack) {
            	pgtrack.track('#' + _label + '~' + _action);
            });
        };
        
        mod_mobilelogin.loginWithOTP = function(e, isRegenerate) {
            // Do not perform any action if generate otp is disabled
            // if($('#sso-generate-otp').hasClass('disabled')) {
            //     return;
            // }
            
            var $emailId = $('#toi-login input[name="emailId"]');
            var $errorElem = $('#sso-otpLoginDiv');
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                inputVal = $('#toi-login input[name="emailId"]').val();
            
            inputVal = mod_login.getValidMobileNumber(inputVal);
            // fnCall = (loginType === 'email'? jssoObj.getEmailLoginOtp: jssoObj.getMobileLoginOtp);
            mod_login.showLoader();
            if (!!config.updateMobileFlow) {
                mod_mobilelogin.updateUserMobile(inputVal, mod_mobilelogin.updateUserMobileCallback(isRegenerate, $errorElem));
            }
            else if (mod_login.getScreenName() === 'Register_New_User') {
                jssoObj.resendMobileSignUpOtp(inputVal, mod_login.ssoid, mod_mobilelogin.handleLoginOTPCallback(isRegenerate, $errorElem));
                mod_mobilelogin.showstate('.verifymobilenewuser');
            } else {
                jssoObj.getMobileLoginOtp(inputVal, mod_mobilelogin.handleLoginOTPCallback(isRegenerate, $errorElem));
                mod_mobilelogin.showstate('.verifymobile');
            }
            // fnCall.call(jssoObj, inputVal, mod_login.handleLoginOTPCallback(isRegenerate));
            if(isRegenerate) {
                if(mod_login.getGa()!=""){
                 mod_login.fireGAEventMetered('Login_screen_OTPScreen_OTPResend','MobNo_OTP_Entry' + '/'+mod_login.getGa());
                }
                else
                { 
                    mod_login.fireGAEvent( mod_login.getPageName() + '_Re_OTP');
                }
            } else {
                mod_login.fireGAEvent(mod_login.getPageName() + '_OTP_Submit');   
            }
        };
        
        // Duplicate method in case any message needed for regenerate OTP logic        
        mod_mobilelogin.regenerateLoginOTP = function() {
            // Do not perform any action if regenerate otp is disabled
            if($('#sso-regenerate-otp').hasClass('disabled')) {
                return;
            }
            mod_mobilelogin.loginWithOTP({}, true);
        };
        
        mod_mobilelogin.handleLoginOTPCallback = function(isRegenerate, $errorElement) {
            return function (response) {
                mod_login.hideLoader();
                // var $errorElement = $('#toi-login li.password:visible');
                mod_login.handleError($errorElement);
                if(response && response.code === 200) {
                    $('#regenerate-otp-container').show();
                    mod_mobilelogin.startResendOtpInterval();
                    var loginType = mod_login.getLoginType();
                    var inputVal = $('#toi-login input[name="emailId"]').val();
                    inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
                    $('#sso-pwdDiv').hide();
                    $('#sso-otpLoginDiv, #sso-login-otp-msg').show();
                    $('#sso-mobile-input, .sso-signin-form-data, #sso-regenerate-otp, #sso-otpLoginDiv .errorMsg').hide();
                    $('#sso-otpLoginDiv, #sso-send-otp-screen').show();
                    $('#changeEmailIdDiv').css('display', 'inline-block');
                    // $('#sso-login-otp-msg > p').text('We have sent a 6 digit verification code ' + (loginType === 'email'? 'to ': 'on +91-') + inputVal);
                    if(isRegenerate) {
                        $('#toi-login input[name="otplogin"]').val('');
                        $('#toi-login .otpCodeInput').val('');
                        // $('#sso-otpLoginDiv .successMsg').text('OTP has been successfully sent.').show();
                    }
                } else {
                    $('#sso-otpLoginDiv .successMsg').hide();
                    switch(response.code) {
                        case 416:
                            mod_login.handleError($errorElement, errorConfig.limitExceeded);
                            // Disable Regenerate OTP button and remove text message specifying OTP has been sent
                            $('#sso-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').addClass('disabled');
                            $('#sso-mobile-input > p #changeEmailIdDivSignUpOtp').show();
                            break;
                        case 503:
                            mod_login.handleError($errorElement, errorConfig.connectionError);
                            break;
                        default:
                            mod_login.handleError($errorElement, errorConfig.serverError);
                        
                    }
                    
                    mod_login.fireGAEvent('API_Error_' + response.code);
                }
            }
        };
        
        /**
         * API callback of checkUserExists
         *
         * @param response - Response object
         * @param 
         */
        mod_mobilelogin.checkUserExists = function(response) {
            mod_login.hideLoader();
            var $errorElement = $('#toi-login li.mobile');
            var $emailId = $('#toi-login input[name="emailId"]');
            var errorMsg = '', userName = '';
            var loginType = mod_login.getLoginType();
            var $signInBtn = $('#sso-signInButtonDiv');
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                inputVal = $('#toi-login input[name="emailId"]').val();

            inputVal = (loginType === 'email'? mod_login.getValidEmailId(inputVal): mod_login.getValidMobileNumber(inputVal));
            mod_login.handleError($errorElement);
            $('#sso-send-otp-screen span').text(inputVal);
            if(response && response.code === 200 && response.data) {
                if(response.data.statusCode === 212 || response.data.statusCode === 213) {
                    if(typeof jssoObj.getMobileLoginOtp === 'function') {
                        mod_login.showLoader();
                        mod_mobilelogin.showstate('.verifymobile');
                        $('.toi-user-login #sso-signInButtonDiv [type="submit"]').removeClass("arrow-btn").addClass("user-submit-btn").text("Submit")
                        
                        jssoObj.getMobileLoginOtp(inputVal, mod_mobilelogin.handleLoginOTPCallback(false, $errorElement));
                         if(mod_login.getGa()!=""){
                           mod_login.fireGAEventMetered('Login_screen_OTPScreen_view','MobNo_OTP_Entry' + '/'+mod_login.getGa())
                         }
                         else
                         {
                          mod_login.fireGAEvent(mod_login.getPageName() + '_OTP_Submit');
                         }
                    }
                    if(response.data.termsAccepted !== '1' || response.data.shareDataAllowed !== '1'){
                        $signInBtn.find('input[type="submit"]').attr('disabled', 'disabled');
                        // show and handle consent checkboxes
                        $(mod_login.getConsentHTML()).insertBefore($signInBtn);
                        // to handle both fb and google buttons in single line when checkboxes are visible
                        $('#user-sign-in').addClass('extra-content');
                    }
                } else if(response.data.statusCode === 205 || response.data.statusCode === 206 || response.data.statusCode === 214 || response.data.statusCode === 215) {
                    mod_login.setScreenName('Register_New_User');
                    mod_mobilelogin.showstate('.verifymobilenewuser');
                    $('#sso-register-form input[name="emailId"]').val(inputVal);
                    mod_mobilelogin.showRegisterView();
                    
                } else {
                    $emailId.prop('disabled', false);
                    errorMsg = response.data.statusCode === 216 ? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidEmail;
                    mod_login.handleError($errorElement, errorMsg);
                }
            } else {
                $emailId.prop('disabled', false);
                if(response.code === 410) {
                    mod_login.handleError($errorElement, (loginType === 'email'? errorConfig.fpInvalidEmailOnly: errorConfig.fpInvalidMobileOnly));
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_mobilelogin.otpNotSucceedHandling = function (response) {
            var $errorElement = $('#sso-otpLoginDiv');
            $('.successMsg').hide();
            switch(response.code) {
                case 414:
                    mod_login.handleError($errorElement, errorConfig.wrongOtp);
                    break;
                case 415:
                    mod_login.handleError($errorElement, errorConfig.expiredOTP);
                    break;
                case 416:
                    mod_login.handleError($errorElement, errorConfig.limitExceeded);
                    break;
                case 503:
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                    break;
                default:
                    mod_login.handleError($errorElement, errorConfig.wrongOtp );
                    
            }
            mod_login.fireGAEvent('API_Error_' + response.code);
        };
      
        mod_mobilelogin.handleLoginCallback = function (response) {
            mod_login.hideLoader();
            if(response && response.code === 200) {
                mod_login.closeBtnHandler();
                mod_login.isLoggedIn(mod_login.getLoginCallback());
                if(mod_login.getGa()!=""){
                    sessionStorage.setItem('meteredLoginSuccess', 1);
                }
                else
                {
                    mod_login.fireGAEvent('Login_Success_' + mod_login.getPageName());
                }
                
                if (resendTimeInterval) {
                    clearInterval(resendTimeInterval);
                }
            } else {
                mod_mobilelogin.otpNotSucceedHandling(response);
            }
        };
        
        mod_mobilelogin.handleEmailIdClick = function (e) {
            e.preventDefault();
            var $otp = $('#sso-otpLoginDiv');
            var $emailId = $('#toi-login input[name="emailId"]');
            var password = '';
            var $errorMsgElem = $('#toi-login li.password:visible .errorMsg');
            var _checkIsOTP;
            $emailId.prop('disabled', true);
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj(),
                loginType = mod_login.getLoginType(),
                inputVal = $('#toi-login input[name="emailId"]').val(),
                fnCall, $form, checkboxLen = 0;
            
            inputVal = mod_login.getValidMobileNumber(inputVal);
            
            if($otp.is(':visible')) {
                // fnCall = (mod_login.getScreenName() === 'Register_New_User'? jssoObj.verifyMobileSignUp: jssoObj.verifyMobileLogin);
                $('input.otpCodeInput').each(function(index, value) {
                    password += $(value).val().toString();
                });
                
                _checkIsOTP = mod_mobilelogin.checkIsOTP(password);
                // password = $otp.val();
                  if(mod_login.getGa()!=""){
                      mod_login.fireGAEventMetered('Login_screen_OTPScreen_Verify_OTP','MobNo_OTP_Entry/'+mod_login.getGa())
                      }
                    else
                    {
                      mod_login.fireGAEvent(mod_login.getPageName() + '_OTP_Entry');
                    }
                 
                if(!_checkIsOTP) {
                    $errorMsgElem.html(errorConfig.emptyPassword).show();
                    return;
                } else {
                    if(config.updateMobileFlow){
                        mod_mobilelogin.verifyUserMobile(inputVal, password, mod_mobilelogin.verifyUserMobileCallback);
                    }
                    else{
                        $form = $('#sso-login-form');
                        var checkboxLen = $form.find('.js-contentCB').length;
                        if (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($form)) {
                            return;
                        }
                        $('.errorMsg').html('').hide();
                        mod_login.showLoader();
                        if (mod_login.getScreenName() === 'Register_New_User') {
                            jssoObj.verifyMobileSignUp(inputVal, mod_login.ssoid, password, mod_mobilelogin.handleLoginCallback);
                            mod_mobilelogin.showstate('.ftanew');
                        } else {
                            mod_mobilelogin.showstate('.fta');
                            $form = $('#sso-login-form');
                            checkboxLen = $form.find('.js-contentCB').length;
                            if (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($form)) {
                                return;
                            }
                            
                            if(checkboxLen > 0){
                                jssoObj.verifyMobileLoginGdpr(inputVal, password, '1', '1', mod_login.getTimespointValue(), mod_mobilelogin.handleLoginCallback);
                            } else {
                                jssoObj.verifyMobileLogin(inputVal, password, mod_mobilelogin.handleLoginCallback);   
                            }
                        }
                        // fnCall.call(jssoObj, inputVal, password, mod_login.handleLoginCallback);    
                    }
                }
            } else {
                if(!!config.updateMobileFlow){
                    var $errorElement = $('#sso-mobile-input');
                    mod_mobilelogin.updateUserMobile(inputVal, mod_mobilelogin.updateUserMobileCallback(false, $errorElement));
                }
                else if(typeof jssoObj.checkUserExists === 'function') {
                    mod_login.showLoader();
                    jssoObj.checkUserExists(inputVal, mod_mobilelogin.checkUserExists);
                    mod_login.setPageName(loginType);
                     if(mod_login.getGa()!=""){
                        mod_login.fireGAEventMetered('Login_screen_Mobile_Submit','Mobno_Continue/'+mod_login.getGa())
                    }
                    else
                    {
                       mod_login.fireGAEvent(mod_login.getPageName() + '_Continue');
                    }
                } else {
                    $emailId.prop('disabled', false);
                }
            }
        };
        
        mod_mobilelogin.handleEmailIdKeyPress = function(e) {
            var $this = $(this);
            var keyCode = mod_mobilelogin.getKeyCode(e);
            
            if (keyCode === 13) {
                return true;
            }
            
            if((keyCode === 8) || !mod_mobilelogin.allowNumber(e)){
                return false;
            }    
        }
        
        mod_mobilelogin.changeRegisterMobileHandler = function(e) {
            e.stopPropagation();
            $('#sso-login-form, #sso-signin-form').show();
            $('#sso-register-form').hide();
            mod_mobilelogin.changeEmailIdHandler(e);
        };
        mod_mobilelogin.changeRegisterMobileHandlerOtp = function(e) {
            e.stopPropagation();
            $('#sso-mobile-input > p #changeEmailIdDivSignUpOtp').hide();
            mod_mobilelogin.changeEmailIdHandler(e);
        };
        
        /**
         * Handles Change Email/Mobile link click
         *
         * @param
         * @param 
         */
        mod_mobilelogin.changeEmailIdHandler = function (e) {
            $('#sso-pwdDiv, #changeEmailIdDiv, #sso-otpLoginDiv, #sso-login-otp-msg, #sso-send-otp-screen, #regenerate-otp-container, #sso-regenerate-otp').hide();
            $('#sso-mobile-input, .sso-signin-form-data').show();
            $('#toi-login input[name="emailId"]').prop('disabled', false).val('');
            $('#sso-signInButtonDiv [type="submit"]').prop('disabled', true).addClass('disabled');
            $('.errorMsg, .successMsg').hide();
            $('.error').removeClass('error');
            // $('#sso-signInButtonDiv > input').val('Continue');
            $('#sso-pwdDiv input[name="password"]').val('');
            $('#sso-otpLoginDiv input[type="password"]').val('');
            $('#sso-regenerate-otp, #sso-fp-regenerate-otp, #sso-verify-regenerate-otp, #sso-generate-otp, #sso-forgot-pass').removeClass('disabled');
            mod_login.fireGAEvent(mod_login.getPageName() + '_Change');
            mod_login.setScreenName('Login_Screen');
            mod_mobilelogin.showstate('.startscreen');
            $('#sso-signInButtonDiv [type="submit"]').removeClass("user-submit-btn").addClass("arrow-btn").text("")
            clearInterval(resendTimeInterval);
            mod_login.ssoid = '';
            $('#toi-login .otpCodeInput').val('');
            if($("#sso-signin-form").find(".checkbox").length > 0){
                $("#sso-signin-form").find(".checkbox").remove()
            }
        };
        
        mod_mobilelogin.allowNumber = function(event) {
            var keyCode = mod_mobilelogin.getKeyCode(event);
            if (event.target.value.length >= 10 || 
                $.inArray(keyCode, [0, 32]) > -1 || 
                (keyCode != 8 && isNaN(String.fromCharCode(keyCode)))) {
                event.preventDefault(); //stop character from entering input
                return false;
            }
            return true;
        };
        
        mod_mobilelogin.getKeyCode = function (event) {
            var keyCode = event.keyCode || event.which;
            if (keyCode == 0 || keyCode == 229) { //for android chrome keycode fix
                var value = event.target.value;
                keyCode = value.charCodeAt(value.length - 1);
            }
            return keyCode;
        }
        
        mod_mobilelogin.showConsentPopUp = function(){
            var popUpHtml = '<div class="userConsentPopUp">'
                          +     '<div class="consentHeader">'
                          +         '<h2>Welcome Back to THE TIMES OF INDIA</h2>'
                          +         '<span class="closeBtn">+</span>'
                          +     '</div>'
                          +     '<div class="consentDescription">'
                          +         '<p><strong>One Last Step!</strong></p>'
                          +         '<p>We tailor your experience and understand how you and other visitors use this website by using cookies and other technologies. This means we are able to keep this site free-of-charge to use.</p>'
                          +         '<p>Please provide consent for the following scenarios so that we can ensure an enjoyable experience for you on our websites and mobile apps.</p>'
                          +     '</div>'
                          +     '<ul class="consentItemsList">'
                          +         mod_login.getConsentHTML()
                          +     '</ul>'
                          +     '<div class="btn-container">'
                          +         '<input id="consentAcceptButton" type="button" value="AGREE" ' + (__isEUUser? 'disabled="disabled"': '') + '/>'
                          +     '</div>'
                          + '</div>';
            
            isUserCloseActionForConsentOverlay = true;
            
            TimesApps.overlayModule.create({
                id : 'userConsentPopUp',
                isFullscreen : true,
                html : popUpHtml,
                classString: 'login-consent',
                _onRenderCb: function(){
                    //bind events
                    //checkbx change
                    $('#vcw').off('change', 'input.js-contentCB').on('change', 'input.js-contentCB', mod_mobilelogin.handleConsentChange);
                    //accept btn click
                    $('#consentAcceptButton').off('click').on('click', mod_login.consentPopUpAceeptBtnHandler);
                    $('#vcw .consentHeader .closeBtn').off('click').on('click', function() {
                        if(isUserCloseActionForConsentOverlay){
                            mod_login.logout();
                            TimesApps.overlayModule.close();
                        }
                    });
                    //handle overlay closed by user
                    require(["tiljs/event"], function(eventBus){
                        eventBus.subscribe("overlayClosed", function(overlay){
                            if(overlay.id === 'userConsentPopUp' && isUserCloseActionForConsentOverlay){
                                mod_login.logout();
                            }
                        });
                    });
                }
            })  
        };
        
        //This is to handle enter valid OTP keys
        mod_mobilelogin.handleOTPCodeKeyPress = function(event) {
            var $this = $(this);
            var input_flds = $this.closest('form').find('input.otpCodeInput');
            var index = input_flds.index(this);
            var keyCode = mod_mobilelogin.getKeyCode(event);
            
            if((keyCode == 8) || !mod_mobilelogin.allowNumber(event)){
                return;
            }
            else if($this.val().length >= 1) {
                input_flds.eq(input_flds.index(this) + 1).focus();
            } else{
                input_flds.eq(input_flds.index(this) + 1).focus();
            }
        };
        
        mod_mobilelogin.handleUsernameKeyUp = function(e) {
            var $this = $(this);
            var $submit = $('#sso-registerButtonDiv [type="submit"]');
            var agreed = $('#sso-register-form input[name="agree"]').prop('checked');
            var sharedDataAgreed = $('#sso-register-form input[name="sharedDataAllowed"]').prop('checked');
            
            if (mod_login.checkAndSetFullNameError($this, $this.closest('li')) && agreed && sharedDataAgreed) {
                $submit.prop('disabled', false).removeClass('disabled');
            } else {
                $submit.prop('disabled', true).addClass('disabled');
            }
        };
        
        mod_mobilelogin.handleUsernameKeyPress = function(e) {
            var $this = $(this);
            var keyCode = mod_mobilelogin.getKeyCode(e);
            
            if (keyCode === 13) {
                return true;
            }
            
            if((keyCode === 8) || !((keyCode >= 65 && keyCode <= 90) || (keyCode >= 97 && keyCode <= 122) || keyCode === 32)){
                return false;
            }
        };
        
        /**
         * Shows login screen when user clicks change email on Register page
         *
         * @param
         * @param 
         */
        /* mod_login.changeRegisterEmailIdHandler = function (e) {
            mod_login.showLoginScreen();
            mod_login.fireGAEvent( mod_login.getPageName() + '_Change');
        }; */
        
        mod_mobilelogin.handleTnCCheckbox = function(e) {
            var $this = $(this);
            var $submit = $('#sso-registerButtonDiv [type="submit"]');
            var $fullname = $('#sso-register-form input[name="fullname"]');
            var sharedDataAllowed = $('#sso-register-form input[name="sharedDataAllowed"]').is(':checked')? '1': '0';
            
            if (sharedDataAllowed === '1' && mod_login.checkAndSetAgreeTnCError($this, $this.closest('li')) && mod_login.checkAndSetFullNameError($fullname, $fullname.closest('li'))) {
                $submit.prop('disabled', false).removeClass('disabled');
            } else {
                $submit.prop('disabled', true).addClass('disabled');
            }
        };
        
        mod_login.registerOnlyMobile = function(response) {
            mod_login.hideLoader();
            var $emailId = $('#toi-login input[name="emailId"]');
            var $errorElement = $('#toi-login li.user-name');
            if(response && response.code === 200 && response.data && response.data.ssoid) {
                $('#sso-mobile-input, .sso-signin-form-data').hide();
                $('#sso-otpLoginDiv, #sso-send-otp-screen').show();
                 if(mod_login.getGa()!=""){
                     mod_login.fireGAEventMetered('Login_screen_OTPScreen_view','MobNo_OTP_Entry' + '/'+mod_login.getGa())
                 }
                $('#changeEmailIdDiv').css('display', 'inline-block');
                mod_login.ssoid = response.data.ssoid;
                mod_mobilelogin.startResendOtpInterval();
                $('#sso-signin-form').show();
                $('#regenerate-otp-container').show();
                $('#sso-register-form').hide();
                $('#sso-signInButtonDiv [type="submit"]').removeClass("arrow-btn").addClass("user-submit-btn").text("Submit")
                mod_mobilelogin.showstate('.verifymobilenewuser');
                
            } else {
                $emailId.prop('disabled', false);
                if(response.code === 429) {
                    mod_login.handleError($errorElement, errorConfig.userAlreadyRegistered);
                } else if (response.code === 416) {
                    mod_login.handleError($errorElement, errorConfig.limitExceeded);
                } else if(response.code === 503) {
                    mod_login.handleError($errorElement, errorConfig.connectionError);
                } else {
                    mod_login.handleError($errorElement, errorConfig.serverError);
                }
                
                mod_login.fireGAEvent('API_Error_' + response.code);
            }
        };
        
        mod_mobilelogin.showRegisterView = function() {
          $('#sso-signin-form').hide();
          $('#sso-register-form').show();
          mod_mobilelogin.showstate('.completeyourprofile');
          $(".toi-user-login .times-prime-benefits").hide()
          $(".toi-user-login .sso-signin-form-data").html(config.completeprofile);
          $(".toi-user-login #sso-mobile-input-filled").hide();
          if(mod_login.getGa()!=""){
               mod_login.fireGAEventMetered('Login_screen_Register_New_User_View','Register_New_User' + '/'+mod_login.getGa());
          }
        };
        
        mod_mobilelogin.handleRegisterBtnClick = function(e) {
            e.stopPropagation();
            e.preventDefault();
            var $register = $('#sso-register-form');
            var $fullname = $register.find('input[name="fullname"]');
            var fullname = $fullname.val();
            var username = mod_login.getFirstAndLastName(fullname);
            var $agree = $register.find('input[name="agree"]');
            var agree = $agree.is(':checked');
            var sharedDataAllowed = $register.find('input[name="sharedDataAllowed"]').is(':checked')? '1': '0';
            var areMandatoryFieldsSelected = mod_login.areMandatoryFieldsSelected($register);
            var isValidForm = mod_login.checkAndSetAgreeTnCError($agree, $agree.closest('li')) && mod_login.checkAndSetFullNameError($fullname, $fullname.closest('li')) && sharedDataAllowed === '1';
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            var inputVal = $('#toi-login input[name="emailId"]').val();
            var isGDPRSpecific = $register.find('input.js-contentCB').length > 0;
            if(isValidForm && typeof jssoObj.registerOnlyMobile === 'function') {
                mod_login.showLoader();
                jssoObj.registerOnlyMobile(username.firstName, username.lastName, '', inputVal, '1', '1', mod_login.getTimespointValue(), mod_login.registerOnlyMobile);
                mod_login.setPageName('mobile');
                if(mod_login.getGa()!=""){
                    mod_login.fireGAEventMetered('Login_screen_Register_New_User_SubmitProfile','Register_New_User' + '/'+mod_login.getGa())
                }
                else
                {
                    mod_login.fireGAEvent(mod_login.getPageName() + '_Continue');
                }
                
            } 
        };
        
        mod_mobilelogin.checkIsOTP = function(otpCode){
            return (!isNaN(otpCode) && otpCode.length == 6);
        };
        
        //This is handle back space functionality
        mod_mobilelogin.handleOTPCodeKeyUp = function(event) {
            var newValue = "";
            var $this = $(this);
            var input_flds = $this.closest('form').find('input.otpCodeInput');
            var index = input_flds.index(this);
            var keyCode = mod_mobilelogin.getKeyCode(event);
            
            
            if(keyCode == 8) {
                  if(index > 0){
                    input_flds.eq(input_flds.index(this) - 1).focus();
                }
            }
            setTimeout(function(event) {
                $('input.otpCodeInput').each(function(index, value) {
                    newValue += $(value).val().toString();
                });
                var enableVerify = true,
                    _checkIsOTP = mod_mobilelogin.checkIsOTP(newValue),
                    $sso_verifyotp_submit_btn = $('#sso-signInButtonDiv [type="submit"]');
                
                var $form = $this.closest('form');
                var checkboxLen = $form.find('.js-contentCB').length;
                if (!_checkIsOTP || (checkboxLen > 0 && !mod_login.areMandatoryFieldsSelected($form))) {
                    enableVerify = false;
                }
                $sso_verifyotp_submit_btn.prop("disabled", !enableVerify);
                if (enableVerify) {
                    $sso_verifyotp_submit_btn.removeClass("disabled");
                } else {
                    $sso_verifyotp_submit_btn.addClass("disabled");
                }
            }, 0);
        };
        
        mod_mobilelogin.startResendOtpInterval = function() {
            var currentTime = config.resendTimeInSec;
            var regenerateTimer = $('#regenerate-timer span');
            clearInterval(resendTimeInterval);
            regenerateTimer.text(config.resendTimeInSec);
            $('#regenerate-timer').show();
            resendTimeInterval = setInterval(function() {
                currentTime -= 1;
                regenerateTimer.text(currentTime);
                if (currentTime <= 0) {
                    clearInterval(resendTimeInterval);
                    $('#sso-regenerate-otp').show();
                    $('#regenerate-timer').hide();
                }
            }, 1000);
        };
        
        mod_mobilelogin.updateConfig = function (init_config) {
            if (init_config) {
                config = util.extend(true, {}, config, init_config);
            }
        };
        
	    mod_mobilelogin.setConfig = function(){
	        mod_mobilelogin.updateConfig(mod_login.getConfig());
	        //mod_login.updateConfig(mod_login.getConfig());
	    };
	    
	    mod_mobilelogin.updateErrorConfig = function (init_config) {
            if (init_config) {
                errorConfig = util.extend(true, {}, errorConfig, init_config);
            }
        };
        
	    mod_mobilelogin.setErrorConfig = function(){
	        mod_mobilelogin.updateErrorConfig(mod_login.getErrorConfig());
	    };
	    
	    mod_mobilelogin.getValidLoggedInUser = function(callback) {
	        var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
	        if(typeof jssoObj.getValidLoggedInUser === 'function'){
	            jssoObj.getValidLoggedInUser(callback);    
	        }
        };
        
        mod_mobilelogin.verifyUserMobile = function(mobileNumber, otpCode, callback) {
	        var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
	        if (typeof jssoObj.verifyMobile === "function") {
                mod_login.showLoader();
                jssoObj.verifyMobile(mobileNumber, otpCode, callback);
            } else {
                //Close verify flow and show try later message
            }
        };
        
        mod_mobilelogin.verifyUserMobileCallback = function (response) {
            mod_login.hideLoader();
            if(response && response.code === 200) {
                if (resendTimeInterval) {
                    clearInterval(resendTimeInterval);
                }
            } else {
                mod_mobilelogin.otpNotSucceedHandling(response);
            }
            //this callback would trgigger flow, if response id 200 otherwise trigger GA.
            if(typeof updateMobileCallback === 'function'){
                updateMobileCallback(response);    
            }
        };
        
        mod_mobilelogin.updateUserMobile = function (mobileNumber, callback) {
            var jssoObj = mod_login.setAndGetJssoCrosswalkObj();
            if(typeof jssoObj.updateMobile === 'function'){
                mod_login.showLoader();
                //mod_mobilelogin.getValidLoggedInUser(function(){
                    jssoObj.updateMobile(mobileNumber, function(response){
                        mod_login.hideLoader();
                        if(typeof callback === 'function'){
                            callback(response);    
                        }
                    });        
                //});
            }
        };
        
        mod_mobilelogin.updateUserMobileCallback = function (isRegenerate, $errorElem) {
            return function (response) {
                mod_login.hideLoader();
                var _isRegenerate = isRegenerate || false;
                var fnCall = mod_mobilelogin.handleLoginOTPCallback(_isRegenerate, $errorElem);
                switch (response.code) {
                    case 200:
                        if(!isRegenerate){
                            fireGAEvent('prime-login_blocker|mobile_submit', 'success');    
                        }
                        mod_mobilelogin.showstate('.verifymobile');
                        $('.toi-user-login #sso-signInButtonDiv [type="submit"]').removeClass("arrow-btn").addClass("user-submit-btn").text("Submit");
                        fnCall(response);
                        break;
                    case 433:
                        /* user is already verified with mobile no*/
                        if(typeof updateMobileCallback === 'function'){
                            updateMobileCallback(response);    
                        }
                        break;
                    default:
                        if(!isRegenerate){
                            fireGAEvent('prime-login_blocker|mobile_submit', 'failure-'+ response.message);
                        }
                        fnCall(response);
                }
            };
        };
        
	    mod_mobilelogin.attachMobileToLoggedInUser = function (callback, flowObj, e, dataObj) {
	        var isLoggedInUser = mod_login.getUser();
	        if(isLoggedInUser){
	            updateMobileCallback = callback;
	            config.updateMobileFlow = true;
	            mod_mobilelogin.loginScreenCaller(null, flowObj, e, dataObj);    
	        }
        };
        
	    mod_mobilelogin.login = function (callback, action, flowObj, e, dataObj) {
	        //we have set config.action in case of update mobile
	        config.updateMobileFlow = false;
	        mod_mobilelogin.loginScreenCaller(callback, flowObj, e, dataObj);
        };
        
        mod_mobilelogin.loginScreenCaller = function (callback, flowObj, e, dataObj) {
            TimesApps.checkGdprAndCall(function() {
                mod_mobilelogin.showLoginScreen(callback, e, flowObj, dataObj);
                cachedElements.loginPopup.addClass('active');
                if(mod_login.getGa()!=""){mod_login.fireGAEventMetered('Login_screen_View','Mobno_Continue' + '/'+mod_login.getGa());}
            }, mod_login.logout);
        };
        
        mod_mobilelogin.handleConsentChange = function(e){
            var $clickedCB = $(this),
                clickedCBID = $clickedCB.attr('id'),
                $consentCBs = $clickedCB.closest('ul').find('.js-contentCB'),
                mandatoryCBIds = ['sharedDataAllowed', 'agree'],
                mandatoriesCheckedCount = 0;
                
            $.each($consentCBs, function(){
                var $cb = $(this),
                    cbID = $cb.attr('id');
                
                if(mandatoryCBIds.indexOf(cbID) > -1 && $cb.is(':checked')){
                    mandatoriesCheckedCount++;
                }
            });
            
            // mandatory consent items are checked
            if(mandatoryCBIds.length === mandatoriesCheckedCount){
                // enable buttons
                // $('#sso-registerBtn').removeAttr('disabled');
                $('#sso-signInButtonDiv [type="submit"]').removeAttr('disabled').removeClass("disabled");
                $('#consentAcceptButton').removeAttr('disabled');
            }
            // mandatory consent items are NOT checked
            else{
                // disable buttons
                // $('#sso-registerBtn').attr('disabled', 'disabled');
                $('#sso-signInButtonDiv [type="submit"]').attr('disabled', 'disabled').addClass("disabled");
                $('#consentAcceptButton').attr('disabled', 'disabled');
            }
        }
	    
	    mod_mobilelogin.showLoginScreen = function(callback, e, flowObj, dataObj){
	        var dataObj = dataObj || {};
	        dataObj.isMobileLogin = true;
	        mod_login.showLoginScreen(callback, mod_mobilelogin.getLoginScreenWithMobileHtml(e, flowObj), dataObj);
	        cachedElements.loginPopup.addClass('active');
	    }
	    
	    mod_mobilelogin.getUser = function (userId) {
            return mod_login.getUser(userId);
        };
	    
	    mod_mobilelogin.initActions = function () {
	        mod_mobilelogin.setConfig();
	        mod_mobilelogin.setErrorConfig();
            cachedElements.closeBtn
                .on("click", function() {
                    mod_login.closeBtnHandler();
                    if(mod_login.getGa()!=""){
                      mod_login.fireGAEventMetered('Login_screen_Dismiss','Mobno_entry' + '/'+mod_login.getGa());
                      mod_login.setGa("");
                    }
                    else
                    { 
                      mod_login.fireGAEvent('Close');
                    }
                });
            $("[data-plugin='user-notloggedin']")
            .on("click", "[data-plugin='user-login']", function () {
                //.on("click", "[data-plugin='mobile-user-login']", function () {
                    // handled by normal login
                    if(typeof toiprops !== 'undefined' && toiprops.primetemplate !== true){
                        return;
                    }
                    $('body').addClass('disable-scroll');
                    cachedElements.loginPopup.addClass('active');
                    //mod_login.showLoginScreen();
                    mod_mobilelogin.showLoginScreen();
                    mod_login.setScreenName('Login_Screen');
                    mod_login.fireGAEvent('Load');
                    mod_login.ssoid = '';
                    if (resendTimeInterval) {
                        clearInterval(resendTimeInterval);
                    }
                });
                /*.on("click", "[data-plugin='user-register']", function () {
                    mod_login.register();
                });*/
                
            $(document).on('keyup', mod_login.closeModalOnEscapeKeyPress);
            
            cachedElements.formContainer
                .off('keypress', '#toi-login[data-login-type="mobile"] input[name="emailId"]').on('keypress', '#toi-login[data-login-type="mobile"] input[name="emailId"]', mod_mobilelogin.handleEmailIdKeyPress)
                .off('click', '#toi-login[data-login-type="mobile"] #sso-signInButtonDiv [type="submit"]').on('click', '#toi-login[data-login-type="mobile"] #sso-signInButtonDiv [type="submit"]', mod_mobilelogin.handleEmailIdClick)
                .off('submit', '#toi-login[data-login-type="mobile"] #sso-login-form form').on('submit', '#toi-login[data-login-type="mobile"] #sso-login-form form', mod_mobilelogin.handleEmailIdClick)
                .off('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDiv').on('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDiv', mod_mobilelogin.changeEmailIdHandler)
                .off('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUp').on('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUp', mod_mobilelogin.changeRegisterMobileHandler)
                .off('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUpOtp').on('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUpOtp', mod_mobilelogin.changeRegisterMobileHandlerOtp)
                .off('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUp').on('click', '#toi-login[data-login-type="mobile"] #changeEmailIdDivSignUp', mod_mobilelogin.changeRegisterMobileHandler)
                .off('click', '#toi-login[data-login-type="mobile"] #sso-regenerate-otp').on('click', '#toi-login[data-login-type="mobile"] #sso-regenerate-otp', mod_mobilelogin.regenerateLoginOTP)
                //.off('click', '#toi-login[data-login-type="mobile"] .view-password').on('click', '#toi-login[data-login-type="mobile"] .view-password', mod_login.showPassword)
                //.off('click', '#toi-login[data-login-type="mobile"] .hide-password').on('click', '#toi-login[data-login-type="mobile"] .hide-password', mod_login.hidePassword)
                .off("keypress", '#toi-login[data-login-type="mobile"] #sso-otpLoginDiv input.otpCodeInput').on("keypress, input", '#toi-login[data-login-type="mobile"] #sso-otpLoginDiv input.otpCodeInput', mod_mobilelogin.handleOTPCodeKeyPress)
                .off("keyup", '#toi-login[data-login-type="mobile"] #sso-otpLoginDiv input.otpCodeInput').on("keyup", '#toi-login[data-login-type="mobile"] #sso-otpLoginDiv input.otpCodeInput', mod_mobilelogin.handleOTPCodeKeyUp)
                .off('keyup paste', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="fullname"]').on('keyup paste', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="fullname"]', mod_mobilelogin.handleUsernameKeyUp)
                .off('keypress', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="fullname"]').on('keypress', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="fullname"]', mod_mobilelogin.handleUsernameKeyPress)
                .off('change', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="agree"]').on('change', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="agree"]', mod_mobilelogin.handleTnCCheckbox)
                .off('change', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="sharedDataAllowed"]').on('change', '#toi-login[data-login-type="mobile"] #sso-register-form input[name="sharedDataAllowed"]', mod_mobilelogin.handleTnCCheckbox)
                .off('click', '#toi-login[data-login-type="mobile"] #sso-register-form input[type="submit"]').on('click', '#toi-login[data-login-type="mobile"] #sso-register-form input[type="submit"]', mod_mobilelogin.handleRegisterBtnClick)
                .off('submit', '#toi-login[data-login-type="mobile"] #sso-register-form form').on('submit', '#toi-login[data-login-type="mobile"] #sso-register-form form', mod_mobilelogin.handleRegisterBtnClick)
        };
        
        mod_mobilelogin.initActions();
        mod_mobilelogin.showstate=function(state)
        {
            $(".toi-login-steps ul").hide();
            $(".toi-login-steps").find(state).css('display', 'flex');
            if(state=='.startscreen'){$(".sso-signin-form-data").html(config.headingText);$(".times-prime-benefits").show()}
            if(state!='.startscreen'){$(".times-prime-benefits").hide()}
        }
        
        mod_mobilelogin.getStates=function(flowObj){
            
            var _verifyOTPHTML = 'Verify OTP';
            if(typeof flowObj !== 'undefined' && flowObj.type !== '' && flowObj.timesPointsOnActivity > 0){
                var _iconClass = flowObj.timespointsIconClass ? flowObj.timespointsIconClass : 'tpIcon-onActivity';
                _verifyOTPHTML = '<i class="' + _iconClass +'"> +'+ flowObj.timesPointsOnActivity +'</i><span>Verify OTP</span>';    
            }
            
            var states = '<div class="toi-login-steps">'
            +'<ul class="startscreen"> <li class="active">Mobile Number</li> <li>Your Name</li> <li>'+ _verifyOTPHTML +'</li> </ul>'
            +'<ul class="hide completeyourprofile"> <li class="complete">Mobile Number</li> <li class="active">Your Name</li> <li>'+ _verifyOTPHTML +'</li> </ul>'
            +'<ul class="hide verifymobile"> <li class="complete">Mobile Number</li> <li class="smiley">WELCOME BACK</li> <li class="active">'+ _verifyOTPHTML +'</li> </ul>'
            +'<ul class="hide verifymobilenewuser"> <li class="complete">Mobile Number</li> <li class="complete">Your Name</li> <li class="active">'+ _verifyOTPHTML +'</li> </ul>'
            +'<ul class="hide fta"> <li class="complete">Mobile Number</li> <li class="smiley">WELCOME BACK</li> <li class="complete">'+ _verifyOTPHTML +'</li></ul>'
            +'<ul class="hide ftanew"> <li class="complete">Mobile Number</li> <li class="complete">Your Name</li> <li class="complete">'+ _verifyOTPHTML +'</li></ul>'
            +'</div>'
            return states;
        }

        mod_mobilelogin.getLoginScreenWithMobileHtml = function(e, flowObj){
            var that = this;
            var uitype="";;
            try{uitype=e.currentTarget.getAttribute('data-prime-loginui');}catch(e){}
            var loginScreenWithMobileHtml;
            var tpMsgBeforeSignInButton = '';
            var isTablet = is.tablet();
                
                if(config.updateMobileFlow==true && uitype=="metered-paywall")
                {
                    Object.assign(config, config.verifymobile);
                     $('#user-sign-in.toggle').addClass("toi-user-login")
                }
                else if(uitype=="metered-paywall")
                {    var headingtext=e.currentTarget.getAttribute('logintext'); 
                     if(headingtext!=""){
                         var obj_logintext={headingText:headingtext}
                         Object.assign(config, obj_logintext);
                     }
                }
                else if(uitype=="prime-subscribe"){
                    var user = that.getUser();
                    if (user){
                        Object.assign(config, config.verifymobile);   
                    }else{
                        Object.assign(config, config.subscribe);
                    }
                     $('#user-sign-in.toggle').addClass("toi-user-login")
                }
                else if(uitype=="prime-adfreetrial"){
                     Object.assign(config, config.adfreeprimemessages);
                     $('#user-sign-in.toggle').addClass("toi-user-login")
                }
                else if(uitype=="prime-freetrial"){
                     Object.assign(config, config.primemessages);
                     $('#user-sign-in.toggle').addClass("toi-user-login")
                }   
                else{
                    $('#user-sign-in.toggle').removeClass("toi-user-login");
                     Object.assign(config, config_default);
                }
                if(typeof flowObj !== 'undefined' && flowObj.type !== '' && flowObj.timesPointsOnActivity > 0){
                    loginScreenWithMobileHtml = '<div id="toi-login" data-flow-type="' + flowObj.type + '">';
                    if(flowObj.type === 'freetrial_activate'){
                        tpMsgBeforeSignInButton = '<div class="tpMsg-on-freetrial"><i></i>Continue to earn <strong>+'+ flowObj.timesPointsOnActivity +'</strong> TimesPoints</div>';
                    }
                }
                else{
                    loginScreenWithMobileHtml = '<div id="toi-login">';
                }
                loginScreenWithMobileHtml +=mod_mobilelogin.getStates(flowObj);
                    loginScreenWithMobileHtml +=''
                        +       '<div class="signin-section">'
                  
                        +           '<figure class="user-icon"><img src="/photo/63379366.cms" src="user-icon" /></figure>'
                        +           '<h3 class="sso-signin-form-data">'+config.headingText+'</h3>'
                        +           '<div id="sso-login-form">'
                        +               '<form class="form" autocomplete="off">'
                        +                   '<ul id="sso-signin-form">'
                        +                       '<li id="sso-mobile-input" class="input-field mobile">'
                                                 
                        +                           '<p>'
                        +                                '<span class="country-code">+91</span>'
                        +                               '<input class="enter-num" autocomplete="off" type="text" name="emailId" placeholder="ENTER MOBILE NUMBER" maxlength="10" />'
                        +                           '<i id="changeEmailIdDivSignUpOtp" class="edit" style="display:none;position: absolute;right: 0;top: 4px;"></i>'
                        +                           '</p>'
                        +                           '<div class="errorMsg"></div>'
                        +                       '</li>'
                        +                       '<li id="sso-send-otp-screen" style="display: none;">'
                        +                           '<h3>VERIFY YOUR </br>MOBILE NUMBER</h3>'
                        +                           '<div class="enter-otp-wrap">'
                        +                           '<p>Please enter the OTP sent to</p>'
                        
                        +                           '<div><span></span><i id="changeEmailIdDiv" class="edit"></i></div>'
                        +                           '</div>'
                        +                       '</li>'
                        +                       '<li id="sso-otpLoginDiv" class="input-field" style="display: none;">'
                        +                           '<input class="otpCodeInput" name="otpCode_1" type="' + (isTablet? 'number': 'text') + '" id="otpCode_1" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_2" type="' + (isTablet? 'number': 'text') + '" id="otpCode_2" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_3" type="' + (isTablet? 'number': 'text') + '" id="otpCode_3" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_4" type="' + (isTablet? 'number': 'text') + '" id="otpCode_4" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_5" type="' + (isTablet? 'number': 'text') + '" id="otpCode_5" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<input class="otpCodeInput" name="otpCode_6" type="' + (isTablet? 'number': 'text') + '" id="otpCode_6" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
                        +                           '<div class="errorMsg wrongotp"></div>'
                        +                           '<div class="successMsg"></div>'
    		            +                       '</li>'
                        +                       '<li id="sso-login-otp-msg" class="text-field">'
                        +                           '<p></p>'
                        +                       '</li>'
                        +                       '<li id="sso-signInButtonDiv" class="submit">' + tpMsgBeforeSignInButton
                        +                           '<button type="submit" class="submit-btn disabled arrow-btn" disabled="disabled" ></button>'
                        +                           '<div id="regenerate-otp-container" style="display: none;">'
                        +                               '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
                        +                               '<div id="regenerate-timer">Resend OTP in <span>' + config.resendTimeInSec + '</span> sec</div>'
                        +                               '<a id="sso-regenerate-otp" href="javascript:void(0)" class="secondary-link" style="display: none;">Resend OTP</a>'
                        +                           '</div>'
                        +                       '</li>'
                        +                   '</ul>'
                        +               '</form>'
                        +           '</div>'
                        +           '<div id="sso-register-form" style="display: none">'
                        +               '<form class="form" autocomplete="off">'
                        +                   '<ul>'
                        +                       '<li id="sso-mobile-input-filled" class="input-field mobile typed">'
                        +                           '<p>'
                        +                               '<input autocomplete="off" type="text" name="emailId" maxlength="10" readonly />'
                        +                               '<i id="changeEmailIdDivSignUp" class="edit" />'
                        +                           '</p>'
                        +                           '<div class="errorMsg"></div>'
                        +                       '</li>'
                        +                       '<li id="sso-name-input" class="input-field user-name">'
                        +                           '<p>'
                        +                               '<input autocomplete="off" type="text" name="fullname" placeholder="ENTER YOUR NAME" maxlength="30" />'
                        +                           '</p>'
                        +                           '<div class="errorMsg"></div>'
                        +                       '</li>'
                        +                       '<li id="sso-registerButtonDiv" class="submit">'
                        +                           '<button type="submit" class="submit-btn disabled arrow-btn" value="SUBMIT" disabled="disabled" />'
                        // +                           '<input type="submit" class="submit-btn disabled" value="SUBMIT" disabled="disabled" />'
                        +                       '</li>';
            loginScreenWithMobileHtml += mod_login.getConsentHTML();
            loginScreenWithMobileHtml +=                  '</ul>'
                        +               '</form>'
                        +           '</div>'
                        +       '</div>'
                        //  +           '<div id="first-time-registration">'
                        //  +           '<h3>TOI+ FREE TRIAL ACTIVATED</h3>'
                        //  +           '<p class="heading">WELCOME ABOARD,<span id="free-trial-name"></span></p>'
                        //  +           '<p>Enjoy reading premius articles from TOI+ and access THE Times Of India ads free.Additionally, enjoy 1-month membership of Times of India </p>'
                        //  +           '</div>'
                         +      '<div class="times-prime-benefits"><h6>'+config.bottomText+'</h6>'
                     +'<figure><span><img src="https://static.toiimg.com/photo/74175758.cms" alt="times-prime"><span></figure>'
                     +'<ul><li><img src="https://static.timesprime.com/3x/gaana.png?v=2H1" alt="logo"></li><li><img src="https://static.toiimg.com/photo/76853668.cms" alt="logo"></li><li><img src="https://static.timesprime.com/3x/myntra.png?v=1H1" alt="logo"></li><li><span class="brands">20+ Brands</span></li></ul>'
                 +    '</div>'
                        +   '</div>'
                         +          '<div class="primefooterlogo">'
                              +       '<div class="powered-by">'
                        +           '<img src="https://static.toiimg.com/photo/72142679.cms" />'
                        +       '</div>'
                        +       '<div class="teams-logo">'
                        +          '<span>One Network. One Account</span>'
                        +           '<a href="http://timesofindia.indiatimes.com/" target="_blank" class="toi"/><a href="http://economictimes.indiatimes.com/" target="_blank" class="et"/><a href="http://navbharattimes.indiatimes.com/" class="nbt" target="_blank"/><a href="http://maharashtratimes.indiatimes.com/" class="sm" target="_blank"/><a href="http://www.speakingtree.in/" class="st" target="_blank"/><a href="http://itimes.com/" class="itimes" target="_blank"/><a href="http://www.timespoints.com" class="tp" target="_blank"/>'
                        +       '</div>'
                        +     '</div>';
            // }
            // else{
            // loginScreenWithMobileHtml = '<div id="toi-login">'
            //             +       '<div class="signin-section">'
            //             +           '<figure class="user-icon"><img src="/photo/63379366.cms" src="user-icon" /></figure>'
            //             +           '<h3 class="sso-signin-form-data">'+config.headingText+'</h3>'
            //             +           '<div id="sso-login-form">'
            //             +               '<form class="form" autocomplete="off">'
            //             +                   '<ul id="sso-signin-form">'
            //             +                       '<li id="sso-mobile-input" class="input-field mobile">'
            //             +                           '<p>'
            //             +                               '<input autocomplete="off" type="text" name="emailId" placeholder="ENTER MOBILE NUMBER" maxlength="10" />'
            //             +                           '</p>'
            //             +                           '<div class="errorMsg"></div>'
            //             +                       '</li>'
            //             +                       '<li id="sso-send-otp-screen" style="display: none;">'
            //             +                           '<h3>We have sent OTP to</h3>'
            //             +                           '<div><span></span><i id="changeEmailIdDiv" class="edit"></i></div>'
            //             +                       '</li>'
            //             +                       '<li id="sso-otpLoginDiv" class="input-field" style="display: none;">'
            //             +                           '<input class="otpCodeInput" name="otpCode_1" type="' + (isTablet? 'number': 'text') + '" id="otpCode_1" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_2" type="' + (isTablet? 'number': 'text') + '" id="otpCode_2" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_3" type="' + (isTablet? 'number': 'text') + '" id="otpCode_3" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_4" type="' + (isTablet? 'number': 'text') + '" id="otpCode_4" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_5" type="' + (isTablet? 'number': 'text') + '" id="otpCode_5" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<input class="otpCodeInput" name="otpCode_6" type="' + (isTablet? 'number': 'text') + '" id="otpCode_6" maxlength="1" autocomplete="new-password" autocorrect="off" autocapitalize="off" spellcheck="false"/>'
            //             +                           '<div class="errorMsg wrongotp"></div>'
            //             +                           '<div class="successMsg"></div>'
    		      //      +                       '</li>'
            //             +                       '<li id="sso-login-otp-msg" class="text-field">'
            //             +                           '<p></p>'
            //             +                       '</li>'
            //             +                       '<li id="sso-signInButtonDiv" class="submit">'
            //             +                           '<input type="submit" class="submit-btn disabled" value="SUBMIT" disabled="disabled" />'
            //             +                           '<div id="regenerate-otp-container" style="display: none;">'
            //             +                               '<span class="regenerate-otp">Didn\'t receive OTP?</span>'
            //             +                               '<div id="regenerate-timer">Resend OTP in <span>' + config.resendTimeInSec + '</span> sec</div>'
            //             +                               '<a id="sso-regenerate-otp" href="javascript:void(0)" class="secondary-link" style="display: none;">Resend OTP</a>'
            //             +                           '</div>'
            //             +                       '</li>'
            //             +                   '</ul>'
            //             +               '</form>'
            //             +           '</div>'
            //             +           '<div id="sso-register-form" style="display: none">'
            //             +               '<form class="form" autocomplete="off">'
            //             +                   '<ul>'
            //             +                       '<li id="sso-mobile-input-filled" class="input-field mobile typed">'
            //             +                           '<p>'
            //             +                               '<input autocomplete="off" type="text" name="emailId" maxlength="10" readonly />'
            //             +                               '<i id="changeEmailIdDivSignUp" class="edit" />'
            //             +                           '</p>'
            //             +                           '<div class="errorMsg"></div>'
            //             +                       '</li>'
            //             +                       '<li id="sso-name-input" class="input-field user-name">'
            //             +                           '<p>'
            //             +                               '<input autocomplete="off" type="text" name="fullname" placeholder="ENTER YOUR NAME" maxlength="30" />'
            //             +                           '</p>'
            //             +                           '<div class="errorMsg"></div>'
            //             +                       '</li>'
            //             +                       '<li id="sso-registerButtonDiv" class="submit">'
            //             +                           '<input type="submit" class="submit-btn disabled" value="SUBMIT" disabled="disabled" />'
            //             +                       '</li>';
            // loginScreenWithMobileHtml += mod_login.getConsentHTML();
            // loginScreenWithMobileHtml +=                  '</ul>'
            //             +               '</form>'
            //             +           '</div>'
            //             +       '</div>'
            //             +       '<div class="powered-by">'
            //             +           '<img src="https://static.toiimg.com/photo/72142679.cms" />'
            //             +       '</div>'
            //             +       '<div class="teams-logo">'
            //             +          '<span>One Network. One Account</span>'
            //             +           '<a href="http://timesofindia.indiatimes.com/" target="_blank" class="toi"/><a href="http://economictimes.indiatimes.com/" target="_blank" class="et"/><a href="http://navbharattimes.indiatimes.com/" class="nbt" target="_blank"/><a href="http://maharashtratimes.indiatimes.com/" class="sm" target="_blank"/><a href="http://www.speakingtree.in/" class="st" target="_blank"/><a href="http://itimes.com/" class="itimes" target="_blank"/><a href="http://www.timespoints.com" class="tp" target="_blank"/>'
            //             +       '</div>'
            //             +   '</div>';
            // }
            return loginScreenWithMobileHtml;
        }
        
        return mod_mobilelogin;
	})


define('index',["./preload",
        "./config",
        "tiljs/compatibility",
        "login",
        "./api",
        "tiljs/plugin/dynamic",
        "./rodate",
        "tiljs/plugin/lazy",
        "tiljs/event",
        "tiljs/util",
        "./comments",
        "./homepage",
        "./crwdcnctrl",
        "tiljs/social/facebook",
        "tiljs/social/twitter",
        "tiljs/social/pinterest",
        "tiljs/social/linkedin",
        "tiljs/social/googleplus",
        "tiljs/plugin/pre_event",
        //"personalisation" ,
        "pgtrack",
        "breakingnews",
        "navigation",
        "localstoragec",
        "global",
        "tiljs/load",
        "jquery",
        "./compatibility_toi",
        "tiljs/apps/times/authorcomments",
        "./nlwidget",
        "./tpwidget",
        "primeuserhandler",
        "tiljs/apps/times/tpmodal"
    ],
    function (
        preload,
        config,
        compatibility,
        login,
        api,
        dynamic,
        rodate,
        lazy,
        event,
        util,
        comments,
        homepage,
        crwdcnctrl,
        facebook,
        twitter,
        pinterest,
        linkedin,
        googleplus,
        pevent,
        //personalisation,
        pgtrack,
        breakingnews,
        navigation,
        localstoragec,
        global,
        load,
        $,
        compatibility_toi,
        authorcomments,
        nlwidget,
        tpwidget,
        primeuserhandler,
        tpmodal) {



        setTimeout( function () {
            login.init();
        }, 1000 );
        window.toicommonjs = true;
        //        require(["]);

        //Reload FB like widget on ArticleShow login-Bar
        event.subscribe(["user.login","user.logout"],function(user){
            util.reloadIframe("#fbk");
            document.cookie = 'ssolt=null; domain=.indiatimes.com; path=/; expires=Thu, 01 Jan 1970 00:00:01 GMT';
        });

        /*Login through mytimes widget*/
        try{
            $(document).on('click','[data-action="login"]',function(){
                login.login();
                return false;
            });
        }catch(e){}
        
        // onetapsignin.init();
        // var showTpPopUp = util.getParam('tp');
        // console.log(124, showTpPopUp);
        // TimesApps.checkGdprAndCall(function(){
        //     tpmodal.initTpPopUp();
        // });
        
        /********************************************/
        //pointsEarned.run();

        /************************Disable img right click******************************/
        $(document).off('contextmenu').on('contextmenu','img', function(e) {
            return false;
        });
        /*****************************************************************************/


        /*
         $(window).load(function(){
         require( [ "tiljs/social/facebook", "tiljs/social/twitter", "tiljs/social/pinterest", "tiljs/social/linkedin", "tiljs/social/googleplus","./nlwidget"],
         function ( facebook, twitter, pinterest, linkedin, googleplus,nlwidget) {
         nlwidget.run();
         });

         if($(".g-ytsubscribe")){
         load.js('https://apis.google.com/js/platform.js',function(){
         });
         }
         });
         */
        require( [ "ajax","cookie",'event', "tiljs/social/facebook", "tiljs/social/twitter", "tiljs/social/pinterest", "tiljs/social/linkedin", "tiljs/social/googleplus","./nlwidget"],
            function ( ajax, cookie, event, facebook, twitter, pinterest, linkedin, googleplus, nlwidget ) {
                TimesApps.hideads();
                $("blockquote").each(function(){
                    if(typeof FB == 'undefined' && /facebook/.test($(this).attr('cite'))){
                        facebook.init({init:true,parse: true});
                    }
                    if(typeof twttr == 'undefined' && /twitter/.test($(this).attr('class'))){twitter.init({parse: true});}
                });
                $(window).load(function(){
                    nlwidget.run();
                    if($(".g-ytsubscribe").length){
                        load.js('https://apis.google.com/js/platform.js',function(){
                        });
                    }
                    if($("#gaanaplayer").length){

                        require( [ "gaanaplayer"], function (gaanaplayer){

                            gaanaplayer.init();
                        });

                    }


                });
                event.subscribe("user.status",function(user){
                    //********************************************
                    //************** Login Tracker ***************
                    //********************************************
                    var ssoid = cookie.get("ssoid");
                    var ssolt = cookie.get("ssolt");
                    if(
                        (ssolt === undefined && ssoid!== undefined)
                        || ( ssolt && ssoid && ssolt != ssoid)
                    ){
                        ajax.ajax({
                            url:'https://jsso.indiatimes.com/sso/crossdomain/getTicket?channel=toi&platform=web&version=v1',
                            dataType:"jsonp",
                            success:function(data){
                                if(data && data.ticketId){
                                    var socialappurl = 'https://socialappsintegrator.indiatimes.com/socialsite/v1validateTicket?ticketId=' + data.ticketId + '&channel=toi';
                                    ajax.getJSONP(socialappurl, function (data1) {
                                        if(data1 && data1.code == 200 ){
                                            now=new Date();then=new Date(new Date().setHours(24,0,0,0));
                                            cookie.set("ssolt", ssoid, (then.getTime()-now.getTime())/(1000*60*60*24), "/", ".indiatimes.com", "");
                                            require(["tiljs/login"], function(login) {
                                               login.setNativePrc();
                                            })
                                        }

                                    });
                                }
                            }
                        });
                    }
                    //******************** End *******************
                });
                TimesApps.checkGdprAndCall(function(){
                    // load.js('https://image.timespoints.iimg.in/tpwidgets/static/dist/js/main.js');
                    // TODO: Times Point change - Comment below file and uncomment above file while taking the changes live.
                    //load.js('https://test-img.timespoints.com/static/tpwidgets/static/dist/js/main.js');
                });
                // $(document.body).on('tpwidget-ready',function(){

                //     require( [ "./tpwidget"], function (tpwidget){

                //         tpwidget.init();
                //     });



                // })
            });

        TimesApps.thirdPartyAnalytics = (function(){
            var util, fn, flags;

            flags = {
                loadingScripts : false
            }
            config = {
                urls : [
                    //"//cdn.mouseflow.com/projects/343b6336-6580-4038-bacc-8315a8b99d5e.js",
                    // "https://static.chartbeat.com/js/chartbeat_video.js",
                    //"https://ade.clmbtech.com/cde/ae/2658/var=_ccaud?_u="+encodeURIComponent(window.location.href),
                    //"https://static.clmbtech.com/ase/2658/3/aa.js"
                ]
            }

            fn = {
                _loadScripts : function(){
                    for(var i=0; i < config.urls.length; i++){
                        require(["tiljs/load"], function(loaderMod){
                            loaderMod.js( config.urls[this.i], "", "", "async")
                        }.bind({i:i}));
                    }
                    flags.loadingScripts = true;
                },
                _loadMouseflow : function(){
                    window._mfq = window._mfq || [];
                },
                _isLoadingScripts : function(){
                    return flags.loadingScripts;
                },
                _init: function(){
                    fn._loadMouseflow();
                    fn._loadScripts();
                }
            }


            api = {
                init : function(){ fn._init(); },
                isLoadingScripts : function(){ return fn._isLoadingScripts(); }
            }

            return api;
        })();
        
        TimesApps.loadChartBeatCalls = function() {
            var chartBeatInitFn = function() {
                require(["tiljs/load"], function(loaderMod){
                    loaderMod.js('https://static.chartbeat.com/js/chartbeat_video.js', "", "", "async")
                });   
            }
            
            //TimesApps.checkGdprAndCall(chartBeatInitFn);
        };
        
        
        
        TimesApps.initWeather = function(){
            
                var geocityUrl = 'https://timesofindia.indiatimes.com/geocities/version-9,minify-1.cms', forecastUrl = 'https://timesofindia.indiatimes.com/forecast_js_com/version-41,minify-1.cms';
            
               if( typeof(getCityJSON) == "undefined"){
                   load.js(geocityUrl, function(){
                       TimesApps.initWeather();
                   });
                   
               }else if(typeof(CastObj) == 'undefined'){
                   load.js(forecastUrl, function(){
                       TimesApps.initWeather();
                   });
               }else{
                   CastObj.init();
               }
        };
        
        

        $(document).ready(function(){
            TimesApps.handleThirdPartyCalls();
        });

// Global Sign In function
        TimesApps.SignIn = function(){
            require(['tiljs/apps/times/usermanagement'],function(login){
                login.login();
            });

        }
        TimesApps.comscoreTrackingConfig = {
            comscoreCustomerId : "6036484",
            stationTitle : "TOI-Desktop",
            publisherName : "The Times of India",
            contentGenre : "News",
            c3 : "10"
        };


        //Navigation Manager
        (function(MODULE, win, $){

            var $win = $(win),
                _constants = {
                    configSelectors: { // configs will be picked using these seletors on the $listContainer passed to the init function
                        // watchLaterElementSelector: 'data-watchlater-selector',
                    },
                    urls: {
                        //navjson: '/navjson/nav-$$$$.cms'
                    },
                    cssClasses: {
                        hover: 'active',
                        twoColumn: 'two-column',
                        rightColumn: 'right-column',
                        leftColumn: 'left-column',
                        loader: 'nav-loading',
                        dropdown: 'dropdown'
                    }
                },
                _defaults = {
                    domSelectors: {
                        navigation: '#main-nav',
                        navItem: 'li[data-menu-type]',
                        preloadData: '[data-preload]',
                        leftColumnItem: 'li[data-id]',
                        cyclicContainer:'.cyclicnav',
                        menuItem: 'li[data-id]',
                        preloaded: '[data-preloaded]',
                        headerSearch: '.jSearchLens'
                    }
                },
                _dom = {}, // to be populated dynamically
                _state = {
                    processing: false
                },
                _config,
                _initialized = false,
                _subSectionsData = {},
                _external_htmls = {};

            function getFinalConfig() {
                var finalConfig = {};

                return $.extend(true, _defaults, finalConfig);
            }

            function populateDOMVariables($container){
                _dom.$navigation = $(_config.domSelectors.navigation);
                _dom.$navItems = _dom.$navigation.find(_config.domSelectors.navItem);
                _dom.$header = $('#header');
                _dom.$headerSearch = _dom.$header.find(_config.domSelectors.headerSearch);
                _dom.$subNav = _dom.$header.find('#sub-nav');
                _dom.$bottomArea = _dom.$header.find('.bottom-area');
                _dom.$mobileNav = _dom.$header.find('#toi_mobile_navigation');
                _dom.$allMenu = $('#allmenu');
                _dom.$menuMore = $('[data-more-nav]');
                _dom.$allMenuContent = $("#allmenu-content");
            }

            function handleError(id, tmpl){
                var // = $.templates('#error-msg-tmpl'),
                    $item = $('#main-nav').find('li[data-id="'+id+'"]'),
                    title = $item.text(),
                    link = $item.find('a').attr('href'),
                    data = {
                        "title": title,
                        "link": link
                    };
                //html = $tmpl.render(data);

                if(tmpl === _constants.cssClasses.twoColumn){
                    $item.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).html('').addClass(_constants.cssClasses.loader);
                    // $item.closest('.' + _constants.cssClasses.dropdown).find('right-column').html(html);
                }
                else{
                    $item.find('.' + _constants.cssClasses.dropdown).html('').addClass(_constants.cssClasses.loader);
                    // $item.find('.' + _constants.cssClasses.dropdown).html(html);
                }

            }


            function getProcessedData(data){
                var processedData = data;

                if(typeof data === 'string'){
                    // to remove linebreaks tabs etc
                    processedData = processedData.replace(/\s\s+/g, ' ');

                    // to remove xslt error comments, using while loop because regex replaces all content between first comment's start and last comment's end
                    while(processedData.indexOf('<!--') > -1){
                        processedData = processedData.substr(0, processedData.indexOf("<!--")) + processedData.substr(processedData.indexOf("-->") + 3, processedData.length);
                    }

                    //convert to json
                    try{
                        processedData = JSON.parse(processedData);
                    }
                    catch(e){
                        processedData = null;
                    }
                }

                return processedData;
            }

            function getURL($item, addParams){
                var url,
                    id = $item.data('id'),
                    params = $item.data('params'),
                    external = $item.data('external');
                if(external){
                    url = external;
                }
                else{
                    url = '/navjson/nav-' + id + '.cms';
                    if(addParams && params && id){
                        url += '?' + params;
                    }
                }
                return url;
            }

            function getData($target, success, addParams){
                $.ajax({
                    url: getURL($target, addParams)
                }).then(function(response){
                    if(typeof success === 'function'){
                        success(response);
                    }
                }).fail(function(e){
                    handleError($target.data('id'));
                });
            }

            function render(data, $target){
                var tmpl,
                    generateHTML = false,
                    dataError = false,
                    html = data,
                    $leftColumnItems,
                    $activeLeftItem,
                    menutype = $target.data('menu-type'),
                    $htmlTarget = $target.find('.' + _constants.cssClasses.dropdown),
                    renderData = data;

                switch(menutype){
                    case 'top-stories':
                        (data.stories && data.stories.length && (generateHTML = true)) || (dataError = true);
                        break;
                    case 'multi-list':
                        (data.lists && data.lists.length && (generateHTML = true)) || (dataError = true);
                        break;
                    case 'simple-list':
                        (data.items && data.items.length && (generateHTML = true)) || (dataError = true);
                        break;
                    case 'two-column':
                        (data.items && data.items.length && (generateHTML = true)) || (dataError = true);
                        break;
                }

                if(dataError){
                    handleError($target.data('id'));
                }
                else if(generateHTML){
                    
                    if(menutype === 'two-column'){
                        $leftColumnItems = $htmlTarget.find('.'+_constants.cssClasses.leftColumn + ' ' + _defaults.domSelectors.leftColumnItem);
                        $activeLeftItem = $leftColumnItems.filter('.'+_constants.cssClasses.hover);
                        
                        $htmlTarget = $htmlTarget.find('.'+_constants.cssClasses.rightColumn);
                        
                        if($activeLeftItem && $activeLeftItem.length){
                            data.activeIndex = $leftColumnItems.index($activeLeftItem);
                        }
                        else{
                            data.activeIndex = 0;   
                        }
                        // two column template is not used anymore as the left column is rendered on server side itself
                        tmpl = $.templates('#top-stories-menu-tmpl');
                        renderData = data.items[data.activeIndex];
                    }
                    else{
                        tmpl = $.templates('#'+menutype+'-menu-tmpl');
                    }
                    
                    html = tmpl.render(renderData);
                }
                
                $htmlTarget.html(html);
                $htmlTarget.removeClass(_constants.cssClasses.loader);
                
                if(data.items && data.items.length){
                    persistStoriesData(data);
                }
                //display active items stories
                if($activeLeftItem && $activeLeftItem.length){
                    handleLeftColumnHover.call($activeLeftItem.get(0));
                }
                else if(menutype === 'two-column'){
                    handleLeftColumnHover.call($leftColumnItems.get(0));
                }

                //load images
                require(['tiljs/plugin/lazy'], function(lazy){
                    lazy.load();
                });
            }

            function loadNavItemMenu($target){
                $target.data('loading', true);
                getData($target, function(response){
                    var data  = response;
    
                    if($target.data('menu-type') !== 'external-html'){
                        data  = getProcessedData(response);
                    }
                    if(!data){
                        return;
                    }
                    $target.data('loaded', true);
                    $target.data('loading', false);
                    render(data, $target);
                });
            }
            
            function highlightFirstItem($target){
                var $leftColumn = $target.find('.' + _constants.cssClasses.leftColumn),
                    firstItem = $leftColumn.find('li').get(0);
                    
                handleLeftColumnHover.call(firstItem);
            }

            // function scrollLeftColumnToTop($target){
            //     var $mCustomScrollbar = $target.find('.mCustomScrollbar ');

            //     if($mCustomScrollbar.length){
            //         $mCustomScrollbar.mCustomScrollbar("scrollTo","top");
            //     }
            // }

            function onHover(e){
                /*var is = require('is');
                if( is.touch() ){
                    e.preventDefault();   
                }*/
                var $target = $(this),
                    $activeItem = $target.find(_config.domSelectors.leftColumnItem + '.' + _constants.cssClasses.hover);
                
                if(!$target.data('loaded') && !$target.data('loading')){
                    loadNavItemMenu($target);
                }
                if(!$activeItem.length){
                    highlightFirstItem($target);
                }
            }

            function onMouseOut(e){
                var $target = $(this);
                $( "#main-nav .active" ).removeClass( "active" );
                // if($target.data('menu-type') === _constants.cssClasses.twoColumn){
                //     scrollLeftColumnToTop($target);
                // }
            }

            function persistStoriesData(data){
                $.each(data.items, function(){
                    _subSectionsData[this.catkey] = {
                        "stories": this.stories,
                        "className": (this.className ? this.className : null),
                        "domain": (this.domain ? this.domain : null),
                        "catkey": this.catkey
                    }
                });
            }
            
            function tinyScrollifyLeftColumns(){
                // $leftColumns = _dom.$navigation.find('.'+_constants.cssClasses.leftColumn);
                // $leftColumns.each(function(){
                //     var $this = $(this);
                    
                //     $this.mCustomScrollbar("destroy");
                //     $this.mCustomScrollbar({
                //         theme:"dark-2", //dark-thin, dark-thick, dark-2
                //         scrollButtons:{ enable: false },
                //         mouseWheel:{ enable: true,scrollAmount: 52 },
                //         advanced: {
                //             updateOnContentResize: true,
                //             updateOnBrowserResize: true
                //         }
                //     });
                // });
            }
            
            function lsValidator (key){
                var d = new Date().getTime();
                try{
                    var ls = JSON.parse(localStorage.getItem(key));
                    var ed = ls.timestamp + (ls.expires * 24 * 60 * 60 * 1000);
                    if (ed > d){return ls.value;}
                    return false;
                }catch(err){
                    LSflush();
                }
            }
            
            function LSflush(){
                var dt = new Date().getTime();
                var patt = new RegExp("taffy_");
                for(_x in localStorage){
                    try{
                        var lsg = JSON.parse(localStorage[_x]);
                        //if(patt.test(_x)){localStorage.removeItem(_x);}
                        if(!lsg.timestamp) continue;
                        ed  = (lsg.expires)?lsg.expires:1;
                        ed = lsg.timestamp + (ed * 24 * 60 * 60 * 1000);
	                    if(dt > ed){
	                        localStorage.removeItem(_x);
	                    }
                    }catch(e){}
                }
            }
            
            function preloadData(){
                function loadData(delay){
                    //$(_config.domSelectors.preloadData).each(function(){
                    var preloadSelector = $(_config.domSelectors.navItem + _config.domSelectors.preloadData).length ? $(_config.domSelectors.navItem + _config.domSelectors.preloadData) : $(_config.domSelectors.preloadData)
                    $(preloadSelector).each(function(){
                        var $this = $(this),
                            id = $this.data('id'),
                            localData = lsValidator(id);
    		            if(localData && nl === undefined){
    		                render(localData, $this);
    		            }else if(delay == 1){
                            getData($this, function(response){
                                var data  = response,
                                    menutype = $this.data('menu-type');
                                
                                if(menutype !== 'external-html'){
                                    data  = getProcessedData(response);
                                    if(menutype === 'top-stories'){
                                        $this.data('loaded', true);
                                    }
                                }
                                if(!data){
                                    return;
                                }
                                
                                render(data, $this);
                                if(id)localStorage.setItem(id, JSON.stringify(data));
                            }, true);
                        }
                    });
                };
                
                //loadData(1);
                //preload data after 3 seconds
                setTimeout(function(){
                    loadData(1);
                }, '3000');
            }
            
            function handleAllMenuScroll(){
                var heightBeforeNav = $('.main-area').offset().top + $('.main-area').outerHeight(true),
                    NavHeight = $('#main-nav').outerHeight(true),
                    windowHeight = $(window).height(),
                    allMenuHeight = _dom.$allMenuContent.outerHeight(),
                    allMenuContentHeight = $('#allsection-data').height(),
                    availableHeightForAllMenu = windowHeight - (heightBeforeNav + NavHeight) - (allMenuHeight - allMenuContentHeight),
                    scrollerTheme = $('#header').hasClass('blackrock') ? 'light' : 'dark-2',
                    scrollerRequired = allMenuHeight > availableHeightForAllMenu;
                
                // enable custom scroll if allmenu height is more that available space, and set height as available
                if ($.fn.mCustomScrollbar && scrollerRequired) {
                    _dom.$allMenuContent.height(availableHeightForAllMenu);
                    _dom.$allMenuContent.mCustomScrollbar("destroy");
                    _dom.$allMenuContent.mCustomScrollbar({
                        theme: scrollerTheme,
                        scrollButtons: {
                        },
                        advanced: {
                            updateOnContentResize: true,
                            updateOnBrowserResize: true
                        }
                    });
                }
            }

            function attachEventHandlers(){
                // require(['tiljs/is'], function(is){
                //     if(is.tablet()){
                //         var $navItem8 = _dom.$navigation.find('li:nth-child(8)');
                //         //8 th item click hack for ipad
                //         $navItem8.on('click', function(){
                //           $navItem8.toggleClass('show-extras');
                //         });

                //         $(document).on('click', function(e){
                //             if(!_dom.$navigation.has($(e.target)).length){
                //                 $navItem8.removeClass('show-extras');
                //             }
                //         });
                //     }
                // });

                // on nav item hover
                //$( this ).find( "li:first" ).addClass( "active" );
                _dom.$navigation.on('mouseover', _config.domSelectors.navItem, onHover);

                //_dom.$navigation.on('mouseout', _config.domSelectors.navItem, onMouseOut);

                _dom.$menuMore.on('mouseover', function(){
                    $(this).toggleClass(_constants.cssClasses.hover);

                    _dom.$allMenuContent.addClass(_constants.cssClasses.hover)

                    if(!_dom.$allMenuContent.data('loaded')){
                        _dom.$allMenuContent.addClass(_constants.cssClasses.loader);
                        $.ajax({
                            url: '/allmenu.cms'
                        }).then(function(response){
                            _dom.$allMenuContent.html(response);
                            _dom.$allMenuContent.removeClass(_constants.cssClasses.loader);
                            _dom.$allMenuContent.data('loaded', true);
                            handleAllMenuScroll();
                        }).fail(function(){

                        });
                    }
                });
                
                 $(document).on('mouseover',function(e){
                    // Return when hovered over all menu 
                    if($(e.target).hasClass('all-sections')){
                        return;
                    }
                    // 
                    if(!(_dom.$allMenu.hasClass(_constants.cssClasses.hover)) &&!$(e.target).closest(_dom.$allMenuContent).length){
                        
                        _dom.$allMenuContent.removeClass(_constants.cssClasses.hover)
                    }
                });
                
                // show menu in mobile view
                require(['tiljs/is'], function(is){
                    var eventType = 'click';
                    if(is.touch()){
                        eventType = 'touchend';
                    }
                    
                    $('.mobiletopnav').on(eventType, function(e){
                       
                        e.preventDefault();
                        _dom.$bottomArea && _dom.$bottomArea.toggleClass('navactive');// for odd changes
                        //e.stopPropagation();
                        if(_dom.$mobileNav.hasClass('navactive')){ // hide the div
                            _dom.$mobileNav.toggleClass('navactive');
                            _dom.$header.find(".m_home_icon").remove();
                            _dom.$header.find('.mobiletopnav').toggleClass('crossnav');
                            $('body,html').css({'overflow':'','position':'static', 'width':''});
                        }else{
                            _dom.$mobileNav.toggleClass('navactive');
                            _dom.$header.find('.mobiletopnav').toggleClass('crossnav');
                            _dom.$header.append("<a href='https://m.timesofindia.com/' class='m_home_icon'></a>");
                             $('body,html').css({'overflow':'hidden', 'position':'fixed', 'width':'100%'});
                            
                        }
                    });
                });
                 
                $(document).on('click', function(e){
                    if( !$(e.target).closest(_dom.$navigation).length ){
                        return;
                    }
                    var is = require('is');
                    var shouldHover = !$(e.target).closest('.no-hover').length;
                    var clickedEle = $(e.target);
                    if( clickedEle.closest(".left-column").length ){
                        var isSubmenuOpen = true;
                        $(".left-column .active").removeClass("active");
                    }
                    else if( clickedEle.closest('.jDropdownOpen').length ){
                        //var isDropdownVisible =  !clickedEle.closest(".left-column").length && clickedEle.closest('.jDropdownOpen').length;
                        var isDropdownVisible =  true;
                    }
                    //var isDropdownVisible =  !clickedEle.closest(".left-column").length && clickedEle.closest('.jDropdownOpen').length;
                    _state.tapTrack = _state.tapTrack || {};
                    _state.tapTrack.latesttap = _state.tapTrack.latesttap || new Date().getTime();
                    if ( 
                            ( !isSubmenuOpen && !isDropdownVisible && shouldHover && is.touch() )
                            //|| ( isSubmenuOpen && !$(e.target).closest('li.active').length && shouldHover && is.touch() )
                            || ( isSubmenuOpen && !clickedEle.parent('li.jDropdownOpen').length && shouldHover && is.touch() )
                    ) {
                        /*
                        var now = new Date().getTime();
                        var timesince = now - _state.tapTrack.latesttap;
                        
                        if( (timesince < 600) && (timesince > 0) ){
                            // double tap   
                            var link = $(e.target).closest('a').attr('href');
                            if(link){
                                window.location.href = link;   
                            }
                            console.log("double tap");
                            _state.tapTrack.latesttap = new Date().getTime();
                        }else{*/
                            //too much time to be a doubletap
                            $(e.target).closest('.left-column li').addClass('active');
                            $(".jDropdownOpen").removeClass('jDropdownOpen');
                            $(e.target).closest('li').addClass('jDropdownOpen');
                            if(!( $(e.target).closest(_dom.$allMenu).length || $(e.target).closest(_dom.$menuMore).length )){
                                _dom.$allMenuContent.removeClass(_constants.cssClasses.hover)
                                _dom.$allMenu.removeClass(_constants.cssClasses.hover)
                            }
                            _state.tapTrack.latesttap = new Date().getTime();
                        //}
                        return false;
                    }
                    
                });
                
                _dom.$allMenu.on('click', function(){
                    // $(this).toggleClass(_constants.cssClasses.hover);
                    _dom.$allMenuContent.toggleClass(_constants.cssClasses.hover);
                    $('body').toggleClass('allmenu-active')
                    if(_dom.$allMenuContent.hasClass(_constants.cssClasses.hover)){
                        _dom.$allMenu.addClass(_constants.cssClasses.hover)
                    }
                    else{
                        _dom.$allMenu.removeClass(_constants.cssClasses.hover)
                    }

                    if(!_dom.$allMenuContent.data('loaded')){
                        _dom.$allMenuContent.addClass(_constants.cssClasses.loader);
                        $.ajax({
                            url: '/allmenu.cms'
                        }).then(function(response){
                            _dom.$allMenuContent.html(response);
                            _dom.$allMenuContent.removeClass(_constants.cssClasses.loader);
                            _dom.$allMenuContent.data('loaded', true);
                            handleAllMenuScroll();
                        }).fail(function(){

                        });
                    }
                });

                //search
                if( !$("#pageType").val() || ( $("#pageType").val() && $("#pageType").val().indexOf("video") == -1 ) ){
                    $(".search-form .search-btn").click(function() {
                        var $searchForm = $(this).closest('.search-form'),
                            isSeachFormActive = $searchForm.hasClass('active'),
                            $input = $searchForm.find('form input#query'),
                            category = TimesApps.getGACategorySearch();

                        if (isSeachFormActive) {
                            $searchForm.removeClass("active");
                            $input.blur();
                            ga('send', 'event', category , 'NavBar-Search-Close', window.location.href);
                        }
                        else {
                            $searchForm.addClass("active");
                            $input.focus();
                            // ga('send', 'event', category, 'NavBar-Search', 'Click');
                            ga('send', 'event', category, 'NavBar-Search-Click', window.location.href);
                            //scrol page to search bar top
                            // 			setTimeout(function(){
                            // 			    $('body, html').animate({
                            //     			    scrollTop: $searchForm.offset().top
                            //     			}, 400);
                            // 			}, 500);
                        }
                    });
                }
            }
            
            function updateTopStoriesPG(section, action){
                var i,
                    stories = section.stories,
                    storiesLen = stories.length,
                    currStory;
                
                for ( i = 0; i < storiesLen; i++ ) {
                    currStory = stories[i];
                    currStory.pg = (action + currStory.pg.substr(currStory.pg.indexOf('#')));
                }
            }
            
            function handleLeftColumnHover(){
                    var $this = $(this),
                        id = $this.data('id'),
                        external = $this.data('external'),
                         hiderightcolumn = $this.data('hiderightcolumn'),
                        paramLang = $this.data('param-lang'),
                        html,
                        $twoColumn = $this.closest('.' + _constants.cssClasses.dropdown + '.' + _constants.cssClasses.twoColumn),
                        $leftColumn = $twoColumn.find('.' + _constants.cssClasses.leftColumn),
                        $leftItems = $leftColumn.find('li[data-id]'),
                        $rightColumn = $twoColumn.find('.' + _constants.cssClasses.rightColumn),
                        topStoriesTmpl = $.templates('#top-stories-menu-tmpl'),
                        pg = $this.find('[pg]').attr('pg');
                        

                    //e.stopPropagation();
            try{   if (hiderightcolumn == 1) {$twoColumn.addClass("hiderightcolumn");} else { $twoColumn.removeClass("hiderightcolumn");}}catch(e){}
                    $leftItems.removeClass(_constants.cssClasses.hover);
                    $this.addClass(_constants.cssClasses.hover);

                    if(external){
                        if(_external_htmls[id]){
                            $rightColumn.html(_external_htmls[id]);
                            $this.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).removeClass(_constants.cssClasses.loader);
                            //load images
                            require(['tiljs/plugin/lazy'], function(lazy){
                                lazy.load();
                            });
                        }
                        else{
                            require(['tiljs/cookie'], function(cookie){
                                var _geoloc = cookie.get("geolocation"),
                                    geolan = (window.getCityJSON && getCityJSON[_geoloc] && getCityJSON[_geoloc]['lang']) ? getCityJSON[_geoloc]['lang'] : 'hindi',
                                    url = external;

                                if(paramLang){
                                    url = url + (url.indexOf('?') > -1 ? '&' : '?') + paramLang + '=' + geolan;
                                }

                                $this.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).html('').addClass(_constants.cssClasses.loader);

                                $.ajax({
                                    url: url
                                }).then(function(response){
                                    _external_htmls[id] = response;
                                    $rightColumn.html(response);
                                    $this.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).removeClass(_constants.cssClasses.loader);
                                    //load images
                                    require(['tiljs/plugin/lazy'], function(lazy){
                                        lazy.load();
                                    });
                                }).fail(function(){
                                    handleError(id, _constants.cssClasses.twoColumn);
                                })
                            });
                        }
                    }
                    else{
                        if(_subSectionsData[id] && _subSectionsData[id].stories && _subSectionsData[id].stories.length){
                            // update stories pg as per guidelines
                            updateTopStoriesPG(_subSectionsData[id], pg.substr(0, pg.indexOf('#')));
                            
                            html = topStoriesTmpl.render(_subSectionsData[id]);
                            $rightColumn.html(html);
                            $this.closest('.' + _constants.cssClasses.dropdown).find('.' + _constants.cssClasses.rightColumn).removeClass(_constants.cssClasses.loader);
                            require(['tiljs/plugin/lazy'], function(lazy){
                                lazy.load();
                            });
                        }
                        else{
                            handleError(id, _constants.cssClasses.twoColumn);
                        }
                    }

                }

            function attachLeftColumnEventHandlers(){
                $leftColumns = _dom.$navigation.find('.'+_constants.cssClasses.leftColumn);
                $leftColumns.each(function(){
                    var $this = $(this);
    
                    $this.on('mouseover', _defaults.domSelectors.leftColumnItem, function(e){
                        e.stopPropagation();
                        handleLeftColumnHover.call(this);
                    });
                });
            }

            function enableSticky($target){
                var stickyTop = $target.offset() ? $target.offset().top : 0,
                    windowTop;

                //set header class if sub-nav exists
                //_dom.$subNav.length && _dom.$header.addClass('has-sub-nav');

                $win.scroll( function () {
                    windowTop = $win.scrollTop();
                    if(!$target.hasClass( 'sticky' )){
                        stickyTop = $target.offset() ? $target.offset().top : 0;
                    }
                    if( windowTop > stickyTop ) {
                        //_dom.$header.removeClass('has-sub-nav');
                        $target.addClass( 'sticky' );
                        //$(".search-form").hasClass('active') && $(".search-form .search-btn").trigger('click');
                    } else {
                        $target.removeClass( 'sticky' );
                        window.TimesApps.NavigationManager.handleCyclicItems();
                        //set header class if sub-nav exists
                        //_dom.$subNav.length && _dom.$header.addClass('has-sub-nav');
                    }
                });
            }
            
            function loadSubsectionsFromLocalStorage(){
                $('.'+_constants.cssClasses.leftColumn + ' ' + _defaults.domSelectors.leftColumnItem).each(function(){
                    var $item  = $(this),
                        id = $item.data('id'),
                        lsValue = (function(){
                            try{
                                return JSON.parse(localStorage.getItem(id));
                            }
                            catch(e){
                                return null;
                            }
                        })();
                        
                    if(lsValue && lsValue.items && lsValue.items.length){
                        persistStoriesData(lsValue);
                    }
                });
            }
            
            function handleCyclic($menu) {
                var menuID = $menu.attr('id'),
                    menuLeft = $menu.offset().left,
                    menuWidth = $menu.width(),
                    $menuList = $menu.children('ul.show-extra'),
                    menuListWidth = $menuList.width(),
                    $menuItems = $menuList.children(_config.domSelectors.menuItem),
                    $allSectionsItem = $menuList.find('[data-more-nav]'),
                    $cyclicContainer = $menu.find(_config.domSelectors.cyclicContainer),
                    cyclicContainerWidth = $cyclicContainer.width(),
                    $cyclicList = $cyclicContainer.find('.cyclicList'),
                    $cyclicItems = $cyclicList.children(_config.domSelectors.menuItem),
                    // cyclicContainerWidth subtracted, assuming cyclic would be shown
                    rightEndLimit = menuLeft + menuWidth - (cyclicContainerWidth + 41),
                    adjustment = 0,
                    cyclicMarkIndex;
            
                if(menuID === 'main-nav'){
                    adjustment = _dom.$headerSearch.length ? _dom.$headerSearch.outerWidth(true): 50; // considering search icon on the right side
                    if($allSectionsItem){
                        adjustment += $allSectionsItem.outerWidth(true);
                    }
                }
                
                // move all items out from cyclic nav, if any
                if($cyclicItems.length){
                    $cyclicItems.insertAfter($menuItems.last());
                    // update $menuItems
                    $menuItems = $menuList.children(_config.domSelectors.menuItem);
                }
            
                // find item index starting from which, all items are to be moved into cyclic container
                $menuItems.each(function(index, item){
                    var $item = $(item),
                        itemLeft = $item.offset().left,
                        itemWidth = $item.outerWidth(true);
                    
                    // if last item and cyclic menu not required yet
                    // update the rifht end limit by adding cyclic menu's width
                    // cyclicContainerWidth added, knowing cyclic not needed till now
                    if(index === ($menuItems.length - 1) && !cyclicMarkIndex){
                        rightEndLimit += cyclicContainerWidth;
                    }
                    
                    if((itemLeft + itemWidth + adjustment) > rightEndLimit && !cyclicMarkIndex){
                        cyclicMarkIndex = index;
                        return false;
                    }
                });
            
                if(cyclicMarkIndex){
                    // move items after marked index into cyclic
                    $menuItems.filter(':gt('+ (cyclicMarkIndex - 1) +')').appendTo($cyclicList);
                    $cyclicContainer.removeClass('hidenav');
                }
                else{
                    $cyclicContainer.addClass('hidenav');
                }
                
            }

            MODULE.NavigationManager = {
                init: function(){
                    _config = getFinalConfig();
                    populateDOMVariables();
                    attachEventHandlers();
                    loadSubsectionsFromLocalStorage();
                    preloadData();
                    tinyScrollifyLeftColumns();
                    attachLeftColumnEventHandlers();
                    //enable header sticky behaviour
                    //enableSticky(_dom.$bottomArea);
                    //initialize navsearchbox module, just by adding dependency
                    if( !$("#pageType").val() || ( $("#pageType").val() && $("#pageType").val().indexOf("video") == -1 ) ){
                        require(['navsearchbox'], function(navsearchbox){});
                    }
                    
                    // add show-extra class on navigations on load
                    _dom.$navigation && _dom.$navigation.length && _dom.$navigation.children('ul').addClass('show-extra');
                    _dom.$subNav && _dom.$subNav.length && _dom.$subNav.children('ul').addClass('show-extra');
                },
                handleCyclicItems : function(){
                   require(["tiljs/is"], function (is) {
                        if(!is.mobile()){
                            _dom.$navigation && _dom.$navigation.length && handleCyclic(_dom.$navigation);
                            _dom.$subNav && _dom.$subNav.length && handleCyclic(_dom.$subNav);
                        }    
                    });
                }
            }

        })(window.TimesApps, window, jQuery);
        
        // init new navigation module
        setTimeout(function(){
            if($('#main-nav').length){
            $(function(){
                setTimeout(function(){
                    window.TimesApps.NavigationManager.init();
                    window.TimesApps.NavigationManager.handleCyclicItems();
                });
            });
            require(['event'],function(event){
                event.subscribe("window.resize", window.TimesApps.NavigationManager.handleCyclicItems);
                
                window.top.adsCallback = function(adtype){
                    if(typeof adtype!='undefined' && adtype =="gutterclose"){
                        try{if(primePaymentFlow){primePaymentFlow.show_ad_free_nudge(true)} }catch(e){}
                    }
                    if(typeof adtype!='undefined' && adtype =="expandoclose"){
                        try{if(primePaymentFlow){primePaymentFlow.show_ad_free_nudge(true)}}catch(e){}
                    }
                    if(typeof adtype!='undefined' && adtype =="gutter"){
                        event.publish("window.early_resize");
                        setTimeout(function(){
                            // window.TimesApps.NavigationManager.handleCyclicItems();
                            // $(window).trigger('resize');
                            event.publish("window.resize");
                            
                        },1500);
                        setTimeout(function(){if(typeof redraw_graphs_pollution === 'function'){redraw_graphs_pollution();}},1000);                
                    }
                };
                
            });
            
        }
        },2000);
    } );

require(["index"]);

TimesApps.removeGeoCookies = function(){
    var cookieList = ['geolocation', 'geostate'];

    try{
        localStorage.clear();
        sessionStorage.clear();
    }catch(e){}

    require(['tiljs/cookie'], function(cookieFn){
        for(var i=cookieList.length-1; i >=0; i--){
            cookieFn.remove(cookieList[i], '/', 'indiatimes.com');
        }
    })
};

TimesApps.SavingsAPI = (function() {
        var fn, returnFn;
        var primePagesTMPL = ['Prime-articleshow'];
        var readyToFire = false;
        var callQueue = [];
        
        fn = {
            fireAPI: function(msid) {
                if (typeof toiprops === 'object' && toiprops.toipr === 1) {
                    if (!readyToFire) {
                        callQueue.push({ msid: msid });
                        return;
                    }
                    require(['cookie'],function(cookie){
                	    var ssoid = cookie.get("ssoid") || cookie.get("ssoId");
                	    var ticketId = cookie.get("TicketId");
                	    var isPrimePage = (primePagesTMPL.indexOf(toiprops._Tmpl_pg) > -1) ? true :false;
                        var data = {
                            user: {
                                ssoId: ssoid,
                                ticketId: ticketId
                            },
                            otherDetails: {
                            articleId: msid || '',
                            articleName: document.title,
                            plusArticle: isPrimePage
                            }
                        };
                        
                        // $.ajax({
                        //     url: 'https://api.timesprime.com/prime/external/updateTOISavings', 
                        //     data: JSON.stringify(data), 
                        //     type: 'POST', 
                        //     contentType: 'application/json',
                        //     dataType: "json"
                        // });
                	});   
                }   
            },
            fireCallsOnReady: function() {
                if (callQueue && callQueue.length > 0) {
                    // for (var i = 0; i < callQueue.length; i++) {
                    //     fn.fireAPI(callQueue[i].msid);
                    // }
                }
            },
            initializeApi: function() {
                // ToDo: For testing purpose only. Remove this while taking live.
                // toiprops.toipr = 1;
                if (typeof toiprops === 'object' && toiprops.toipr === 1) {
                    readyToFire = true;
                    fn.fireCallsOnReady();
                }
            },
            addCallsToQueue: function(msid) {
                //fn.fireAPI(msid);
            }
        };
        
        returnFn = {
            initializeApi: function() {
                 fn.initializeApi();
             },
            addCallsToQueue: function(msid) {
                fn.addCallsToQueue(msid);
            },
        };
        
        //fn.initializeApi();
        
        return returnFn;
})();  

TimesApps.handleThirdPartyCalls = function() {
    /*
    * GDPR common actions 
    */
    
    var restOfWorldActions = function(){
        TimesApps.thirdPartyAnalytics.init();
        if($('#weathershow').html()==''){
            TimesApps.initWeather(); 
        }
        if(typeof TimesApps.SavingsAPI !== 'undefined'){
            TimesApps.SavingsAPI.initializeApi();    
        }
    }
    
    var GdbprConsentActions = function(){
        window.TimesGDPR.common.consentModule.gdprCallback(function(dataObj){
            //check list if all, neeed to load on optout
            if (dataObj.isEUuser && dataObj.didUserOptOut === false ) {
                TimesApps.thirdPartyAnalytics.init();
            }
        });
        TimesApps.removeGeoCookies();
    }
    
    TimesApps.checkGdprAndCall(restOfWorldActions, GdbprConsentActions);
};
TimesApps.hideads = function() {
    if(typeof toiprops==='object' && toiprops.toipr==1){
        $('.colombia,.ad1,.ctn_ads_rhs,.colombia,.ad,.ads,.ad-widget,div[id^=div-gpt-ad],div[class^=ctn_ads]').remove();
    }
};

(function(){
    // takes optional param $container as a jquery element 
    TimesApps.removeIfEmpty = function($container){
        var $elements = $container && $container.find('[data-hide-if-empty="container"]') ||  $('[data-hide-if-empty="container"]');
        $elements.each(function(index, node){
            var $node = $(node),
                $parent = $node.closest('[data-hide-if-empty="parent"]');
            if($node.children().length === 0){
                if($parent.length){
                    $parent.remove();
                }else{
                    $node.remove();
                }
            }
        });
    }
    
    
    TimesApps.addTinyScrollBar = function($container){
        
        require(['tiljs/is'], function(is){
            
            var device = 'desktop';
            
            if (is.mobile()){
                device = 'mobile';
            } else if(is.tablet()){
                device = 'tablet'
            }
        
            var $elements = $container && $container.find('[data-tinyscroll="yes"]') ||  $('[data-tinyscroll="yes"]');
        
            $elements.each(function(index, node){
                var $node = $(node) , excludeDevices = [];
                
                if($node.data('exclude-devices')){
                    excludeDevices = $node.data('exclude-devices').split(',');
                }
                // if currrent device is a part of excludedevice then return
                if(excludeDevices.indexOf(device) !== -1){
                    return;
                }
                
                $node.mCustomScrollbar({
                    theme: $node.data('theme') || "dark",
                    scrollButtons: {
                        enable: $node.data('scroll-button')|| false
                    },
                    scrollInertia: $node.data('scroll-inertia')|| 0,
                    mouseWheel: {
                        enable: $node.data('mouse-wheel-enable') || true,
                        scrollAmount: $node.data('mouse-wheel-scrollamount') || 52
                    },
                    advanced: {
                        updateOnContentResize: $node.data('update-on-content-resize') ||true
                    }
                });
            });
        });
    } 
    
    $(document).ready(function(){
        TimesApps.removeIfEmpty();
        TimesApps.addTinyScrollBar();
        // Remove prc cookie if prc value set starts with 0#. Cookie format is primestatus#primehash.
        require(["tiljs/cookie"], function(cookie) {
            var prcVal = cookie.get('prc');
            if (prcVal && prcVal.split('#')[0] === '0') {
                cookie.remove('prc');
                cookie.remove('prc', '/', 'indiatimes.com');
            }
        });
    });
    
    /* Adding funtion to window to be called from iframe refer: callmy_parentfn.cms for more info */
    window.gaForMaskIndiaCompWidget = function(){
        if(window.ga){ ga('send', 'event', 'mask_india_gleam_widget', 'view', '', {'nonInteraction': 1}) }
    }
})();

// handle amazon paytm etc links click
    $(document).on('click', '[data-plugin="amazon-link"], [data-plugin="paytm-link"], [data-plugin="tatacliq-link"]', function(e){
        e.preventDefault();
        var obj, uri = [], affiliate_pagename, affiliate_domainname = 'https://www.gadgetsnow.com', redirectUrl;
        
        var params = new URLSearchParams(window.location.search)
        var isSourcePresentInUrl = params.has("source") && params.get("source")!== "";
         
        
        
        var _pluginNode = this.getAttribute('data-plugin');
		var url = $(this).data('url') || $(this).attr('href');
		
		var affPlatformIndicatorValue = $('body').data("aff-platform"); // set from affiliate_widgets_js
		
		if(url.indexOf("$platform$") !== -1 && affPlatformIndicatorValue ){ // tag need to set according to platfrom
		    url = url.replace('$platform$',affPlatformIndicatorValue === 'mweb'? 'wap': affPlatformIndicatorValue );
		}
		
		obj = {
                price : ($(this).data('price')) ? $(this).data('price') : '',
                title : ($(this).data('title')) ? $(this).data('title') : '',
	        }
	    
	    if(_pluginNode == 'amazon-link'){
            obj.amz_ga = ($(this).data('amz_ga')) ? $(this).data('amz_ga') : '',
            obj.source =  isSourcePresentInUrl ? params.get("source") : '',
            affiliate_pagename = '/affiliate_amazon.cms';
            // in case of amazon, we need to redirect TOI intermediate page except gadgets news section (subsec1 = 66949542)
            if(toiprops.subsec1 !== '66949542'){
	            affiliate_domainname = '';
	        }
	        //AF-394
	        if($(this).data('handle-org-tags') === 'yes' && (document.referrer.indexOf('google') !== -1 || document.referrer.indexOf('ampproject') !== -1)){
	            url = url.replace(/toi_bestproducts_/gi, 'toi_bestproducts_org_');
	        }
        }
	    else if(_pluginNode == 'paytm-link'){
		    obj.tag = ($(this).data('tag')) ? $(this).data('tag') : '',
		            
	        obj.utm_source = ($(this).data('utm_source')) ? $(this).data('utm_source') : 'toiweb',
            obj.utm_medium = ($(this).data('utm_medium')) ? $(this).data('utm_medium') : 'affiliate',
            obj.utm_campaign = ($(this).data('utm_campaign')) ? $(this).data('utm_campaign') : 'toiweb_articles',
                    
            obj.paytm_ga = ($(this).data('paytm_ga')) ? $(this).data('paytm_ga') : '',
            affiliate_pagename = '/affiliate_paytm.cms';
        }
        else if(_pluginNode == 'tatacliq-link'){
		    // obj.tag = ($(this).data('tag')) ? $(this).data('tag') : '',
            // obj.utm_source = ($(this).data('utm_source')) ? $(this).data('utm_source') : 'toiweb',
            // obj.utm_medium = ($(this).data('utm_medium')) ? $(this).data('utm_medium') : 'affiliate',
            // obj.utm_campaign = ($(this).data('utm_campaign')) ? $(this).data('utm_campaign') : 'toiweb_articles',
            // obj.ttclq_ga = ($(this).data('ttclq_ga')) ? $(this).data('ttclq_ga') : '',
            
            // no extra params needed as of now for tata cliq
            // https://timesgroup.jira.com/browse/TOIPR-58172
            obj = {};
            
            // tata cliq affiliate page created on TOI / mTOI channels (XSLT)
            // https://timesgroup.jira.com/browse/TOIPR-58172
            affiliate_domainname = '';
            affiliate_pagename = '/affiliate_tatacliq.cms';
        }
        else{
		    return false;
	    }
	    
        Object.keys(obj).forEach(function (itemKey) {
        	if(obj[itemKey]){
        	    uri.push(itemKey + '=' + obj[itemKey]);
        	}
        });
        
        uri = uri.join('&');
        
	    redirectUrl = url;
	    
	    /*if(toiprops.subsec1 == '66949542'){
	        window.open("https://www.gadgetsnow.com" + affiliate_pagename + "?url=" + encodeURIComponent(redirectUrl) + '&' + uri);    
	    }
	    else{
	        window.open(affiliate_domainname + affiliate_pagename + "?url=" + encodeURIComponent(redirectUrl) + '&' + uri);
	    }*/
	    
	    window.open(affiliate_domainname + affiliate_pagename + "?url=" + encodeURIComponent(redirectUrl) + '&' + uri);
	    
	    var _trackpgstr = $(this).attr('track-pg');
	    if(!!_trackpgstr){
    	    require(["pgtrack"], function(pgtrack) {
                if(_trackpgstr.indexOf('geturl') > -1){
                    _trackpgstr = _trackpgstr.replace('geturl', document.location.href);
                }
                pgtrack.track('#'+_trackpgstr);
            });
	    }
	    
	    var affGa = $(this).attr('aff-ga');
	    if(affGa != undefined ){
    	    var affValues =  affGa.split('#');
            if(affValues[0].indexOf("$platform$") !== -1 && affPlatformIndicatorValue ){ // tag need to set according to platfrom
    	        affValues[0] = affValues[0].replace("$platform$",affPlatformIndicatorValue.toUpperCase());
    	    }
            if(window.ga){ ga('send', 'event', affValues[0], affValues[1] , affValues[2] || '') }
	    }	    
	    
    });
    
    $(document).on('click', '[data-plugin="croma-link"]', function(e){
        var $el = $(e.currentTarget);
        var landingURL = $el.attr("data-url");
        if(window.ga){
            ga('send', 'event', 'WEB-articleshow', 'croma_affiliate',landingURL );
        }
        window.open(landingURL);
    })
    
    $(document).on('click', '[data-plugin="fnp-link"]', function(e){
        var $el = $(e.currentTarget);
        var landingURL = $el.attr("data-url");
        if(window.ga){
            ga('send', 'event', 'WEB-articleshow', 'fnp_affiliate',landingURL );
        }
        window.open(landingURL);
    })
    
    // remove loader from affiliate containers, containing links which are to be handled by the [data-plugin="amazon-link"] etc. click handlers above
    $('.aff-initializing').removeClass('aff-initializing');
    
    require(["tiljs/ui"], function(ui) {
        if (ui.inView('.epaperButton', true)) {
            ga('send','event', TimesApps.getGACategorySearch(),'NavBar-Header', 'Header-readEpaperCTA-View');
        }
    });
    
    $(document).off("click",'.epaperButton').on('click','.epaperButton', function (e) {
        ga('send','event', TimesApps.getGACategorySearch(),'NavBar-Header', 'Header-readEpaperCTA-Click');
    });
    
    $(document).on('click', function(e){
    	var url,
    	    queryParams = window.location.href.split('?')[1] || '';
    
    	if (queryParams.indexOf('frmapp=yes')===-1 &&
    	    (
    	        window.location.href.indexOf('.indiatimes.com') === -1 ||
    	        window.location.href.indexOf('m.timesofindia.com') === -1 ||
    	        window.location.href.indexOf('.gadgetsnow.com') === -1
    	    )
    	) {
    	    return;
    	}
    	//console.log(e, e.target, e.isDefaultPrevented())
    	var anchor = $(e.target).closest('a');
    	if (!e.isDefaultPrevented() && anchor && anchor.length && !!anchor.attr('href')) {
    		e.preventDefault();
    		//console.log('redirecting');
    		if (anchor.attr('href').indexOf('?') >-1){
    			url = anchor.attr('href') + '&amp;frmapp=yes';
    		} else {
    			url = anchor.attr('href') + '?frmapp=yes';
    		}
    		window.location.href = url;
    	}else{
    		console.log('isDefaultPrevented')
    	}
    });



var TimesApps = window.TimesApps || {};
var NotificationCentre = (function(){
   var cache, config, bindEvents, fn, api;
   
   config = {
     'apiUrl': 'https://timesofindia.indiatimes.com/ncCentreFeed',
     'msgTemplate': null,
     'defaultImg': 'https://static.toiimg.com/thumb/imgsize-193484,msid-47529300,width-200,resizemode-4/47529300.jpg',
     'storageKey' : 'ntCentre_showTime',
     scrollBarConfig: {
        theme: "light",
        scrollButtons: {enable: false},
        mouseWheel: {enable: true, scrollAmount: 52},
        advanced: {updateOnContentResize: true},
        /*
        requirement changed, not needed now
        callbacks: {
            onScrollStart: function(){},
            onTotalScrollBack: function(){}
        }
        */
     },
     'gaAction': 'Header-Notification',
     'gaLabelForMsgClick': 'Story_View'
   };
   
   cache = {
       container: null,
       jNtList : null,
       jNtBell: null,
       jNtDropdown: null
   }
   
   bindEvents = function(){
       $(document).on('click', fn._hide);
       cache.jNtBell.on('click', fn._showHide);
       /*
       requirement changed, not needed now
       config.scrollBarConfig.callbacks.onScrollStart = fn._onListScroll;
       config.scrollBarConfig.callbacks.onTotalScrollBack = fn._onTotalScrollBack;
       */
   };
   
   fn = {
       _init: function(){
           cache.container = $("[data-plugin='nt-centre']");
           if( !cache.container.length ){
            //   console.log('NotificationCentre, dom template missing');
               return;
           }
           cache.jNtBell = cache.container.find('.jNtBell');
           cache.jNtDropdown = cache.container.find('.jNtDropdown');
           cache.jNtList = cache.container.find('.jNtList');
           config.$msgTemplate = $('.jNotificationMsgTemplate').eq(0).clone();
           bindEvents();
           fn._getData(fn._render);
       },
       _getData: function(renderCb){
            $.ajax({
                url: config.apiUrl,
                dataType: 'json'
            }).done(function(jsonData){
                var ajaxData;
                // console.log("notification_centre ",jsonData);
                try{
                    ajaxData = typeof jsonData == 'object' ? jsonData : JSON.parse(jsonData);
                }catch(e){}
                renderCb(ajaxData);
            }).fail(function(){
                cache.container.hide();
            });
       },
       _getImgUrl: function(photoUrl){
           var msid,
                thumbUrl = config.defaultImg,
                $msgTemplate,
                defaultUrl,
                regex = new RegExp("#msid#", 'g');

           var urlWithMsid = ( photoUrl && photoUrl.trim().length ) && photoUrl.split('/photo/')[1];
           msid = urlWithMsid ? urlWithMsid.split('.cms')[0] : '';

           if( msid ){
               $msgTemplate = config.$msgTemplate.clone();
               defaultUrl = $msgTemplate.find('.jNtThumb').eq(0).data('imgsrctemplate') || "";
               thumbUrl = defaultUrl.replace(regex, msid);
           }
           return thumbUrl;
       },
       _shouldMarkActive: function(msgTime){
           var lastShowTime;
           try{
               lastShowTime = localStorage.getItem(config.storageKey);
           }catch(e){};
           
           if( msgTime > lastShowTime ){
               return true;
           }
       },
       _getLabelForMsgClickGA: function(position, path){
           var label = '#'+config.gaLabelForMsgClick;
           label += '-' + position + '-' + path;
           return label;
       },
       _createPgAttrForMsgClickGA: function(position, path){
           return fn._getLabelForMsgClickGA(position, path) + '~' + config.gaAction;
       },
       _render: function(ntData){
           var newMsgCount = 0,
                msgList = $('<div>');
           if( !(ntData && ntData.multiBreakingNews) ){
               cache.container.hide();
               return;
           }
           var ntDataList = ntData.multiBreakingNews;
           if( Array.isArray(ntDataList) && ntDataList.length ) {
               for(var i=0; i < ntDataList.length; i++){
                   var $msg = config.$msgTemplate.clone();
                   var imgUrl = fn._getImgUrl(ntDataList[i].icon);
                   var text = ntDataList[i].title ? (ntDataList[i].title + ": ") : '';
                   text += ntDataList[i].message ? ntDataList[i].message : '';
                   $msg.find('a')
                        .attr('href', ntDataList[i].path || '');
                   $msg.find('[pg]')
                        .attr('pg', fn._createPgAttrForMsgClickGA(i+1, ntDataList[i].path) );
                   if( fn._shouldMarkActive(ntDataList[i].bnupdatetime) ){
                        $msg.find('a')
                            .addClass('active');
                        newMsgCount++;
                    }
                   $msg.find('.jNtText').text(text);
                   imgUrl && $msg.find('.jNtThumb').attr('data-src',imgUrl);
                   $msg
                   .removeClass('jNotificationMsgTemplate')
                   .find('[rodate]').attr('rodate', ntDataList[i].bnupdatetime);
                   msgList.append($msg);
               }
               if(!ntDataList.length){
                 var $msg = config.$msgTemplate.clone();
                 $msg.find('.jNtThumb').remove();
                 $msg.find('[rodate]').remove();
                 $msg.find('.jNtText').text('No Data Available');
                 //msgList.append($msg)
             }
               cache.jNtList
                        .html(msgList.html())
                        .mCustomScrollbar(config.scrollBarConfig);
               if( ntDataList.length ){
                    newMsgCount && cache.container.find('.noti-count').text(newMsgCount);
                    //newMsgCount && cache.jNtBell.find('.sprite_bg').addClass('ring');
                    require(["rodate"], function(rodate){
                        rodate.uptime();
                    });
               }
           } else {
                cache.container.hide();
                return;
           }
       },
       _hideShowGA: function(type){
           TimesApps.GA.send(config.gaAction, type);
       },
       _hide: function(event, force){
           if( !force && $(event.target).closest(cache.container).length ){
               return;
           }
           //cache.jNtDropdown.addClass('hidden');
           cache.jNtDropdown.slideUp();
           //fn._hideShowGA('Close');
       },
       _showHide: function(e){
           if( cache.jNtDropdown.is(':visible') ){
               fn._hide(e, true);
               return;
           }
           //cache.jNtDropdown.slideToggle();
           cache.jNtDropdown.slideDown();
           var lazyLoad = function(){
                require(['tiljs/plugin/lazy'], function(lazy){
                    lazy.load();
                });    
           }
           setTimeout(lazyLoad, 0);
           
           try{
               localStorage.setItem(config.storageKey, Date.now());
           }catch(e){};
           fn._hideShowGA('Open');
           cache.container.find('.noti-count').text('');
       },
       _onListScroll: function(e){
           cache.container
                    .find('.notification_title')
                    .addClass('ntShadow');
       },
       _onTotalScrollBack: function(){
           cache.container
                    .find('.notification_title')
                    .removeClass('ntShadow');
       }
   };
   
   api = {
       
   };
   
   $(document).ready(function(){
        fn._init();
    });
   
   return api;
}());


	

var TimesApps = window.TimesApps || {};
TimesApps.Popup = function(id, showPopCallback, priority, dataObj, isReady){
    dataObj = dataObj ? dataObj : {};
    this.id = id;
    this.lastShownTimeStamp = !!dataObj.lastShownTimeStamp ? dataObj.lastShownTimeStamp : null;
    this.showPopCallback = showPopCallback;
    this.ready = isReady ? isReady : 0;
    this.priority = priority;
    this.status;
    this.userActionStatus = null;
    this.retryDone = 0;
}

TimesApps.Popup.prototype.showPopCallback = function(){
    return this.showPopCallback();
}

TimesApps.Popup.prototype.getPriority = function(){
    return this.priority;    
}

TimesApps.Popup.prototype.onReadyCallback = function(status){
    this.ready = status;
}

TimesApps.Popup.prototype.isReady = function(){
    return this.ready;
}

TimesApps.Popup.prototype.onShowCallback = function(status){
    //show - success / failure / rejected
    this.status = status;
    if(!!status){
        this.lastShownTimeStamp = Date.now();
    }
}

TimesApps.Popup.prototype.getStatus = function(){
    return this.status;
}

TimesApps.Popup.prototype.setStatus = function(status){
    return this.status = status || false;
}

TimesApps.Popup.prototype.getLastShownTime = function(status){
    return this.lastShownTimeStamp;
    
}

TimesApps.Popup.prototype.onUserActionCallback = function(status){
    this.userActionStatus = status;
}

TimesApps.PopUpManager = (function(){
    /*
        1. Register overlay
        2. Decide overlay priority
        3. show overlay


        Register overlay
            - registerOverlay
                - return onReadyCallback
                - all popup's call onReadyCallback to mark status, they are ready to be called 
            - read priority from config
            - create priority queue
    
        Decide overlay priority
	        - read priority queue
	        - call if 1st is ready
	                - if status OK  - call
	                - else if not needed to be called, call Next
	        - 
	        
	    Show overlay
	        - save state in Localstorage
	            - show - true/false
	            - timestamp
	            
	            
	    Config
            - popup list
            - priority for each
            - show frequency
    */
    var state, fn, api, cache, config, constants;
    
    config = {
        'browserStorageKey' : 'popUpManager',
        'defaultFrequency'  : 7,
        'waitTimeToCheckStatusInMSec' : 10000,
        'analyseQueueMaxRetryCount':3,
        'maxRetryCount' : 2,
        'popupsConfig' : {
            "prime_adfreenudeg": {
                "frequency": "2",
                "priority": "0"
            },
            "timespointPopUp": {
                "frequency": "1",
                "priority": "1"
            },
            "notification": {
                "frequency": "7",
                "priority": "2"
            },
            "onetapsignin": {
                "frequency": "7",
                "priority": "3"
            }
        }
    };
    
    constants = {
      'HRS_IN_DAY': 24,
      'MINS_IN_HR': 60,
      'SEC_IN_MIN': 60,
      'MilliSEC_IN_SEC': 1000
    };
    
    state = {
        /*
        * 1. insertion sort
        * 
        */
        _analyseQueueRetryCount: 2,
        _popupQueue : []
    }
    
    fn = {
        
        _init: function(){
            require(['tiljs/event'], function(pubSub){
                pubSub.publish('popUpManagerLoaded');
            });
        },
        _register: function(id, showCallback){
          var callbacks = {},
            popUp = fn._createPopUpObject(id, showCallback);
            if(config.popupsConfig[id]){
                fn._addToQueue(popUp);    
            }
            callbacks = {
                onReadyCallback: fn._onReadyCallback.bind(popUp),
                onShowCallback: fn._onShowCallback.bind(popUp),
                onUserActionCallback: popUp.onUserActionCallback
            }
            return callbacks;
        },
        _onReadyCallback: function(status){
            this.onReadyCallback(status);
            $(document).ready(function(){
                setTimeout(fn._analyseQueue, 0);
            });
        },
        _onShowCallback : function(status){
            /*
            * popup displayed
            */
            this.onShowCallback(status);
            fn._setStatusInStorage();
        },
        _createPopUpObject: function(id, showCallback){
            var popUpdata = {},
                lastShownTimeStamp,
                moduleStatus,
                priority = fn._getPriorityFromConfig(id);
                
            moduleStatus = fn._getStatusFromStorage();
            popUpdata.lastShownTimeStamp = moduleStatus[id] && moduleStatus[id].lastShownTime;
            return new TimesApps.Popup(id, showCallback, priority, popUpdata);
        },
        _addToQueue: function(popUp){
            fn._sortAndInsert(popUp);
        },
        _sortAndInsert: function(newPopup){
            // /*
            // * priority values ranges used
            // * are like UNIX nice values.
            // * 0 is highest prority
            // * a value of 100 will be of less priority
            // */
            // var queue = state._popupQueue,
            //     newPopPriority = newPopup.getPriority(),
            //     newQueue = [];
            
            // console.log("*** _sortAndInsert", newPopup.id);
            
            // //queue if empty
            // if( !queue.length ){
            //     newQueue.push(newPopup);
            // }
            
            // for(var i=0; i < queue.length; i++){
            //     var priority = fn._getPriorityFromConfig( queue[i].id );
            //     //
                
            //     if(newPopPriority < priority && i==0){
            //         //low priority, & insert at 0
            //         console.log("*** insert 1", newPopup.id, newPopPriority , priority);
            //         newQueue = [newPopup].concat(queue);
            //         break;
            //     }else if(newPopPriority < priority){
            //         //low priority, insert before i
            //         console.log("*** insert 2", newPopup.id, newPopPriority , priority);
            //         //newQueue = queue.slice(0, i-1).concact([newPopup]).concat( queue.slice(i) );
            //         newQueue = queue.splice(i, 0, newPopup);
            //         console.log("*** insert 2", JSON.stringify(newQueue));
            //         break;
            //     }else if(newPopPriority > fn._getPriorityFromConfig( queue[queue.length-1].id )){
            //         //newPriorityNumber is > oldNumber
            //         // i.e newPriority is less
            //         //insert after i
            //         console.log("*** insert 3", newPopup.id, newPopPriority , priority);
            //         newQueue = queue.push(newPopup);
            //         newQueue =  queue;
            //         break;
            //     }
            // }
            
            // console.log("****popup state._popupQueue ", JSON.stringify(state._popupQueue));
            // console.log("****popup newQueue ", JSON.stringify(newQueue));
            // if(newQueue.length){
            //     state._popupQueue = newQueue;
            // }
            //const newQueue = [...[], ...state._popupQueue];
            var  newQueue=[];
            for(var i=0;i<state._popupQueue.length;i++)
                {
                    newQueue.push(state._popupQueue[i])
                }
            newQueue.push(newPopup);
        if (newQueue.length > 1) {
          newQueue.sort(function(pop1, pop2){
            var sortingValue;
            var t1 = pop1.getLastShownTime();
            var t2 = pop2.getLastShownTime();
            if (pop1.getLastShownTime() && pop2.getLastShownTime()) {
              //both have lastShownTime & sorting basis on time
              console.log("*** sort 1", pop1, pop2);
              sortingValue = t1 - t2;
            } else if (!pop1.getLastShownTime() && !pop2.getLastShownTime()) {
              //both have never shown up, sorting on priority
              console.log("*** sort 2", pop1, pop2);
              sortingValue =
                fn._getPriorityFromConfig(pop1.id) -
                fn._getPriorityFromConfig(pop2.id);
            } else if (!pop1.getLastShownTime()) {
              //pop1 has not shown, moving higher
              console.log('*** sort 3', pop1, pop2);
              sortingValue = -1;
            } else if (!pop2.getLastShownTime()) {
              //pop2 has not shown, moving higher
              console.log("*** sort 4", pop1, pop2);
              sortingValue = 1;
            }
            return sortingValue;
          });
        }

        state._popupQueue = newQueue;
        console.log(state._popupQueue)
        console.log("***end ", JSON.stringify(state._popupQueue));
            
        },
        _removeFromQueue: function(id){
            var queue = state._popupQueue,
                newQueue;
                
            for(var i=0; i < queue.length; i++){
                if( queue[i].id == id ){
                    newQueue = queue.slice(0, i).concat(queue.slice(i+1));
                    break;
                }
            }
            
            state._popupQueue = newQueue;
        },
        _getPriorityFromConfig: function(id){
            var priority = null;
            priority = config.popupsConfig[id] && config.popupsConfig[id]['priority'];
            return priority;
        },
        _getShowFrequencyFromConfig: function(id){
            var frequency;
                days = config.popupsConfig[id] && config.popupsConfig[id]['frequency'];

            days = ( !!days && !isNaN(days) ) ? days : config.defaultFrequency;
            frequency = days * constants.HRS_IN_DAY * constants.MINS_IN_HR * constants.SEC_IN_MIN * constants.MilliSEC_IN_SEC;
            
            return frequency;
        },
        _isPopupAllowedInGivenFrequency:function(lastShownTime, frequencyInMiliSec) {
        var isPopupAllowedInGivenFrequency = Date.now() - lastShownTime >= frequencyInMiliSec;
        //isPopupAllowedInGivenFrequency = lastShownTime;

        //popup has surpassed it's cooldown timeout
        //however, other's haven't been able to show up

        //if queue.haveAlllShown up i.e popupInLoop.getLastShownTime()
        //Date.now() - popupInLoop.getLastShownTime() >= frequencyInMiliSec

        var nDaysMiliS =
          state._popupQueue.length *
          constants.HRS_IN_DAY *
          constants.MINS_IN_HR *
          constants.SEC_IN_MIN *
          constants.MilliSEC_IN_SEC;

        var isPopupShownInLastNDays = lastShownTime
          ? Date.now() - lastShownTime >= nDaysMiliS
          : true;

        console.log('*** isPopupAllowedInGivenFrequency, isPopupShownInLastNDays',isPopupAllowedInGivenFrequency,isPopupShownInLastNDays);
        return isPopupAllowedInGivenFrequency && isPopupShownInLastNDays;
      },
        _analyseQueue:  function(){
           /*
         * check popup list
         * for priority
         * and last shown time
         */
        var popupShowCbCalled = false;
        var moduleStatus = fn._getStatusFromStorage();
        var latestDisplayedPopup = moduleStatus.latestDisplayedPopup || {};
        var popUpCoolDownTime =
          constants.HRS_IN_DAY *
          constants.MINS_IN_HR *
          constants.SEC_IN_MIN *
          constants.MilliSEC_IN_SEC;

        if (Date.now() - latestDisplayedPopup.time < popUpCoolDownTime) {
          //one popup has been displayed in 24hrs, exit
          console.log('***popup  _pop already displayed in 24hrs');
          return;
        }

        for (var i = 0; i < state._popupQueue.length; i += 1) {
          var popupInLoop = state._popupQueue[i];
          /*const frequencyInMiliSec =
            popupInLoop && fn._getShowFrequencyFromConfig(popupInLoop.id);*/

          if (
            popupInLoop.isReady() &&
            popupInLoop.getStatus() !==
              false /* &&
            fn._isPopupAllowedInGivenFrequency(
              popupInLoop.getLastShownTime(),
              frequencyInMiliSec,
            ) */
          ) {
            console.log('*** popupInLoop.getStatus()', popupInLoop.getStatus());
            console.log('***popup  analyse showPopCallback ', popupInLoop.id);
            popupShowCbCalled = true;
            popupInLoop.showPopCallback();
            //in case the pop  up fails
            fn._waitAndCheckStatus(popupInLoop);
            break;
          } else if (
            popupInLoop.getStatus() !== false &&
            !popupInLoop.isReady(popupInLoop.id)
          ) {
            /* else if (
            popupInLoop.isReady() &&
            popupInLoop.getStatus() !== false &&
            !fn._isPopupAllowedInGivenFrequency(
              popupInLoop.getLastShownTime(),
              frequencyInMiliSec,
            )
          ) {
            //already shown in popup's frequency
            console.log('*** if 3 popupInLoop.setStatus false', popupInLoop.id);
            popupInLoop.setStatus(false);
          } */ //wait for pop up to get ready, then show
            fn._waitAndCheckStatus(popupInLoop);
           console.log('*** if 4 fn._waitAndCheckStatus', popupInLoop.id);
            break;
          }
        }
        if (
          !popupShowCbCalled &&
          config.analyseQueueMaxRetryCount >= state._analyseQueueRetryCount
        ) {
          state._analyseQueueRetryCount += 1;
         /* console.log(
            '*** _analyseQueue retry popupShowCbCalled',
            popupShowCbCalled,
          );*/
          setTimeout(fn._analyseQueue, 0);
        }
        },
        _waitAndCheckStatus: function(popUP){
                  setTimeout(
          function() {
            this.popUP.retryDone += 1;
            //pop up has still not shown
            if (
              !this.popUP.getStatus() &&
              this.popUP.retryDone <= config.maxRetryCount
            ) {
              this.popUP.setStatus(false);
              fn._analyseQueue();
            }
          }.bind({ popUP:popUP }),
          config.waitTimeToCheckStatusInMSec
        );
        },
        _setStatusInStorage: function(){
            var data = fn._getStatusFromStorage(),
                jsonData,
                latestDisplayedPopup;
                
            latestDisplayedPopup = {
                time: null,
                id: null
            }
                
            for( var i=0; i < state._popupQueue.length; i++ ){
                var popupInLoop = state._popupQueue[i];
                if( !!popupInLoop.getLastShownTime() ){
                    data[ popupInLoop['id'] ] = {
                      'lastShownTime' :  popupInLoop.getLastShownTime()
                    };
                    if( popupInLoop.getLastShownTime() > latestDisplayedPopup.time ){
                        latestDisplayedPopup.time = popupInLoop.getLastShownTime();
                        latestDisplayedPopup.id = popupInLoop['id'];
                    }
                }   
            }
            
            data['latestDisplayedPopup'] = latestDisplayedPopup;

            try{
                jsonData = JSON.stringify(data);
            }catch(e){
                window.console && console.log("popupManager, JSON error");
            }
            
            localStorage.setItem(config.browserStorageKey, jsonData);
        },
        _getStatusFromStorage: function(){
            var jsonData = localStorage.getItem(config.browserStorageKey),
                data;

            try{
                data = JSON.parse(jsonData) || {};
            }catch(e){
                data = {};
                window.console && console.log("popupManager, JSON error");
            }
            
            return data;
        }
    }
    
    fn._init();
    
    api = {
        registerPopup: function(id, showCallback){ if($('#disable_all_popups').length == 0){return fn._register(id, showCallback);} else {return null} }
    }
    
    return api;
}());


	